---
:id: 102
:name: Symbol
:link: http://ruby-doc.org/core-2.4.1/Symbol.html
:methods:
- :id: 0
  :callseqs:
  - all_symbols    => array
  :description:
  - Returns an array of all the symbols currently in Ruby's symbol table.
  :examples: ''
- :id: 1
  :callseqs:
  - symbol <=> other_symbol       → -1, 0, +1, or nil
  :description:
  - |-
    Compares symbol with other_symbol after calling
    to_s on each of the symbols.
    Returns -1, 0, +1, or nil depending on whether
    symbol is less than, equal to, or greater than
    other_symbol.
  - nil is returned if the two values are incomparable.
  - See String#<=> for more information.
  :examples: ''
- :id: 2
  :callseqs:
  - sym == obj   → true or false
  :description:
  - |-
    Equality—If sym and obj are exactly the same symbol,
    returns true.
  :examples: ''
- :id: 3
  :callseqs:
  - sym == obj   → true or false
  :description:
  - |-
    Equality—If sym and obj are exactly the same symbol,
    returns true.
  :examples: ''
- :id: 4
  :callseqs:
  - sym =~ obj   → integer or nil
  :description:
  - Returns sym.to_s =~ obj.
  :examples: ''
- :id: 5
  :callseqs:
  - sym[idx]      → char
  - sym[b, n]     → string
  :description:
  - Returns sym.to_s[].
  :examples: ''
- :id: 6
  :callseqs:
  - capitalize              → symbol
  - capitalize([options])   → symbol
  :description:
  - Same as sym.to_s.capitalize.intern.
  :examples: ''
- :id: 7
  :callseqs:
  - casecmp(other_symbol)   → -1, 0, +1, or nil
  :description:
  - |-
    Case-insensitive version of Symbol#<=>. Currently,
    case-insensitivity only works on characters A-Z/a-z, not all of Unicode.
    This is different from #casecmp?.
  - |-
    nil is returned if the two symbols have incompatible
    encodings, or if other_symbol is not a symbol.
  :examples: |
    :aBcDeF.casecmp(:abcde)     #=> 1
    :aBcDeF.casecmp(:abcdef)    #=> 0
    :aBcDeF.casecmp(:abcdefg)   #=> -1
    :abcdef.casecmp(:ABCDEF)    #=> 0
    :foo.casecmp(2)   #=> nil
    "\u{e4 f6 fc}".encode("ISO-8859-1").to_sym.casecmp(:"\u{c4 d6 dc}")   #=> nil
- :id: 8
  :callseqs:
  - casecmp?(other_symbol)   → true, false, or nil
  :description:
  - |-
    Returns true if sym and other_symbol
    are equal after Unicode case folding, false if they are not
    equal.
  - |-
    nil is returned if the two symbols have incompatible
    encodings, or if other_symbol is not a symbol.
  :examples: |
    :aBcDeF.casecmp?(:abcde)     #=> false
    :aBcDeF.casecmp?(:abcdef)    #=> true
    :aBcDeF.casecmp?(:abcdefg)   #=> false
    :abcdef.casecmp?(:ABCDEF)    #=> true
    :"\u{e4 f6 fc}".casecmp?(:"\u{c4 d6 dc}")   #=> true
    :foo.casecmp?(2)   #=> nil
    "\u{e4 f6 fc}".encode("ISO-8859-1").to_sym.casecmp?(:"\u{c4 d6 dc}")   #=> nil
- :id: 9
  :callseqs:
  - downcase              → symbol
  - downcase([options])   → symbol
  :description:
  - Same as sym.to_s.downcase.intern.
  :examples: ''
- :id: 10
  :callseqs:
  - empty?   → true or false
  :description:
  - Returns that sym is :“” or not.
  :examples: ''
- :id: 11
  :callseqs:
  - encoding   → encoding
  :description:
  - |-
    Returns the Encoding object that represents the
    encoding of sym.
  :examples: ''
- :id: 12
  :callseqs:
  - id2name   → string
  :description:
  - Returns the name or string corresponding to sym.
  :examples: |
    :fred.id2name   #=> "fred"
    :ginger.to_s    #=> "ginger"
- :id: 13
  :callseqs:
  - inspect    → string
  :description:
  - Returns the representation of sym as a symbol literal.
  :examples: ':fred.inspect   #=> ":fred"

'
- :id: 14
  :callseqs:
  - intern   → sym
  :description:
  - |-
    In general, to_sym returns the Symbol
    corresponding to an object. As sym is already a symbol,
    self is returned in this case.
  :examples: ''
- :id: 15
  :callseqs:
  - length    → integer
  :description:
  - Same as sym.to_s.length.
  :examples: ''
- :id: 16
  :callseqs:
  - match(obj)   → MatchData or nil
  :description:
  - Returns sym.to_s.match(obj).
  :examples: ''
- :id: 17
  :callseqs:
  - match?(obj)   → true or false
  :description:
  - Returns sym.to_s.match?(obj).
  :examples: ''
- :id: 18
  :callseqs:
  - succ
  :description:
  - Same as sym.to_s.succ.intern.
  :examples: ''
- :id: 19
  :callseqs:
  - size    → integer
  :description:
  - Same as sym.to_s.length.
  :examples: ''
- :id: 20
  :callseqs:
  - slice(idx)      → char
  - slice(b, n)     → string
  :description:
  - Returns sym.to_s[].
  :examples: ''
- :id: 21
  :callseqs:
  - succ
  :description:
  - Same as sym.to_s.succ.intern.
  :examples: ''
- :id: 22
  :callseqs:
  - swapcase              → symbol
  - swapcase([options])   → symbol
  :description:
  - Same as sym.to_s.swapcase.intern.
  :examples: ''
- :id: 23
  :callseqs:
  - to_proc
  :description:
  - |-
    Returns a Proc object which respond to the given method by
    sym.
  :examples: '(1..3).collect(&:to_s)  #=> ["1", "2", "3"]

'
- :id: 24
  :callseqs:
  - to_s      → string
  :description:
  - Returns the name or string corresponding to sym.
  :examples: |
    :fred.id2name   #=> "fred"
    :ginger.to_s    #=> "ginger"
- :id: 25
  :callseqs:
  - to_sym   → sym
  :description:
  - |-
    In general, to_sym returns the Symbol
    corresponding to an object. As sym is already a symbol,
    self is returned in this case.
  :examples: ''
- :id: 26
  :callseqs:
  - upcase              → symbol
  - upcase([options])   → symbol
  :description:
  - Same as sym.to_s.upcase.intern.
  :examples: ''
