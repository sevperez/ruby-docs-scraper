---
:id: 114
:name: TracePoint
:link: http://ruby-doc.org/core-2.4.1/TracePoint.html
:methods:
- :id: 0
  :callseqs:
  - new(*events) { |obj| block }          → obj
  :description:
  - |-
    Returns a new TracePoint object, not enabled
    by default.
  - 'Next, in order to activate the trace, you must use #enable'
  - 'When you want to deactivate the trace, you must use #disable'
  - |-
    See Events at TracePoint for
    possible events and more information.
  - A block must be given, otherwise a ThreadError is raised.
  - If the trace method isn’t included in the given events filter, a RuntimeError
    is raised.
  - If the trace method is called outside block, a RuntimeError is raised.
  - Access from other threads is also forbidden.
  :examples: |
    trace = TracePoint.new(:call) do |tp|
        p [tp.lineno, tp.defined_class, tp.method_id, tp.event]
    end
    #=> #<TracePoint:disabled>

    trace.enable
    #=> false

    puts "Hello, TracePoint!"
    # ...
    # [48, IRB::Notifier::AbstractNotifier, :printf, :call]
    # ...
    trace.disable
    TracePoint.trace(:line) do |tp|
        p tp.raised_exception
    end
    #=> RuntimeError: 'raised_exception' not supported by this event
    TracePoint.trace(:line) do |tp|
      $tp = tp
    end
    $tp.line #=> access from outside (RuntimeError)
- :id: 1
  :callseqs:
  - stat → obj
  :description:
  - Returns internal information of TracePoint.
  - |-
    The contents of the returned value are implementation specific. It may be
    changed in future.
  - |-
    This method is only for debugging TracePoint
    itself.
  :examples: ''
- :id: 2
  :callseqs:
  - trace(*events) { |obj| block }        → obj
  :description:
  - |-
    A convenience method for ::new,
    that activates the trace automatically.
  :examples: |
    trace = TracePoint.trace(:call) { |tp| [tp.lineno, tp.event] }
    #=> #<TracePoint:enabled>

    trace.enabled? #=> true
- :id: 3
  :callseqs:
  - binding()
  :description:
  - Return the generated binding object from event
  :examples: ''
- :id: 4
  :callseqs:
  - callee_id()
  :description:
  - Return the called name of the method being called
  :examples: ''
- :id: 5
  :callseqs:
  - defined_class()
  :description:
  - Return class or module of the method being called.
  - If method is defined by a module, then that module is returned.
  - |-
    Note: defined_class returns
    singleton class.
  - |-
    6th block parameter of Kernel#set_trace_func passes
    original class of attached by singleton class.
  - This is a difference between Kernel#set_trace_func and TracePoint.
  :examples: |
    class C; def foo; end; end
    trace = TracePoint.new(:call) do |tp|
      p tp.defined_class #=> C
    end.enable do
      C.new.foo
    end
    module M; def foo; end; end
    class C; include M; end;
    trace = TracePoint.new(:call) do |tp|
      p tp.defined_class #=> M
    end.enable do
      C.new.foo
    end
    class C; def self.foo; end; end
    trace = TracePoint.new(:call) do |tp|
      p tp.defined_class #=> #<Class:C>
    end.enable do
      C.foo
    end
- :id: 6
  :callseqs:
  - disable                → true or false
  - disable { block } → obj
  :description:
  - Deactivates the trace
  - Return true if trace was enabled. Return false if trace was disabled.
  - |-
    If a block is given, the trace will only be disable within the scope of the
    block.
  - 'Note: You cannot access event hooks within the block.'
  :examples: |
    trace.enabled?       #=> true
    trace.disable        #=> false (previous status)
    trace.enabled?       #=> false
    trace.disable        #=> false
    trace.enabled?
    #=> true

    trace.disable do
        trace.enabled?
        # only disabled for this block
    end

    trace.enabled?
    #=> true
    trace.disable { p tp.lineno }
    #=> RuntimeError: access from outside
- :id: 7
  :callseqs:
  - enable         → true or false
  - enable { block }       → obj
  :description:
  - Activates the trace
  - Return true if trace was enabled. Return false if trace was disabled.
  - |-
    If a block is given, the trace will only be enabled within the scope of the
    block.
  - 'Note: You cannot access event hooks within the block.'
  :examples: |
    trace.enabled?  #=> false
    trace.enable    #=> false (previous state)
                    #   trace is enabled
    trace.enabled?  #=> true
    trace.enable    #=> true (previous state)
                    #   trace is still enabled
    trace.enabled?
    #=> false

    trace.enable do
        trace.enabled?
        # only enabled for this block
    end

    trace.enabled?
    #=> false
    trace.enable { p tp.lineno }
    #=> RuntimeError: access from outside
- :id: 8
  :callseqs:
  - enabled?           → true or false
  :description:
  - The current status of the trace
  :examples: ''
- :id: 9
  :callseqs:
  - event()
  :description:
  - Type of event
  - |-
    See Events at TracePoint for
    more information.
  :examples: ''
- :id: 10
  :callseqs:
  - inspect  → string
  :description:
  - Return a string containing a human-readable TracePoint status.
  :examples: ''
- :id: 11
  :callseqs:
  - lineno()
  :description:
  - Line number of the event
  :examples: ''
- :id: 12
  :callseqs:
  - method_id()
  :description:
  - Return the name at the definition of the method being called
  :examples: ''
- :id: 13
  :callseqs:
  - path()
  :description:
  - Path of the file being run
  :examples: ''
- :id: 14
  :callseqs:
  - raised_exception()
  :description:
  - Value from exception raised on the :raise event
  :examples: ''
- :id: 15
  :callseqs:
  - return_value()
  :description:
  - |-
    Return value from :return, c_return, and
    b_return event
  :examples: ''
- :id: 16
  :callseqs:
  - self()
  :description:
  - Return the trace object during event
  - 'Same as #binding:'
  :examples: 'trace.binding.eval(''self'')

'
