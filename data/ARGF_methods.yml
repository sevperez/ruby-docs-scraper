---
- :id: 0
  :callseqs:
  - argv  → ARGV
  :description:
  - |-
    Returns the ARGV array, which contains the arguments passed to
    your script, one per element.
  - 'For example:'
  :examples: ''
- :id: 1
  :callseqs:
  - binmode  → ARGF
  :description:
  - |-
    Puts ARGF into binary mode. Once a stream is in binary mode,
    it cannot be reset to non-binary mode. This option has the following
    effects:
  - Newline conversion is disabled.
  - Encoding conversion is disabled.
  - Content is treated as ASCII-8BIT.
  :examples: ''
- :id: 2
  :callseqs:
  - binmode?  → true or false
  :description:
  - |-
    Returns true if ARGF is being read in binary mode; false
    otherwise. To enable binary mode use ARGF.binmode.
  - 'For example:'
  :examples: |
    ARGF.binmode?  #=> false
    ARGF.binmode
    ARGF.binmode?  #=> true
- :id: 3
  :callseqs: []
  :description:
  - This is a deprecated alias for each_byte.
  :examples: ''
- :id: 4
  :callseqs: []
  :description:
  - This is a deprecated alias for each_char.
  :examples: ''
- :id: 5
  :callseqs:
  - close  → ARGF
  :description:
  - |-
    Closes the current file and skips to the next file in ARGV. If there are no
    more files to open, just closes the current file. STDIN will
    not be closed.
  - 'For example:'
  :examples: ''
- :id: 6
  :callseqs:
  - closed?  → true or false
  :description:
  - |-
    Returns true if the current file has been closed; false
    otherwise. Use ARGF.close to actually close the current file.
  :examples: ''
- :id: 7
  :callseqs: []
  :description:
  - This is a deprecated alias for each_codepoint.
  :examples: ''
- :id: 8
  :callseqs:
  - each(sep=$/)             {|line| block }  → ARGF
  - each(sep=$/, limit)      {|line| block }  → ARGF
  - each(...)                                 → an_enumerator
  - each_line(sep=$/)        {|line| block }  → ARGF
  - each_line(sep=$/, limit) {|line| block }  → ARGF
  - each_line(...)                            → an_enumerator
  :description:
  - |-
    Returns an enumerator which iterates over each line (separated by
    sep, which defaults to your platform’s newline character) of each
    file in ARGV. If a block is supplied, each line in turn will
    be yielded to the block, otherwise an enumerator is returned. The optional
    limit argument is an Integer specifying the maximum
    length of each line; longer lines will be split according to this limit.
  - |-
    This method allows you to treat the files supplied on the command line as a
    single file consisting of the concatenation of each named file. After the
    last line of the first file has been returned, the first line of the second
    file is returned. The ARGF.filename and
    ARGF.lineno methods can be used to determine the filename and
    line number, respectively, of the current line.
  - |-
    For example, the following code prints out each line of each named file
    prefixed with its line number, displaying the filename once per file:
  :examples: |
    ARGF.each_line do |line|
      puts ARGF.filename if ARGF.lineno == 1
      puts "#{ARGF.lineno}: #{line}"
    end
- :id: 9
  :callseqs:
  - bytes     {|byte| block }  → ARGF
  - bytes                      → an_enumerator
  - each_byte {|byte| block }  → ARGF
  - each_byte                  → an_enumerator
  :description:
  - |-
    Iterates over each byte of each file in ARGV. A byte is
    returned as an Integer in the range 0..255.
  - |-
    This method allows you to treat the files supplied on the command line as a
    single file consisting of the concatenation of each named file. After the
    last byte of the first file has been returned, the first byte of the second
    file is returned. The ARGF.filename method can be used to
    determine the filename of the current byte.
  - If no block is given, an enumerator is returned instead.
  - 'For example:'
  :examples: 'ARGF.bytes.to_a  #=> [35, 32, ... 95, 10]

'
- :id: 10
  :callseqs:
  - each_char {|char| block }  → ARGF
  - each_char                  → an_enumerator
  :description:
  - Iterates over each character of each file in ARGF.
  - |-
    This method allows you to treat the files supplied on the command line as a
    single file consisting of the concatenation of each named file. After the
    last character of the first file has been returned, the first character of
    the second file is returned. The ARGF.filename method can be
    used to determine the name of the file in which the current character
    appears.
  - If no block is given, an enumerator is returned instead.
  :examples: ''
- :id: 11
  :callseqs:
  - each_codepoint {|codepoint| block }  → ARGF
  - each_codepoint                       → an_enumerator
  :description:
  - Iterates over each codepoint of each file in ARGF.
  - |-
    This method allows you to treat the files supplied on the command line as a
    single file consisting of the concatenation of each named file. After the
    last codepoint of the first file has been returned, the first codepoint of
    the second file is returned. The ARGF.filename method can be
    used to determine the name of the file in which the current codepoint
    appears.
  - If no block is given, an enumerator is returned instead.
  :examples: ''
- :id: 12
  :callseqs:
  - each_line(sep=$/)        {|line| block }  → ARGF
  - each_line(sep=$/, limit) {|line| block }  → ARGF
  - each_line(...)                            → an_enumerator
  :description:
  - |-
    Returns an enumerator which iterates over each line (separated by
    sep, which defaults to your platform’s newline character) of each
    file in ARGV. If a block is supplied, each line in turn will
    be yielded to the block, otherwise an enumerator is returned. The optional
    limit argument is an Integer specifying the maximum
    length of each line; longer lines will be split according to this limit.
  - |-
    This method allows you to treat the files supplied on the command line as a
    single file consisting of the concatenation of each named file. After the
    last line of the first file has been returned, the first line of the second
    file is returned. The ARGF.filename and
    ARGF.lineno methods can be used to determine the filename and
    line number, respectively, of the current line.
  - |-
    For example, the following code prints out each line of each named file
    prefixed with its line number, displaying the filename once per file:
  :examples: |
    ARGF.each_line do |line|
      puts ARGF.filename if ARGF.lineno == 1
      puts "#{ARGF.lineno}: #{line}"
    end
- :id: 13
  :callseqs:
  - eof?  → true or false
  - eof   → true or false
  :description:
  - |-
    Returns true if the current file in ARGF is at end of file,
    i.e. it has no data to read. The stream must be opened for reading or an
    IOError will be raised.
  :examples: ''
- :id: 14
  :callseqs:
  - eof?  → true or false
  :description:
  - |-
    Returns true if the current file in ARGF is at end of file,
    i.e. it has no data to read. The stream must be opened for reading or an
    IOError will be raised.
  :examples: ''
- :id: 15
  :callseqs:
  - external_encoding   → encoding
  :description:
  - |-
    Returns the external encoding for files read from ARGF as an
    Encoding object. The external encoding is the encoding of the
    text as stored in a file. Contrast with
    ARGF.internal_encoding, which is the encoding used to
    represent this text within Ruby.
  - To set the external encoding use ARGF.set_encoding.
  - 'For example:'
  :examples: 'ARGF.external_encoding  #=>  #<Encoding:UTF-8>

'
- :id: 16
  :callseqs:
  - file  → IO or File object
  :description:
  - |-
    Returns the current file as an IO or File object.
    #<IO:<STDIN>> is returned when the current file is
    STDIN.
  - 'For example:'
  :examples: ''
- :id: 17
  :callseqs:
  - filename  → String
  :description:
  - |-
    Returns the current filename. “-” is returned when the current file is
    STDIN.
  - 'For example:'
  :examples: ''
- :id: 18
  :callseqs:
  - fileno    → integer
  :description:
  - |-
    Returns an integer representing the numeric file descriptor for the current
    file. Raises an ArgumentError if there isn’t a current file.
  :examples: 'ARGF.fileno    #=> 3

'
- :id: 19
  :callseqs:
  - getbyte  → Integer or nil
  :description:
  - |-
    Gets the next 8-bit byte (0..255) from ARGF. Returns
    nil if called at the end of the stream.
  - 'For example:'
  :examples: ''
- :id: 20
  :callseqs:
  - getc  → String or nil
  :description:
  - |-
    Reads the next character from ARGF and returns it as a
    String. Returns nil at the end of the stream.
  - |-
    ARGF treats the files named on the command line as a single
    file created by concatenating their contents. After returning the last
    character of the first file, it returns the first character of the second
    file, and so on.
  - 'For example:'
  :examples: ''
- :id: 21
  :callseqs:
  - gets(sep=$/)     → string or nil
  - gets(limit)      → string or nil
  - gets(sep, limit) → string or nil
  :description:
  - Returns the next line from the current file in ARGF.
  - |-
    By default lines are assumed to be separated by $/; to use a
    different character as a separator, supply it as a String for
    the sep argument.
  - |-
    The optional limit argument specifies how many characters of each
    line to return. By default all characters are returned.
  :examples: ''
- :id: 22
  :callseqs:
  - inplace_mode  → String
  :description:
  - |-
    Returns the file extension appended to the names of modified files under
    in-place edit mode. This value can be set using
    ARGF.inplace_mode= or passing the -i switch to
    the Ruby binary.
  :examples: ''
- :id: 23
  :callseqs:
  - inplace_mode = ext  → ARGF
  :description:
  - |-
    Sets the filename extension for in-place editing mode to the given String. Each file being edited has this value
    appended to its filename. The modified file is saved under this new name.
  - 'For example:'
  - |-
    Each line of file.txt has the first occurrence of “foo” replaced
    with “bar”, then the new line is written out to file.txt.bak.
  :examples: ''
- :id: 24
  :callseqs: []
  :description: []
  :examples: ''
- :id: 25
  :callseqs:
  - internal_encoding   → encoding
  :description:
  - |-
    Returns the internal encoding for strings read from ARGF as an
    Encoding object.
  - |-
    If ARGF.set_encoding has been called with two encoding names,
    the second is returned. Otherwise, if
    Encoding.default_external has been set, that value is
    returned. Failing that, if a default external encoding was specified on the
    command-line, that value is used. If the encoding is unknown,
    nil is returned.
  :examples: ''
- :id: 26
  :callseqs:
  - lineno  → integer
  :description:
  - |-
    Returns the current line number of ARGF as a whole.
    This value can be set manually with ARGF.lineno=.
  - 'For example:'
  :examples: |
    ARGF.lineno   #=> 0
    ARGF.readline #=> "This is line 1\n"
    ARGF.lineno   #=> 1
- :id: 27
  :callseqs:
  - lineno = integer  → integer
  :description:
  - |-
    Sets the line number of ARGF as a whole to the given
    Integer.
  - |-
    ARGF sets the line number automatically as you read data, so
    normally you will not need to set it explicitly. To access the current line
    number use ARGF.lineno.
  - 'For example:'
  :examples: |
    ARGF.lineno      #=> 0
    ARGF.readline    #=> "This is line 1\n"
    ARGF.lineno      #=> 1
    ARGF.lineno = 0  #=> 0
    ARGF.lineno      #=> 0
- :id: 28
  :callseqs: []
  :description:
  - This is a deprecated alias for each_line.
  :examples: ''
- :id: 29
  :callseqs:
  - path      → String
  :description:
  - |-
    Returns the current filename. “-” is returned when the current file is
    STDIN.
  - 'For example:'
  :examples: ''
- :id: 30
  :callseqs:
  - pos   → Integer
  :description:
  - |-
    Returns the current offset (in bytes) of the current file in
    ARGF.
  :examples: |
    ARGF.pos    #=> 0
    ARGF.gets   #=> "This is line one\n"
    ARGF.pos    #=> 17
- :id: 31
  :callseqs:
  - pos = position  → Integer
  :description:
  - |-
    Seeks to the position given by position (in bytes) in
    ARGF.
  - 'For example:'
  :examples: |
    ARGF.pos = 17
    ARGF.gets   #=> "This is line two\n"
- :id: 32
  :callseqs:
  - print               → nil
  - print(obj, ...)     → nil
  :description:
  - Writes the given object(s) to ios. Returns nil.
  - |-
    The stream must be opened for writing. Each given object that isn’t a
    string will be converted by calling its to_s method. When
    called without arguments, prints the contents of $_.
  - |-
    If the output field separator ($,) is not nil, it
    is inserted between objects. If the output record separator
    ($\) is not nil, it is appended to the output.
  - 'produces:'
  :examples: '$stdout.print("This is ", 100, " percent.\n")

'
- :id: 33
  :callseqs:
  - printf(format_string [, obj, ...])   → nil
  :description:
  - |-
    Formats and writes to ios, converting parameters under control of
    the format string. See Kernel#sprintf for details.
  :examples: ''
- :id: 34
  :callseqs:
  - putc(obj)    → obj
  :description:
  - |-
    If obj is Numeric, write the character whose code is
    the least-significant byte of obj, otherwise write the first byte
    of the string representation of obj to ios. Note: This
    method is not safe for use with multi-byte characters as it will truncate
    them.
  - 'produces:'
  :examples: |
    $stdout.putc "A"
    $stdout.putc 65
    AA
- :id: 35
  :callseqs:
  - puts(obj, ...)    → nil
  :description:
  - |-
    Writes the given object(s) to ios. Writes a newline after any that
    do not already end with a newline sequence. Returns nil.
  - |-
    The stream must be opened for writing. If called with an array argument,
    writes each element on a new line. Each given object that isn’t a string or
    array will be converted by calling its to_s method. If called
    without arguments, outputs a single newline.
  - 'produces:'
  - |-
    Note that puts always uses newlines and is not affected by the
    output record separator ($\).
  :examples: |
    $stdout.puts("this", "is", ["a", "test"])
    this
    is
    a
    test
- :id: 36
  :callseqs:
  - read([length [, outbuf]])    → string, outbuf, or nil
  :description:
  - |-
    Reads length bytes from ARGF. The files
    named on the command line are concatenated and treated as a single file by
    this method, so when called without arguments the contents of this pseudo
    file are returned in their entirety.
  - length must be a non-negative integer or nil.
  - |-
    If length is a positive integer, read tries to read
    length bytes without any conversion (binary mode). It returns
    nil if an EOF is encountered before anything can be read.
    Fewer than length bytes are returned if an EOF is encountered
    during the read. In the case of an integer length, the resulting
    string is always in ASCII-8BIT encoding.
  - |-
    If length is omitted or is nil, it reads until EOF
    and the encoding conversion is applied, if applicable. A string is returned
    even if EOF is encountered before any data is read.
  - |-
    If length is zero, it returns an empty string
    ("").
  - |-
    If the optional outbuf argument is present, it must reference a String, which will receive the data. The
    outbuf will contain only the received data after the method call
    even if it is not empty at the beginning.
  - 'For example:'
  - |-
    Note that this method behaves like the fread() function in C. This means it
    retries to invoke read(2) system calls to read data with the specified
    length. If you need the behavior like a single read(2) system call,
    consider #readpartial or #read_nonblock.
  :examples: ''
- :id: 37
  :callseqs:
  - read_nonblock(maxlen)              → string
  - read_nonblock(maxlen, outbuf)      → outbuf
  :description:
  - |-
    Reads at most maxlen bytes from the ARGF
    stream in non-blocking mode.
  :examples: ''
- :id: 38
  :callseqs:
  - readbyte  → Integer
  :description:
  - |-
    Reads the next 8-bit byte from ARGF and returns it
    as an Integer. Raises an EOFError after the last
    byte of the last file has been read.
  - 'For example:'
  :examples: ''
- :id: 39
  :callseqs:
  - readchar  → String or nil
  :description:
  - |-
    Reads the next character from ARGF and returns it as a
    String. Raises an EOFError after the last
    character of the last file has been read.
  - 'For example:'
  :examples: ''
- :id: 40
  :callseqs:
  - readline(sep=$/)     → string
  - readline(limit)      → string
  - readline(sep, limit) → string
  :description:
  - Returns the next line from the current file in ARGF.
  - |-
    By default lines are assumed to be separated by $/; to use a
    different character as a separator, supply it as a String for
    the sep argument.
  - |-
    The optional limit argument specifies how many characters of each
    line to return. By default all characters are returned.
  - An EOFError is raised at the end of the file.
  :examples: ''
- :id: 41
  :callseqs:
  - readlines(sep=$/)     → array
  - readlines(limit)      → array
  - readlines(sep, limit) → array
  :description:
  - |-
    Reads ARGF‘s current file in its entirety, returning an
    Array of its lines, one line per element. Lines are assumed to
    be separated by sep.
  :examples: |
    lines = ARGF.readlines
    lines[0]                #=> "This is line one\n"
- :id: 42
  :callseqs:
  - readpartial(maxlen)              → string
  - readpartial(maxlen, outbuf)      → outbuf
  :description:
  - |-
    Reads at most maxlen bytes from the ARGF
    stream.
  - |-
    If the optional outbuf argument is present, it must reference a String, which will receive the data. The
    outbuf will contain only the received data after the method call
    even if it is not empty at the beginning.
  - |-
    It raises EOFError on end of ARGF
    stream. Since ARGF stream is a concatenation of
    multiple files, internally EOF is occur for each file. #readpartial returns empty
    strings for EOFs except the last one and raises EOFError for
    the last one.
  :examples: ''
- :id: 43
  :callseqs:
  - rewind   → 0
  :description:
  - |-
    Positions the current file to the beginning of input, resetting
    ARGF.lineno to zero.
  :examples: |
    ARGF.readline   #=> "This is line one\n"
    ARGF.rewind     #=> 0
    ARGF.lineno     #=> 0
    ARGF.readline   #=> "This is line one\n"
- :id: 44
  :callseqs:
  - seek(amount, whence=IO::SEEK_SET)  → 0
  :description:
  - |-
    Seeks to offset amount (an Integer) in the
    ARGF stream according to the value of whence. See IO#seek for further details.
  :examples: ''
- :id: 45
  :callseqs:
  - set_encoding(ext_enc)                → ARGF
  - set_encoding("ext_enc:int_enc")      → ARGF
  - set_encoding(ext_enc, int_enc)       → ARGF
  - set_encoding("ext_enc:int_enc", opt) → ARGF
  - set_encoding(ext_enc, int_enc, opt)  → ARGF
  :description:
  - If single argument is specified, strings read from ARGF are tagged with the encoding
    specified.
  - |-
    If two encoding names separated by a colon are given, e.g. “ascii:utf-8”,
    the read string is converted from the first encoding (external encoding) to
    the second encoding (internal encoding), then tagged with the second
    encoding.
  - |-
    If two arguments are specified, they must be encoding objects or encoding
    names. Again, the first specifies the external encoding; the second
    specifies the internal encoding.
  - |-
    If the external encoding and the internal encoding are specified, the
    optional Hash argument can be used to adjust the conversion
    process. The structure of this hash is explained in the String#encode documentation.
  - 'For example:'
  :examples: |
    ARGF.set_encoding('ascii')         # Tag the input as US-ASCII text
    ARGF.set_encoding(Encoding::UTF_8) # Tag the input as UTF-8 text
    ARGF.set_encoding('utf-8','ascii') # Transcode the input from US-ASCII
                                       # to UTF-8.
- :id: 46
  :callseqs:
  - skip  → ARGF
  :description:
  - |-
    Sets the current file to the next file in ARGV. If there aren’t any more
    files it has no effect.
  - 'For example:'
  :examples: ''
- :id: 47
  :callseqs:
  - tell  → Integer
  :description:
  - |-
    Returns the current offset (in bytes) of the current file in
    ARGF.
  :examples: |
    ARGF.pos    #=> 0
    ARGF.gets   #=> "This is line one\n"
    ARGF.pos    #=> 17
- :id: 48
  :callseqs:
  - to_a(sep=$/)     → array
  - to_a(limit)      → array
  - to_a(sep, limit) → array
  :description:
  - |-
    Reads ARGF‘s current file in its entirety, returning an
    Array of its lines, one line per element. Lines are assumed to
    be separated by sep.
  :examples: |
    lines = ARGF.readlines
    lines[0]                #=> "This is line one\n"
- :id: 49
  :callseqs:
  - to_i      → integer
  :description:
  - |-
    Returns an integer representing the numeric file descriptor for the current
    file. Raises an ArgumentError if there isn’t a current file.
  :examples: 'ARGF.fileno    #=> 3

'
- :id: 50
  :callseqs:
  - to_io     → IO
  :description:
  - |-
    Returns an IO object representing the current file. This will
    be a File object unless the current file is a stream such as
    STDIN.
  - 'For example:'
  :examples: |
    ARGF.to_io    #=> #<File:glark.txt>
    ARGF.to_io    #=> #<IO:<STDIN>>
- :id: 51
  :callseqs:
  - to_s  → String
  :description:
  - Returns “ARGF”.
  :examples: ''
- :id: 52
  :callseqs:
  - to_write_io  → io
  :description:
  - |-
    Returns IO instance tied to ARGF for writing
    if inplace mode is enabled.
  :examples: ''
- :id: 53
  :callseqs:
  - write(string)   → integer
  :description:
  - Writes string if inplace mode.
  :examples: ''
