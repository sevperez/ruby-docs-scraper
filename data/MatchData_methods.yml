---
:id: 60
:name: MatchData
:link: http://ruby-doc.org/core-2.4.1/MatchData.html
:methods:
- :id: 0
  :callseqs:
  - mtch == mtch2   → true or false
  :description:
  - |-
    Equality—Two matchdata are equal if their target strings, patterns, and
    matched positions are identical.
  :examples: ''
- :id: 1
  :callseqs:
  - mtch[i]               → str or nil
  - mtch[start, length]   → array
  - mtch[range]           → array
  - mtch[name]            → str or nil
  :description:
  - |-
    Match Reference – MatchData acts as an array, and may be
    accessed using the normal array indexing techniques.  mtch[0]
    is equivalent to the special variable $&, and returns the
    entire matched string.  mtch[1], mtch[2], and so
    on return the values of the matched backreferences (portions of the pattern
    between parentheses).
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m          #=> #<MatchData "HX1138" 1:"H" 2:"X" 3:"113" 4:"8">
    m[0]       #=> "HX1138"
    m[1, 2]    #=> ["H", "X"]
    m[1..3]    #=> ["H", "X", "113"]
    m[-3, 2]   #=> ["X", "113"]

    m = /(?<foo>a+)b/.match("ccaaab")
    m          #=> #<MatchData "aaab" foo:"aaa">
    m["foo"]   #=> "aaa"
    m[:foo]    #=> "aaa"
- :id: 2
  :callseqs:
  - begin(n)   → integer
  :description:
  - |-
    Returns the offset of the start of the nth element of the match
    array in the string. n can be a string or symbol to reference a
    named capture.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.begin(0)       #=> 1
    m.begin(2)       #=> 2

    m = /(?<foo>.)(.)(?<bar>.)/.match("hoge")
    p m.begin(:foo)  #=> 0
    p m.begin(:bar)  #=> 2
- :id: 3
  :callseqs:
  - captures   → array
  :description:
  - Returns the array of captures; equivalent to mtch.to_a[1..-1].
  :examples: |
    f1,f2,f3,f4 = /(.)(.)(\d+)(\d)/.match("THX1138.").captures
    f1    #=> "H"
    f2    #=> "X"
    f3    #=> "113"
    f4    #=> "8"
- :id: 4
  :callseqs:
  - end(n)   → integer
  :description:
  - |-
    Returns the offset of the character immediately following the end of the
    nth element of the match array in the string. n can be a
    string or symbol to reference a named capture.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.end(0)         #=> 7
    m.end(2)         #=> 3

    m = /(?<foo>.)(.)(?<bar>.)/.match("hoge")
    p m.end(:foo)    #=> 1
    p m.end(:bar)    #=> 3
- :id: 5
  :callseqs:
  - eql?(mtch2)   → true or false
  :description:
  - |-
    Equality—Two matchdata are equal if their target strings, patterns, and
    matched positions are identical.
  :examples: ''
- :id: 6
  :callseqs:
  - hash   → integer
  :description:
  - |-
    Produce a hash based on the target string, regexp and matched positions of
    this matchdata.
  - See also Object#hash.
  :examples: ''
- :id: 7
  :callseqs:
  - inspect   → str
  :description:
  - Returns a printable version of mtch.
  :examples: |
    puts /.$/.match("foo").inspect
    #=> #<MatchData "o">

    puts /(.)(.)(.)/.match("foo").inspect
    #=> #<MatchData "foo" 1:"f" 2:"o" 3:"o">

    puts /(.)(.)?(.)/.match("fo").inspect
    #=> #<MatchData "fo" 1:"f" 2:nil 3:"o">

    puts /(?<foo>.)(?<bar>.)(?<baz>.)/.match("hoge").inspect
    #=> #<MatchData "hog" foo:"h" bar:"o" baz:"g">
- :id: 8
  :callseqs:
  - length   → integer
  :description:
  - Returns the number of elements in the match array.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.length   #=> 5
    m.size     #=> 5
- :id: 9
  :callseqs:
  - named_captures → hash
  :description:
  - Returns a Hash using named capture.
  - |-
    A key of the hash is a name of the named captures. A value of the hash is a
    string of last successful capture of corresponding group.
  :examples: |
    m = /(?<a>.)(?<b>.)/.match("01")
    m.named_captures #=> {"a" => "0", "b" => "1"}

    m = /(?<a>.)(?<b>.)?/.match("0")
    m.named_captures #=> {"a" => "0", "b" => nil}

    m = /(?<a>.)(?<a>.)/.match("01")
    m.named_captures #=> {"a" => "1"}

    m = /(?<a>x)|(?<a>y)/.match("x")
    m.named_captures #=> {"a" => "x"}
- :id: 10
  :callseqs:
  - names   → [name1, name2, ...]
  :description:
  - |-
    Returns a list of names of captures as an array of strings. It is same as
    mtch.regexp.names.
  :examples: |
    /(?<foo>.)(?<bar>.)(?<baz>.)/.match("hoge").names
    #=> ["foo", "bar", "baz"]

    m = /(?<x>.)(?<y>.)?/.match("a") #=> #<MatchData "a" x:"a" y:nil>
    m.names                          #=> ["x", "y"]
- :id: 11
  :callseqs:
  - offset(n)   → array
  :description:
  - |-
    Returns a two-element array containing the beginning and ending offsets of
    the nth match. n can be a string or symbol to reference a
    named capture.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.offset(0)      #=> [1, 7]
    m.offset(4)      #=> [6, 7]

    m = /(?<foo>.)(.)(?<bar>.)/.match("hoge")
    p m.offset(:foo) #=> [0, 1]
    p m.offset(:bar) #=> [2, 3]
- :id: 12
  :callseqs:
  - post_match   → str
  :description:
  - |-
    Returns the portion of the original string after the current match.
    Equivalent to the special variable $'.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138: The Movie")
    m.post_match   #=> ": The Movie"
- :id: 13
  :callseqs:
  - pre_match   → str
  :description:
  - |-
    Returns the portion of the original string before the current match.
    Equivalent to the special variable $`.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.pre_match   #=> "T"
- :id: 14
  :callseqs:
  - regexp   → regexp
  :description:
  - Returns the regexp.
  :examples: |
    m = /a.*b/.match("abc")
    m.regexp #=> /a.*b/
- :id: 15
  :callseqs:
  - size     → integer
  :description:
  - Returns the number of elements in the match array.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.length   #=> 5
    m.size     #=> 5
- :id: 16
  :callseqs:
  - string   → str
  :description:
  - Returns a frozen copy of the string passed in to match.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.string   #=> "THX1138."
- :id: 17
  :callseqs:
  - to_a   → anArray
  :description:
  - Returns the array of matches.
  - |-
    Because to_a is called when expanding
    *variable, there’s a useful assignment shortcut for
    extracting matched fields. This is slightly slower than accessing the
    fields directly (as an intermediate array is generated).
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.to_a   #=> ["HX1138", "H", "X", "113", "8"]
    all,f1,f2,f3 = * /(.)(.)(\d+)(\d)/.match("THX1138.")
    all   #=> "HX1138"
    f1    #=> "H"
    f2    #=> "X"
    f3    #=> "113"
- :id: 18
  :callseqs:
  - to_s   → str
  :description:
  - Returns the entire matched string.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138.")
    m.to_s   #=> "HX1138"
- :id: 19
  :callseqs:
  - values_at([index]*)   → array
  :description:
  - |-
    Uses each index to access the matching values, returning an array
    of the corresponding matches.
  :examples: |
    m = /(.)(.)(\d+)(\d)/.match("THX1138: The Movie")
    m.to_a               #=> ["HX1138", "H", "X", "113", "8"]
    m.values_at(0, 2, -2)   #=> ["HX1138", "X", "113"]

    m = /(?<a>\d+) *(?<op>[+\-*\/]) *(?<b>\d+)/.match("1 + 2")
    m.to_a               #=> ["1 + 2", "1", "+", "2"]
    m.values_at(:a, :b, :op) #=> ["1", "2", "+"]
