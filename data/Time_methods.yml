---
:id: 113
:name: Time
:link: http://ruby-doc.org/core-2.4.1/Time.html
:methods:
- :id: 0
  :callseqs:
  - at(time) → time
  - at(seconds_with_frac) → time
  - at(seconds, microseconds_with_frac) → time
  :description:
  - |-
    Creates a new Time object with the value given by
    time, the given number of seconds_with_frac, or
    seconds and microseconds_with_frac since the
    Epoch. seconds_with_frac and
    microseconds_with_frac can be an Integer, Float, Rational, or other Numeric. non-portable feature allows the offset to
    be negative on some systems.
  - If a numeric argument is given, the result is in local time.
  :examples: |
    Time.at(0)                           #=> 1969-12-31 18:00:00 -0600
    Time.at(Time.at(0))                  #=> 1969-12-31 18:00:00 -0600
    Time.at(946702800)                   #=> 1999-12-31 23:00:00 -0600
    Time.at(-284061600)                  #=> 1960-12-31 00:00:00 -0600
    Time.at(946684800.2).usec            #=> 200000
    Time.at(946684800, 123456.789).nsec  #=> 123456789
- :id: 1
  :callseqs:
  - gm(year) → time
  - gm(year, month) → time
  - gm(year, month, day) → time
  - gm(year, month, day, hour) → time
  - gm(year, month, day, hour, min) → time
  - gm(year, month, day, hour, min, sec_with_frac) → time
  - gm(year, month, day, hour, min, sec, usec_with_frac) → time
  - gm(sec, min, hour, day, month, year, dummy, dummy, dummy, dummy) → time
  :description:
  - |-
    Creates a Time object based on given values,
    interpreted as UTC (GMT). The year must be specified. Other values default
    to the minimum value for that field (and may be nil or
    omitted). Months may be specified by numbers from 1 to 12, or by the
    three-letter English month names. Hours are specified on a 24-hour clock
    (0..23). Raises an ArgumentError if any
    values are out of range. Will also accept ten arguments in the order output
    by #to_a.
  - |-
    sec_with_frac and usec_with_frac can have a
    fractional part.
  :examples: |
    Time.utc(2000,"jan",1,20,15,1)  #=> 2000-01-01 20:15:01 UTC
    Time.gm(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC
- :id: 2
  :callseqs:
  - local(year) → time
  - local(year, month) → time
  - local(year, month, day) → time
  - local(year, month, day, hour) → time
  - local(year, month, day, hour, min) → time
  - local(year, month, day, hour, min, sec_with_frac) → time
  - local(year, month, day, hour, min, sec, usec_with_frac) → time
  - local(sec, min, hour, day, month, year, dummy, dummy, isdst, dummy) → time
  :description:
  - |-
    Same as ::gm, but interprets the values
    in the local time zone.
  :examples: 'Time.local(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 -0600

'
- :id: 3
  :callseqs:
  - mktime(year) → time
  - mktime(year, month) → time
  - mktime(year, month, day) → time
  - mktime(year, month, day, hour) → time
  - mktime(year, month, day, hour, min) → time
  - mktime(year, month, day, hour, min, sec_with_frac) → time
  - mktime(year, month, day, hour, min, sec, usec_with_frac) → time
  - mktime(sec, min, hour, day, month, year, dummy, dummy, isdst, dummy) → time
  :description:
  - |-
    Same as ::gm, but interprets the values
    in the local time zone.
  :examples: 'Time.local(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 -0600

'
- :id: 4
  :callseqs:
  - new → time
  - new(year, month=nil, day=nil, hour=nil, min=nil, sec=nil, utc_offset=nil) → time
  :description:
  - Returns a Time object.
  - It is initialized to the current system time if no argument is given.
  - |-
    Note: The new object will use the resolution available on
    your system clock, and may include fractional seconds.
  - |-
    If one or more arguments specified, the time is initialized to the
    specified time.
  - sec may have fraction if it is a rational.
  - |-
    utc_offset is the offset from UTC. It can be a string such as
    "+09:00" or a number of seconds such as 32400.
  :examples: |
    a = Time.new      #=> 2007-11-19 07:50:02 -0600
    b = Time.new      #=> 2007-11-19 07:50:02 -0600
    a == b            #=> false
    "%.6f" % a.to_f   #=> "1195480202.282373"
    "%.6f" % b.to_f   #=> "1195480202.283415"

    Time.new(2008,6,21, 13,30,0, "+09:00") #=> 2008-06-21 13:30:00 +0900

    # A trip for RubyConf 2007
    t1 = Time.new(2007,11,1,15,25,0, "+09:00") # JST (Narita)
    t2 = Time.new(2007,11,1,12, 5,0, "-05:00") # CDT (Minneapolis)
    t3 = Time.new(2007,11,1,13,25,0, "-05:00") # CDT (Minneapolis)
    t4 = Time.new(2007,11,1,16,53,0, "-04:00") # EDT (Charlotte)
    t5 = Time.new(2007,11,5, 9,24,0, "-05:00") # EST (Charlotte)
    t6 = Time.new(2007,11,5,11,21,0, "-05:00") # EST (Detroit)
    t7 = Time.new(2007,11,5,13,45,0, "-05:00") # EST (Detroit)
    t8 = Time.new(2007,11,6,17,10,0, "+09:00") # JST (Narita)
    p((t2-t1)/3600.0)                          #=> 10.666666666666666
    p((t4-t3)/3600.0)                          #=> 2.466666666666667
    p((t6-t5)/3600.0)                          #=> 1.95
    p((t8-t7)/3600.0)                          #=> 13.416666666666666
- :id: 5
  :callseqs:
  - now → time
  :description:
  - |-
    Creates a new Time object for the current time.
    This is same as ::new without
    arguments.
  :examples: 'Time.now            #=> 2009-06-24 12:39:54 +0900

'
- :id: 6
  :callseqs:
  - utc(year) → time
  - utc(year, month) → time
  - utc(year, month, day) → time
  - utc(year, month, day, hour) → time
  - utc(year, month, day, hour, min) → time
  - utc(year, month, day, hour, min, sec_with_frac) → time
  - utc(year, month, day, hour, min, sec, usec_with_frac) → time
  - utc(sec, min, hour, day, month, year, dummy, dummy, dummy, dummy) → time
  :description:
  - |-
    Creates a Time object based on given values,
    interpreted as UTC (GMT). The year must be specified. Other values default
    to the minimum value for that field (and may be nil or
    omitted). Months may be specified by numbers from 1 to 12, or by the
    three-letter English month names. Hours are specified on a 24-hour clock
    (0..23). Raises an ArgumentError if any
    values are out of range. Will also accept ten arguments in the order output
    by #to_a.
  - |-
    sec_with_frac and usec_with_frac can have a
    fractional part.
  :examples: |
    Time.utc(2000,"jan",1,20,15,1)  #=> 2000-01-01 20:15:01 UTC
    Time.gm(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC
- :id: 7
  :callseqs:
  - time + numeric → time
  :description:
  - |-
    Addition — Adds some number of seconds (possibly fractional) to
    time and returns that value as a new Time
    object.
  :examples: |
    t = Time.now         #=> 2007-11-19 08:22:21 -0600
    t + (60 * 60 * 24)   #=> 2007-11-20 08:22:21 -0600
- :id: 8
  :callseqs:
  - time - other_time → float
  - time - numeric    → time
  :description:
  - |-
    Difference — Returns a new Time object that
    represents the difference between time and
    other_time, or subtracts the given number of seconds in
    numeric from time.
  :examples: |
    t = Time.now       #=> 2007-11-19 08:23:10 -0600
    t2 = t + 2592000   #=> 2007-12-19 08:23:10 -0600
    t2 - t             #=> 2592000.0
    t2 - 2592000       #=> 2007-11-19 08:23:10 -0600
- :id: 9
  :callseqs:
  - time <=> other_time → -1, 0, +1 or nil
  :description:
  - Comparison—Compares time with other_time.
  - |-
    -1, 0, +1 or nil depending on whether time is less  than,
    equal to, or greater than other_time.
  - nil is returned if the two values are incomparable.
  :examples: |
    t = Time.now       #=> 2007-11-19 08:12:12 -0600
    t2 = t + 2592000   #=> 2007-12-19 08:12:12 -0600
    t <=> t2           #=> -1
    t2 <=> t           #=> 1

    t = Time.now       #=> 2007-11-19 08:13:38 -0600
    t2 = t + 0.1       #=> 2007-11-19 08:13:38 -0600
    t.nsec             #=> 98222999
    t2.nsec            #=> 198222999
    t <=> t2           #=> -1
    t2 <=> t           #=> 1
    t <=> t            #=> 0
- :id: 10
  :callseqs:
  - asctime → string
  :description:
  - Returns a canonical string representation of time.
  :examples: |
    Time.now.asctime   #=> "Wed Apr  9 08:56:03 2003"
    Time.now.ctime     #=> "Wed Apr  9 08:56:03 2003"
- :id: 11
  :callseqs:
  - ctime   → string
  :description:
  - Returns a canonical string representation of time.
  :examples: |
    Time.now.asctime   #=> "Wed Apr  9 08:56:03 2003"
    Time.now.ctime     #=> "Wed Apr  9 08:56:03 2003"
- :id: 12
  :callseqs:
  - day  → integer
  :description:
  - Returns the day of the month (1..n) for time.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:27:03 -0600
    t.day          #=> 19
    t.mday         #=> 19
- :id: 13
  :callseqs:
  - dst?  → true or false
  :description:
  - Returns true if time occurs during Daylight Saving Time in its time zone.
  :examples: |
    # CST6CDT:
      Time.local(2000, 1, 1).zone    #=> "CST"
      Time.local(2000, 1, 1).isdst   #=> false
      Time.local(2000, 1, 1).dst?    #=> false
      Time.local(2000, 7, 1).zone    #=> "CDT"
      Time.local(2000, 7, 1).isdst   #=> true
      Time.local(2000, 7, 1).dst?    #=> true

    # Asia/Tokyo:
      Time.local(2000, 1, 1).zone    #=> "JST"
      Time.local(2000, 1, 1).isdst   #=> false
      Time.local(2000, 1, 1).dst?    #=> false
      Time.local(2000, 7, 1).zone    #=> "JST"
      Time.local(2000, 7, 1).isdst   #=> false
      Time.local(2000, 7, 1).dst?    #=> false
- :id: 14
  :callseqs:
  - eql?(other_time)
  :description:
  - |-
    Returns true if time and other_time are
    both Time objects with the same seconds and
    fractional seconds.
  :examples: ''
- :id: 15
  :callseqs:
  - friday? → true or false
  :description:
  - Returns true if time represents Friday.
  :examples: |
    t = Time.local(1987, 12, 18)     #=> 1987-12-18 00:00:00 -0600
    t.friday?                        #=> true
- :id: 16
  :callseqs:
  - getgm  → new_time
  :description:
  - |-
    Returns a new Time object representing
    time in UTC.
  :examples: |
    t = Time.local(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 -0600
    t.gmt?                             #=> false
    y = t.getgm                        #=> 2000-01-02 02:15:01 UTC
    y.gmt?                             #=> true
    t == y                             #=> true
- :id: 17
  :callseqs:
  - getlocal → new_time
  - getlocal(utc_offset) → new_time
  :description:
  - |-
    Returns a new Time object representing
    time in local time (using the local time zone in effect for this
    process).
  - |-
    If utc_offset is given, it is used instead of the local time.
    utc_offset can be given as a human-readable string (eg.
    "+09:00") or as a number of seconds (eg.
    32400).
  :examples: |
    t = Time.utc(2000,1,1,20,15,1)  #=> 2000-01-01 20:15:01 UTC
    t.utc?                          #=> true

    l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600
    l.utc?                          #=> false
    t == l                          #=> true

    j = t.getlocal("+09:00")        #=> 2000-01-02 05:15:01 +0900
    j.utc?                          #=> false
    t == j                          #=> true

    k = t.getlocal(9*60*60)         #=> 2000-01-02 05:15:01 +0900
    k.utc?                          #=> false
    t == k                          #=> true
- :id: 18
  :callseqs:
  - getutc → new_time
  :description:
  - |-
    Returns a new Time object representing
    time in UTC.
  :examples: |
    t = Time.local(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 -0600
    t.gmt?                             #=> false
    y = t.getgm                        #=> 2000-01-02 02:15:01 UTC
    y.gmt?                             #=> true
    t == y                             #=> true
- :id: 19
  :callseqs:
  - gmt? → true or false
  :description:
  - Returns true if time represents a time in UTC (GMT).
  :examples: |
    t = Time.now                        #=> 2007-11-19 08:15:23 -0600
    t.utc?                              #=> false
    t = Time.gm(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC
    t.utc?                              #=> true

    t = Time.now                        #=> 2007-11-19 08:16:03 -0600
    t.gmt?                              #=> false
    t = Time.gm(2000,1,1,20,15,1)       #=> 2000-01-01 20:15:01 UTC
    t.gmt?                              #=> true
- :id: 20
  :callseqs:
  - gmt_offset → integer
  :description:
  - |-
    Returns the offset in seconds between the timezone of time and
    UTC.
  :examples: |
    t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC
    t.gmt_offset                    #=> 0
    l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600
    l.gmt_offset                    #=> -21600
- :id: 21
  :callseqs:
  - gmtime    → time
  :description:
  - Converts time to UTC (GMT), modifying the receiver.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:18:31 -0600
    t.gmt?         #=> false
    t.gmtime       #=> 2007-11-19 14:18:31 UTC
    t.gmt?         #=> true

    t = Time.now   #=> 2007-11-19 08:18:51 -0600
    t.utc?         #=> false
    t.utc          #=> 2007-11-19 14:18:51 UTC
    t.utc?         #=> true
- :id: 22
  :callseqs:
  - gmtoff     → integer
  :description:
  - |-
    Returns the offset in seconds between the timezone of time and
    UTC.
  :examples: |
    t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC
    t.gmt_offset                    #=> 0
    l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600
    l.gmt_offset                    #=> -21600
- :id: 23
  :callseqs:
  - hash   → integer
  :description:
  - Returns a hash code for this Time object.
  - See also Object#hash.
  :examples: ''
- :id: 24
  :callseqs:
  - hour → integer
  :description:
  - Returns the hour of the day (0..23) for time.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:26:20 -0600
    t.hour         #=> 8
- :id: 25
  :callseqs:
  - inspect → string
  :description:
  - |-
    Returns a string representing time. Equivalent to calling strftime with the appropriate format
    string.
  :examples: ''
- :id: 26
  :callseqs:
  - isdst → true or false
  :description:
  - Returns true if time occurs during Daylight Saving Time in its time zone.
  :examples: |
    # CST6CDT:
      Time.local(2000, 1, 1).zone    #=> "CST"
      Time.local(2000, 1, 1).isdst   #=> false
      Time.local(2000, 1, 1).dst?    #=> false
      Time.local(2000, 7, 1).zone    #=> "CDT"
      Time.local(2000, 7, 1).isdst   #=> true
      Time.local(2000, 7, 1).dst?    #=> true

    # Asia/Tokyo:
      Time.local(2000, 1, 1).zone    #=> "JST"
      Time.local(2000, 1, 1).isdst   #=> false
      Time.local(2000, 1, 1).dst?    #=> false
      Time.local(2000, 7, 1).zone    #=> "JST"
      Time.local(2000, 7, 1).isdst   #=> false
      Time.local(2000, 7, 1).dst?    #=> false
- :id: 27
  :callseqs:
  - localtime → time
  - localtime(utc_offset) → time
  :description:
  - |-
    Converts time to local time (using the local time zone in effect
    for this process) modifying the receiver.
  - If utc_offset is given, it is used instead of the local time.
  :examples: |
    t = Time.utc(2000, "jan", 1, 20, 15, 1) #=> 2000-01-01 20:15:01 UTC
    t.utc?                                  #=> true

    t.localtime                             #=> 2000-01-01 14:15:01 -0600
    t.utc?                                  #=> false

    t.localtime("+09:00")                   #=> 2000-01-02 05:15:01 +0900
    t.utc?                                  #=> false
- :id: 28
  :callseqs:
  - mday → integer
  :description:
  - Returns the day of the month (1..n) for time.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:27:03 -0600
    t.day          #=> 19
    t.mday         #=> 19
- :id: 29
  :callseqs:
  - min → integer
  :description:
  - Returns the minute of the hour (0..59) for time.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:25:51 -0600
    t.min          #=> 25
- :id: 30
  :callseqs:
  - mon   → integer
  - month → integer
  :description:
  - Returns the month of the year (1..12) for time.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:27:30 -0600
    t.mon          #=> 11
    t.month        #=> 11
- :id: 31
  :callseqs:
  - monday? → true or false
  :description:
  - Returns true if time represents Monday.
  :examples: |
    t = Time.local(2003, 8, 4)       #=> 2003-08-04 00:00:00 -0500
    p t.monday?                      #=> true
- :id: 32
  :callseqs:
  - month → integer
  :description:
  - Returns the month of the year (1..12) for time.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:27:30 -0600
    t.mon          #=> 11
    t.month        #=> 11
- :id: 33
  :callseqs:
  - nsec    → int
  :description:
  - Returns the number of nanoseconds for time.
  - |-
    The lowest digits of to_f and nsec are different because IEEE 754
    double is not accurate enough to represent the exact number of nanoseconds
    since the Epoch.
  - The more accurate value is returned by nsec.
  :examples: |
    t = Time.now        #=> 2007-11-17 15:18:03 +0900
    "%10.9f" % t.to_f   #=> "1195280283.536151409"
    t.nsec              #=> 536151406
- :id: 34
  :callseqs:
  - round([ndigits])   → new_time
  :description:
  - |-
    Rounds sub seconds to a given precision in decimal digits (0 digits by
    default). It returns a new Time object.
    ndigits should be zero or positive integer.
  :examples: |
    require 'time'

    t = Time.utc(2010,3,30, 5,43,"25.123456789".to_r)
    p t.iso8601(10)           #=> "2010-03-30T05:43:25.1234567890Z"
    p t.round.iso8601(10)     #=> "2010-03-30T05:43:25.0000000000Z"
    p t.round(0).iso8601(10)  #=> "2010-03-30T05:43:25.0000000000Z"
    p t.round(1).iso8601(10)  #=> "2010-03-30T05:43:25.1000000000Z"
    p t.round(2).iso8601(10)  #=> "2010-03-30T05:43:25.1200000000Z"
    p t.round(3).iso8601(10)  #=> "2010-03-30T05:43:25.1230000000Z"
    p t.round(4).iso8601(10)  #=> "2010-03-30T05:43:25.1235000000Z"
    p t.round(5).iso8601(10)  #=> "2010-03-30T05:43:25.1234600000Z"
    p t.round(6).iso8601(10)  #=> "2010-03-30T05:43:25.1234570000Z"
    p t.round(7).iso8601(10)  #=> "2010-03-30T05:43:25.1234568000Z"
    p t.round(8).iso8601(10)  #=> "2010-03-30T05:43:25.1234567900Z"
    p t.round(9).iso8601(10)  #=> "2010-03-30T05:43:25.1234567890Z"
    p t.round(10).iso8601(10) #=> "2010-03-30T05:43:25.1234567890Z"

    t = Time.utc(1999,12,31, 23,59,59)
    p((t + 0.4).round.iso8601(3))    #=> "1999-12-31T23:59:59.000Z"
    p((t + 0.49).round.iso8601(3))   #=> "1999-12-31T23:59:59.000Z"
    p((t + 0.5).round.iso8601(3))    #=> "2000-01-01T00:00:00.000Z"
    p((t + 1.4).round.iso8601(3))    #=> "2000-01-01T00:00:00.000Z"
    p((t + 1.49).round.iso8601(3))   #=> "2000-01-01T00:00:00.000Z"
    p((t + 1.5).round.iso8601(3))    #=> "2000-01-01T00:00:01.000Z"

    t = Time.utc(1999,12,31, 23,59,59)
    p (t + 0.123456789).round(4).iso8601(6)  #=> "1999-12-31T23:59:59.123500Z"
- :id: 35
  :callseqs:
  - saturday? → true or false
  :description:
  - Returns true if time represents Saturday.
  :examples: |
    t = Time.local(2006, 6, 10)      #=> 2006-06-10 00:00:00 -0500
    t.saturday?                      #=> true
- :id: 36
  :callseqs:
  - sec → integer
  :description:
  - Returns the second of the minute (0..60) for time.
  - |-
    Note: Seconds range from zero to 60 to allow the system to
    inject leap seconds. See en.wikipedia.org/wiki/Leap_second
    for further details.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:25:02 -0600
    t.sec          #=> 2
- :id: 37
  :callseqs:
  - strftime( string ) → string
  :description:
  - |-
    Formats time according to the directives in the given format
    string.
  - |-
    The directives begin with a percent (%) character. Any text not listed as a
    directive will be passed through to the output string.
  - |-
    The directive consists of a percent (%) character, zero or more flags,
    optional minimum field width, optional modifier and a conversion specifier
    as follows:
  - 'Flags:'
  - The minimum field width specifies the minimum width.
  - The modifiers are “E” and “O”. They are ignored.
  - 'Format directives:'
  - This method is similar to strftime() function defined in ISO C and POSIX.
  - |-
    While all directives are locale independent since Ruby 1.9, %Z is platform
    dependent. So, the result may differ even if the same format string is used
    in other systems such as C.
  - |-
    %z is recommended over %Z. %Z doesn’t identify the timezone. For example,
    “CST” is used at America/Chicago (-06:00), America/Havana (-05:00),
    Asia/Harbin (+08:00), Australia/Darwin (+09:30) and Australia/Adelaide
    (+10:30). Also, %Z is highly dependent on the operating system. For
    example, it may generate a non ASCII string on Japanese Windows. i.e. the
    result can be different to “JST”. So the numeric time zone offset, %z, is
    recommended.
  - 'Examples:'
  - 'Various ISO 8601 formats:'
  :examples: |
    t = Time.new(2007,11,19,8,37,48,"-06:00") #=> 2007-11-19 08:37:48 -0600
    t.strftime("Printed on %m/%d/%Y")   #=> "Printed on 11/19/2007"
    t.strftime("at %I:%M%p")            #=> "at 08:37AM"
- :id: 38
  :callseqs:
  - subsec    → number
  :description:
  - Returns the fraction for time.
  - The return value can be a rational number.
  - |-
    The lowest digits of to_f and subsec are different because IEEE 754
    double is not accurate enough to represent the rational number.
  - The more accurate value is returned by subsec.
  :examples: |
    t = Time.now        #=> 2009-03-26 22:33:12 +0900
    "%10.9f" % t.to_f   #=> "1238074392.940563917"
    t.subsec            #=> (94056401/100000000)
- :id: 39
  :callseqs:
  - succ   → new_time
  :description:
  - |-
    Returns a new Time object, one second later than
    time. #succ is obsolete
    since 1.9.2 for time is not a discrete value.
  - Use instead time + 1
  :examples: |
    t = Time.now       #=> 2007-11-19 08:23:57 -0600
    t.succ             #=> 2007-11-19 08:23:58 -0600
    t + 1              #=> 2007-11-19 08:23:58 -0600
- :id: 40
  :callseqs:
  - sunday? → true or false
  :description:
  - Returns true if time represents Sunday.
  :examples: |
    t = Time.local(1990, 4, 1)       #=> 1990-04-01 00:00:00 -0600
    t.sunday?                        #=> true
- :id: 41
  :callseqs:
  - thursday? → true or false
  :description:
  - Returns true if time represents Thursday.
  :examples: |
    t = Time.local(1995, 12, 21)     #=> 1995-12-21 00:00:00 -0600
    p t.thursday?                    #=> true
- :id: 42
  :callseqs:
  - to_a → array
  :description:
  - 'Returns a ten-element array of values for time:'
  - |-
    See the individual methods for an explanation of the valid ranges of each
    value. The ten elements can be passed directly to ::utc or ::local to create a new Time object.
  :examples: |
    [sec, min, hour, day, month, year, wday, yday, isdst, zone]
    t = Time.now     #=> 2007-11-19 08:36:01 -0600
    now = t.to_a     #=> [1, 36, 8, 19, 11, 2007, 1, 323, false, "CST"]
- :id: 43
  :callseqs:
  - to_f → float
  :description:
  - |-
    Returns the value of time as a floating point number of seconds
    since the Epoch.
  - |-
    Note that IEEE 754 double is not accurate enough to represent the number of
    nanoseconds since the Epoch.
  :examples: |
    t = Time.now
    "%10.5f" % t.to_f   #=> "1270968744.77658"
    t.to_i              #=> 1270968744
- :id: 44
  :callseqs:
  - to_i   → int
  :description:
  - |-
    Returns the value of time as an integer number of seconds since
    the Epoch.
  :examples: |
    t = Time.now
    "%10.5f" % t.to_f   #=> "1270968656.89607"
    t.to_i              #=> 1270968656
- :id: 45
  :callseqs:
  - to_r → a_rational
  :description:
  - |-
    Returns the value of time as a rational number of seconds since
    the Epoch.
  - |-
    This methods is intended to be used to get an accurate value representing
    the nanoseconds since the Epoch. You can use this method to convert
    time to another Epoch.
  :examples: |
    t = Time.now
    p t.to_r            #=> (1270968792716287611/1000000000)
- :id: 46
  :callseqs:
  - to_s    → string
  :description:
  - |-
    Returns a string representing time. Equivalent to calling strftime with the appropriate format
    string.
  :examples: ''
- :id: 47
  :callseqs:
  - tuesday? → true or false
  :description:
  - Returns true if time represents Tuesday.
  :examples: |
    t = Time.local(1991, 2, 19)      #=> 1991-02-19 00:00:00 -0600
    p t.tuesday?                     #=> true
- :id: 48
  :callseqs:
  - tv_nsec → int
  :description:
  - Returns the number of nanoseconds for time.
  - |-
    The lowest digits of to_f and nsec are different because IEEE 754
    double is not accurate enough to represent the exact number of nanoseconds
    since the Epoch.
  - The more accurate value is returned by nsec.
  :examples: |
    t = Time.now        #=> 2007-11-17 15:18:03 +0900
    "%10.9f" % t.to_f   #=> "1195280283.536151409"
    t.nsec              #=> 536151406
- :id: 49
  :callseqs:
  - tv_sec → int
  :description:
  - |-
    Returns the value of time as an integer number of seconds since
    the Epoch.
  :examples: |
    t = Time.now
    "%10.5f" % t.to_f   #=> "1270968656.89607"
    t.to_i              #=> 1270968656
- :id: 50
  :callseqs:
  - tv_usec → int
  :description:
  - Returns the number of microseconds for time.
  :examples: |
    t = Time.now        #=> 2007-11-19 08:03:26 -0600
    "%10.6f" % t.to_f   #=> "1195481006.775195"
    t.usec              #=> 775195
- :id: 51
  :callseqs:
  - usec    → int
  :description:
  - Returns the number of microseconds for time.
  :examples: |
    t = Time.now        #=> 2007-11-19 08:03:26 -0600
    "%10.6f" % t.to_f   #=> "1195481006.775195"
    t.usec              #=> 775195
- :id: 52
  :callseqs:
  - gmtime    → time
  - utc       → time
  :description:
  - Converts time to UTC (GMT), modifying the receiver.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:18:31 -0600
    t.gmt?         #=> false
    t.gmtime       #=> 2007-11-19 14:18:31 UTC
    t.gmt?         #=> true

    t = Time.now   #=> 2007-11-19 08:18:51 -0600
    t.utc?         #=> false
    t.utc          #=> 2007-11-19 14:18:51 UTC
    t.utc?         #=> true
- :id: 53
  :callseqs:
  - utc? → true or false
  :description:
  - Returns true if time represents a time in UTC (GMT).
  :examples: |
    t = Time.now                        #=> 2007-11-19 08:15:23 -0600
    t.utc?                              #=> false
    t = Time.gm(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC
    t.utc?                              #=> true

    t = Time.now                        #=> 2007-11-19 08:16:03 -0600
    t.gmt?                              #=> false
    t = Time.gm(2000,1,1,20,15,1)       #=> 2000-01-01 20:15:01 UTC
    t.gmt?                              #=> true
- :id: 54
  :callseqs:
  - utc_offset → integer
  :description:
  - |-
    Returns the offset in seconds between the timezone of time and
    UTC.
  :examples: |
    t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC
    t.gmt_offset                    #=> 0
    l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600
    l.gmt_offset                    #=> -21600
- :id: 55
  :callseqs:
  - wday → integer
  :description:
  - |-
    Returns an integer representing the day of the week, 0..6, with Sunday ==
    0.
  :examples: |
    t = Time.now   #=> 2007-11-20 02:35:35 -0600
    t.wday         #=> 2
    t.sunday?      #=> false
    t.monday?      #=> false
    t.tuesday?     #=> true
    t.wednesday?   #=> false
    t.thursday?    #=> false
    t.friday?      #=> false
    t.saturday?    #=> false
- :id: 56
  :callseqs:
  - wednesday? → true or false
  :description:
  - Returns true if time represents Wednesday.
  :examples: |
    t = Time.local(1993, 2, 24)      #=> 1993-02-24 00:00:00 -0600
    p t.wednesday?                   #=> true
- :id: 57
  :callseqs:
  - yday → integer
  :description:
  - Returns an integer representing the day of the year, 1..366.
  :examples: |
    t = Time.now   #=> 2007-11-19 08:32:31 -0600
    t.yday         #=> 323
- :id: 58
  :callseqs:
  - year → integer
  :description:
  - Returns the year for time (including the century).
  :examples: |
    t = Time.now   #=> 2007-11-19 08:27:51 -0600
    t.year         #=> 2007
- :id: 59
  :callseqs:
  - zone → string
  :description:
  - |-
    Returns the name of the time zone used for time. As of Ruby 1.8,
    returns “UTC” rather than “GMT” for UTC times.
  :examples: |
    t = Time.gm(2000, "jan", 1, 20, 15, 1)
    t.zone   #=> "UTC"
    t = Time.local(2000, "jan", 1, 20, 15, 1)
    t.zone   #=> "CST"
