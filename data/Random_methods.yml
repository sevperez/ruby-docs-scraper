---
:id: 82
:name: Random
:link: http://ruby-doc.org/core-2.4.1/Random.html
:methods:
- :id: 0
  :callseqs:
  - new(seed = Random.new_seed) → prng
  :description:
  - |-
    Creates a new PRNG using seed to set the initial state. If
    seed is omitted, the generator is initialized with ::new_seed.
  - |-
    See ::srand for more information
    on the use of seed values.
  :examples: ''
- :id: 1
  :callseqs:
  - new_seed → integer
  :description:
  - |-
    Returns an arbitrary seed value. This is used by ::new when no seed value is specified
    as an argument.
  :examples: 'Random.new_seed  #=> 115032730400174366788466674494640623225

'
- :id: 2
  :callseqs:
  - rand → float
  - rand(max) → number
  :description:
  - Alias of Random::DEFAULT.rand.
  :examples: ''
- :id: 3
  :callseqs:
  - srand(number = Random.new_seed) → old_seed
  :description:
  - |-
    Seeds the system pseudo-random number generator, Random::DEFAULT, with
    number.  The previous seed value is returned.
  - |-
    If number is omitted, seeds the generator using a source of
    entropy provided by the operating system, if available (/dev/urandom on
    Unix systems or the RSA cryptographic provider on Windows), which is then
    combined with the time, the process id, and a sequence number.
  - |-
    srand may be used to ensure repeatable sequences of pseudo-random numbers
    between different runs of the program. By setting the seed to a known
    value, programs can be made deterministic during testing.
  :examples: |
    srand 1234               # => 268519324636777531569100071560086917274
    [ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]
    [ rand(10), rand(1000) ] # => [4, 664]
    srand 1234               # => 1234
    [ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]
- :id: 4
  :callseqs:
  - urandom(size) → string
  :description:
  - |-
    Returns a string, using platform providing features. Returned value
    expected to be a cryptographically secure pseudo-random number in binary
    form.
  - |-
    In 2017, Linux manpage random(7) writes that “no cryptographic primitive
    available today can hope to promise more than 256 bits of security”.  So it
    might be questionable to pass size > 32 to this method.
  :examples: 'Random.urandom(8)  #=> "\x78\x41\xBA\xAF\x7D\xEA\xD8\xEA"

'
- :id: 5
  :callseqs:
  - prng1 == prng2 → true or false
  :description:
  - |-
    Returns true if the two generators have the same internal state, otherwise
    false.  Equivalent generators will return the same sequence of
    pseudo-random numbers.  Two generators will generally have the same state
    only if they were initialized with the same seed
  - and have the same invocation history.
  :examples: |
    Random.new == Random.new             # => false
    Random.new(1234) == Random.new(1234) # => true
    prng1 = Random.new(1234)
    prng2 = Random.new(1234)
    prng1 == prng2 # => true

    prng1.rand     # => 0.1915194503788923
    prng1 == prng2 # => false

    prng2.rand     # => 0.1915194503788923
    prng1 == prng2 # => true
- :id: 6
  :callseqs:
  - bytes(size) → a_string
  :description:
  - Returns a random binary string containing size bytes.
  :examples: |
    random_string = Random.new.bytes(10) # => "\xD7:R\xAB?\x83\xCE\xFAkO"
    random_string.size                   # => 10
- :id: 7
  :callseqs:
  - rand → float
  - rand(max) → number
  :description:
  - |-
    When max is an Integer,
    rand returns a random integer greater than or equal to zero
    and less than max. Unlike Kernel#rand, when max is
    a negative integer or zero, rand raises an ArgumentError.
  - |-
    When max is a Float,
    rand returns a random floating point number between 0.0 and
    max, including 0.0 and excluding max.
  - |-
    When max is a Range,
    rand returns a random number where range.member?(number) ==
    true.
  - |-
    Both the beginning and ending values of the range must respond to subtract
    (-) and add (+)methods, or rand will raise an ArgumentError.
  :examples: |
    prng = Random.new
    prng.rand(100)       # => 42
    prng.rand(1.5)       # => 1.4600282860034115
    prng.rand(5..9)      # => one of [5, 6, 7, 8, 9]
    prng.rand(5...9)     # => one of [5, 6, 7, 8]
    prng.rand(5.0..9.0)  # => between 5.0 and 9.0, including 9.0
    prng.rand(5.0...9.0) # => between 5.0 and 9.0, excluding 9.0
- :id: 8
  :callseqs:
  - seed → integer
  :description:
  - |-
    Returns the seed value used to initialize the generator. This may be used
    to initialize another generator with the same state at a later time,
    causing it to produce the same sequence of numbers.
  :examples: |
    prng1 = Random.new(1234)
    prng1.seed       #=> 1234
    prng1.rand(100)  #=> 47

    prng2 = Random.new(prng1.seed)
    prng2.rand(100)  #=> 47
