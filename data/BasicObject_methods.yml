---
:id: 3
:name: BasicObject
:link: http://ruby-doc.org/core-2.4.1/BasicObject.html
:methods:
- :id: 0
  :callseqs:
  - new()
  :description:
  - Not documented
  :examples: ''
- :id: 1
  :callseqs:
  - "!obj    → true or false"
  :description:
  - Boolean negate.
  :examples: ''
- :id: 2
  :callseqs:
  - obj != other        → true or false
  :description:
  - Returns true if two objects are not-equal, otherwise false.
  :examples: ''
- :id: 3
  :callseqs:
  - obj == other        → true or false
  :description:
  - |-
    Equality — At the Object level, == returns
    true only if obj and other are the
    same object. Typically, this method is overridden in descendant classes to
    provide class-specific meaning.
  - |-
    Unlike ==, the equal? method should never be
    overridden by subclasses as it is used to determine object identity (that
    is, a.equal?(b) if and only if a is the same
    object as b):
  - |-
    The eql? method returns true if obj
    and other refer to the same hash key.  This is used by Hash to test members for equality.  For objects of
    class Object, eql? is synonymous with
    ==.  Subclasses normally continue this tradition by aliasing
    eql? to their overridden == method, but there are
    exceptions.  Numeric types, for example, perform type
    conversion across ==, but not across eql?, so:
  :examples: |
    obj = "a"
    other = obj.dup

    obj == other      #=> true
    obj.equal? other  #=> false
    obj.equal? obj    #=> true
    1 == 1.0     #=> true
    1.eql? 1.0   #=> false
- :id: 4
  :callseqs:
  - __id__       → integer
  - object_id    → integer
  :description:
  - Returns an integer identifier for obj.
  - |-
    The same number will be returned on all calls to object_id for
    a given object, and no two active objects will share an id.
  - |-
    Note: that some objects of builtin classes are reused for optimization.
    This is the case for immediate values and frozen string literals.
  - |-
    Immediate values are not passed by reference but are passed by value:
    nil, true, false, Fixnums, Symbols,
    and some Floats.
  :examples: |
    Object.new.object_id  == Object.new.object_id  # => false
    (21 * 2).object_id    == (21 * 2).object_id    # => true
    "hello".object_id     == "hello".object_id     # => false
    "hi".freeze.object_id == "hi".freeze.object_id # => true
- :id: 5
  :callseqs:
  - send(symbol [, args...])       → obj
  - __send__(symbol [, args...])   → obj
  - send(string [, args...])       → obj
  - __send__(string [, args...])   → obj
  :description:
  - |-
    Invokes the method identified by symbol, passing it any arguments
    specified. You can use __send__ if the name send
    clashes with an existing method in obj. When the method is
    identified by a string, the string is converted to a symbol.
  :examples: |
    class Klass
      def hello(*args)
        "Hello " + args.join(' ')
      end
    end
    k = Klass.new
    k.send :hello, "gentle", "readers"   #=> "Hello gentle readers"
- :id: 6
  :callseqs:
  - equal?(other)   → true or false
  :description:
  - |-
    Equality — At the Object level, == returns
    true only if obj and other are the
    same object. Typically, this method is overridden in descendant classes to
    provide class-specific meaning.
  - |-
    Unlike ==, the equal? method should never be
    overridden by subclasses as it is used to determine object identity (that
    is, a.equal?(b) if and only if a is the same
    object as b):
  - |-
    The eql? method returns true if obj
    and other refer to the same hash key.  This is used by Hash to test members for equality.  For objects of
    class Object, eql? is synonymous with
    ==.  Subclasses normally continue this tradition by aliasing
    eql? to their overridden == method, but there are
    exceptions.  Numeric types, for example, perform type
    conversion across ==, but not across eql?, so:
  :examples: |
    obj = "a"
    other = obj.dup

    obj == other      #=> true
    obj.equal? other  #=> false
    obj.equal? obj    #=> true
    1 == 1.0     #=> true
    1.eql? 1.0   #=> false
- :id: 7
  :callseqs:
  - instance_eval(string [, filename [, lineno]] )   → obj
  - instance_eval {|obj| block }                     → obj
  :description:
  - |-
    Evaluates a string containing Ruby source code, or the given block, within
    the context of the receiver (obj). In order to set the context,
    the variable self is set to obj while the code is
    executing, giving the code access to obj’s instance variables and
    private methods.
  - |-
    When instance_eval is given a block, obj is also
    passed in as the block’s only argument.
  - |-
    When instance_eval is given a String, the
    optional second and third parameters supply a filename and starting line
    number that are used when reporting compilation errors.
  :examples: |
    class KlassWithSecret
      def initialize
        @secret = 99
      end
      private
      def the_secret
        "Ssssh! The secret is #{@secret}."
      end
    end
    k = KlassWithSecret.new
    k.instance_eval { @secret }          #=> 99
    k.instance_eval { the_secret }       #=> "Ssssh! The secret is 99."
    k.instance_eval {|obj| obj == self } #=> true
- :id: 8
  :callseqs:
  - instance_exec(arg...) {|var...| block }                       → obj
  :description:
  - |-
    Executes the given block within the context of the receiver (obj).
    In order to set the context, the variable self is set to
    obj while the code is executing, giving the code access to
    obj’s instance variables.  Arguments are passed as block
    parameters.
  :examples: |
    class KlassWithSecret
      def initialize
        @secret = 99
      end
    end
    k = KlassWithSecret.new
    k.instance_exec(5) {|x| @secret+x }   #=> 104
- :id: 9
  :callseqs:
  - method_missing(symbol [, *args] )   → result
  :description:
  - |-
    Invoked by Ruby when obj is sent a message it cannot handle.
    symbol is the symbol for the method called, and args are
    any arguments that were passed to it. By default, the interpreter raises an
    error when this method is called. However, it is possible to override the
    method to provide more dynamic behavior. If it is decided that a particular
    method should not be handled, then super should be called, so that
    ancestors can pick up the missing method. The example below creates a class
    Roman, which responds to methods with names consisting of
    roman numerals, returning the corresponding integer values.
  :examples: |
    class Roman
      def roman_to_int(str)
        # ...
      end
      def method_missing(methId)
        str = methId.id2name
        roman_to_int(str)
      end
    end

    r = Roman.new
    r.iv      #=> 4
    r.xxiii   #=> 23
    r.mm      #=> 2000
- :id: 10
  :callseqs:
  - singleton_method_added(symbol)
  :description:
  - Invoked as a callback whenever a singleton method is added to the receiver.
  - 'produces:'
  :examples: |
    module Chatty
      def Chatty.singleton_method_added(id)
        puts "Adding #{id.id2name}"
      end
      def self.one()     end
      def two()          end
      def Chatty.three() end
    end
    Adding singleton_method_added
    Adding one
    Adding three
- :id: 11
  :callseqs:
  - singleton_method_removed(symbol)
  :description:
  - |-
    Invoked as a callback whenever a singleton method is removed from the
    receiver.
  - 'produces:'
  :examples: |
    module Chatty
      def Chatty.singleton_method_removed(id)
        puts "Removing #{id.id2name}"
      end
      def self.one()     end
      def two()          end
      def Chatty.three() end
      class << self
        remove_method :three
        remove_method :one
      end
    end
    Removing three
    Removing one
- :id: 12
  :callseqs:
  - singleton_method_undefined(symbol)
  :description:
  - |-
    Invoked as a callback whenever a singleton method is undefined in the
    receiver.
  - 'produces:'
  :examples: |
    module Chatty
      def Chatty.singleton_method_undefined(id)
        puts "Undefining #{id.id2name}"
      end
      def Chatty.one()   end
      class << self
         undef_method(:one)
      end
    end
    Undefining one
