---
:id: 86
:name: Rational
:link: http://ruby-doc.org/core-2.4.1/Rational.html
:methods:
- :id: 0
  :callseqs:
  - rat * numeric  →  numeric
  :description:
  - Performs multiplication.
  :examples: |
    Rational(2, 3)  * Rational(2, 3)   #=> (4/9)
    Rational(900)   * Rational(1)      #=> (900/1)
    Rational(-2, 9) * Rational(-9, 2)  #=> (1/1)
    Rational(9, 8)  * 4                #=> (9/2)
    Rational(20, 9) * 9.8              #=> 21.77777777777778
- :id: 1
  :callseqs:
  - rat ** numeric  →  numeric
  :description:
  - Performs exponentiation.
  :examples: |
    Rational(2)    ** Rational(3)    #=> (8/1)
    Rational(10)   ** -2             #=> (1/100)
    Rational(10)   ** -2.0           #=> 0.01
    Rational(-4)   ** Rational(1,2)  #=> (1.2246063538223773e-16+2.0i)
    Rational(1, 2) ** 0              #=> (1/1)
    Rational(1, 2) ** 0.0            #=> 1.0
- :id: 2
  :callseqs:
  - rat + numeric  →  numeric
  :description:
  - Performs addition.
  :examples: |
    Rational(2, 3)  + Rational(2, 3)   #=> (4/3)
    Rational(900)   + Rational(1)      #=> (901/1)
    Rational(-2, 9) + Rational(-9, 2)  #=> (-85/18)
    Rational(9, 8)  + 4                #=> (41/8)
    Rational(20, 9) + 9.8              #=> 12.022222222222222
- :id: 3
  :callseqs:
  - rat - numeric  →  numeric
  :description:
  - Performs subtraction.
  :examples: |
    Rational(2, 3)  - Rational(2, 3)   #=> (0/1)
    Rational(900)   - Rational(1)      #=> (899/1)
    Rational(-2, 9) - Rational(-9, 2)  #=> (77/18)
    Rational(9, 8)  - 4                #=> (23/8)
    Rational(20, 9) - 9.8              #=> -7.577777777777778
- :id: 4
  :callseqs:
  - "-rat  →  rational"
  :description:
  - Negates rat.
  :examples: ''
- :id: 5
  :callseqs:
  - rat / numeric     →  numeric
  :description:
  - Performs division.
  :examples: |
    Rational(2, 3)  / Rational(2, 3)   #=> (1/1)
    Rational(900)   / Rational(1)      #=> (900/1)
    Rational(-2, 9) / Rational(-9, 2)  #=> (4/81)
    Rational(9, 8)  / 4                #=> (9/32)
    Rational(20, 9) / 9.8              #=> 0.22675736961451246
- :id: 6
  :callseqs:
  - rational <=> numeric  →  -1, 0, +1 or nil
  :description:
  - Performs comparison and returns -1, 0, or +1.
  - nil is returned if the two values are incomparable.
  :examples: |
    Rational(2, 3)  <=> Rational(2, 3)  #=> 0
    Rational(5)     <=> 5               #=> 0
    Rational(2,3)   <=> Rational(1,3)   #=> 1
    Rational(1,3)   <=> 1               #=> -1
    Rational(1,3)   <=> 0.3             #=> 1
- :id: 7
  :callseqs:
  - rat == object  →  true or false
  :description:
  - Returns true if rat equals object numerically.
  :examples: |
    Rational(2, 3)  == Rational(2, 3)   #=> true
    Rational(5)     == 5                #=> true
    Rational(0)     == 0.0              #=> true
    Rational('1/3') == 0.33             #=> false
    Rational('1/2') == '1/2'            #=> false
- :id: 8
  :callseqs:
  - abs       → rat
  :description:
  - Returns the absolute value of rat.
  - "#magnitude is an alias of #abs."
  :examples: ''
- :id: 9
  :callseqs:
  - ceil               →  integer
  - ceil(precision=0)  →  rational
  :description:
  - Returns the truncated value (toward positive infinity).
  :examples: |
    Rational(3).ceil      #=> 3
    Rational(2, 3).ceil   #=> 1
    Rational(-3, 2).ceil  #=> -1

      #    decimal      -  1  2  3 . 4  5  6
      #                   ^  ^  ^  ^   ^  ^
      #   precision      -3 -2 -1  0  +1 +2

    '%f' % Rational('-123.456').ceil(+1)  #=> "-123.400000"
    '%f' % Rational('-123.456').ceil(-1)  #=> "-120.000000"
- :id: 10
  :callseqs:
  - denominator  →  integer
  :description:
  - Returns the denominator (always positive).
  :examples: |
    Rational(7).denominator             #=> 1
    Rational(7, 1).denominator          #=> 1
    Rational(9, -4).denominator         #=> 4
    Rational(-2, -10).denominator       #=> 5
    rat.numerator.gcd(rat.denominator)  #=> 1
- :id: 11
  :callseqs:
  - fdiv(numeric)  →  float
  :description:
  - Performs division and returns the value as a float.
  :examples: |
    Rational(2, 3).fdiv(1)       #=> 0.6666666666666666
    Rational(2, 3).fdiv(0.5)     #=> 1.3333333333333333
    Rational(2).fdiv(3)          #=> 0.6666666666666666
- :id: 12
  :callseqs:
  - floor               →  integer
  - floor(precision=0)  →  rational
  :description:
  - Returns the truncated value (toward negative infinity).
  :examples: |
    Rational(3).floor      #=> 3
    Rational(2, 3).floor   #=> 0
    Rational(-3, 2).floor  #=> -1

      #    decimal      -  1  2  3 . 4  5  6
      #                   ^  ^  ^  ^   ^  ^
      #   precision      -3 -2 -1  0  +1 +2

    '%f' % Rational('-123.456').floor(+1)  #=> "-123.500000"
    '%f' % Rational('-123.456').floor(-1)  #=> "-130.000000"
- :id: 13
  :callseqs:
  - inspect  →  string
  :description:
  - Returns the value as a string for inspection.
  :examples: |
    Rational(2).inspect      #=> "(2/1)"
    Rational(-8, 6).inspect  #=> "(-4/3)"
    Rational('1/2').inspect  #=> "(1/2)"
- :id: 14
  :callseqs:
  - magnitude → rat
  :description:
  - Returns the absolute value of rat.
  - "#magnitude is an alias of #abs."
  :examples: ''
- :id: 15
  :callseqs:
  - negative? →  true or false
  :description:
  - Returns true if rat is less than 0.
  :examples: ''
- :id: 16
  :callseqs:
  - numerator  →  integer
  :description:
  - Returns the numerator.
  :examples: |
    Rational(7).numerator        #=> 7
    Rational(7, 1).numerator     #=> 7
    Rational(9, -4).numerator    #=> -9
    Rational(-2, -10).numerator  #=> 1
- :id: 17
  :callseqs:
  - positive? →  true or false
  :description:
  - Returns true if rat is greater than 0.
  :examples: ''
- :id: 18
  :callseqs:
  - quo(numeric)  →  numeric
  :description:
  - Performs division.
  :examples: |
    Rational(2, 3)  / Rational(2, 3)   #=> (1/1)
    Rational(900)   / Rational(1)      #=> (900/1)
    Rational(-2, 9) / Rational(-9, 2)  #=> (4/81)
    Rational(9, 8)  / 4                #=> (9/32)
    Rational(20, 9) / 9.8              #=> 0.22675736961451246
- :id: 19
  :callseqs:
  - rationalize       →  self
  - rationalize(eps)  →  rational
  :description:
  - |-
    Returns a simpler approximation of the value if the optional argument eps
    is given (rat-|eps| <= result <= rat+|eps|), self otherwise.
  :examples: |
    r = Rational(5033165, 16777216)
    r.rationalize                    #=> (5033165/16777216)
    r.rationalize(Rational('0.01'))  #=> (3/10)
    r.rationalize(Rational('0.1'))   #=> (1/3)
- :id: 20
  :callseqs:
  - round               →  integer
  - round(precision=0)  →  rational
  :description:
  - |-
    Returns the truncated value (toward the nearest integer; 0.5 => 1; -0.5
    => -1).
  :examples: |
    Rational(3).round      #=> 3
    Rational(2, 3).round   #=> 1
    Rational(-3, 2).round  #=> -2

      #    decimal      -  1  2  3 . 4  5  6
      #                   ^  ^  ^  ^   ^  ^
      #   precision      -3 -2 -1  0  +1 +2

    '%f' % Rational('-123.456').round(+1)  #=> "-123.500000"
    '%f' % Rational('-123.456').round(-1)  #=> "-120.000000"
- :id: 21
  :callseqs:
  - to_f  →  float
  :description:
  - Return the value as a float.
  :examples: |
    Rational(2).to_f      #=> 2.0
    Rational(9, 4).to_f   #=> 2.25
    Rational(-3, 4).to_f  #=> -0.75
    Rational(20, 3).to_f  #=> 6.666666666666667
- :id: 22
  :callseqs:
  - to_i  →  integer
  :description:
  - Returns the truncated value as an integer.
  - 'Equivalent to #truncate.'
  :examples: |
    Rational(2, 3).to_i   #=> 0
    Rational(3).to_i      #=> 3
    Rational(300.6).to_i  #=> 300
    Rational(98,71).to_i  #=> 1
    Rational(-30,2).to_i  #=> -15
- :id: 23
  :callseqs:
  - to_r  →  self
  :description:
  - Returns self.
  :examples: |
    Rational(2).to_r      #=> (2/1)
    Rational(-8, 6).to_r  #=> (-4/3)
- :id: 24
  :callseqs:
  - to_s  →  string
  :description:
  - Returns the value as a string.
  :examples: |
    Rational(2).to_s      #=> "2/1"
    Rational(-8, 6).to_s  #=> "-4/3"
    Rational('1/2').to_s  #=> "1/2"
- :id: 25
  :callseqs:
  - truncate               →  integer
  - truncate(precision=0)  →  rational
  :description:
  - Returns the truncated value (toward zero).
  :examples: |
    Rational(3).truncate      #=> 3
    Rational(2, 3).truncate   #=> 0
    Rational(-3, 2).truncate  #=> -1

      #    decimal      -  1  2  3 . 4  5  6
      #                   ^  ^  ^  ^   ^  ^
      #   precision      -3 -2 -1  0  +1 +2

    '%f' % Rational('-123.456').truncate(+1)  #=>  "-123.400000"
    '%f' % Rational('-123.456').truncate(-1)  #=>  "-120.000000"
