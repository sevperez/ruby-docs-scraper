---
- :id: 0
  :callseqs: []
  :description: []
  :examples: ''
- :id: 1
  :callseqs:
  - count → Integer
  :description:
  - The number of times GC occurred.
  - |-
    It returns the number of times GC occurred since the
    process started.
  :examples: ''
- :id: 2
  :callseqs:
  - disable    → true or false
  :description:
  - |-
    Disables garbage collection, returning true if garbage
    collection was already disabled.
  :examples: |
    GC.disable   #=> false
    GC.disable   #=> true
- :id: 3
  :callseqs:
  - enable    → true or false
  :description:
  - |-
    Enables garbage collection, returning true if garbage
    collection was previously disabled.
  :examples: |
    GC.disable   #=> false
    GC.enable    #=> true
    GC.enable    #=> false
- :id: 4
  :callseqs:
  - latest_gc_info → {:gc_by=>:newobj}
  - latest_gc_info(hash) → hash
  - latest_gc_info(:major_by) → :malloc
  :description:
  - Returns information about the most recent garbage collection.
  :examples: ''
- :id: 5
  :callseqs:
  - malloc_allocated_size → Integer
  :description:
  - Returns the size of memory allocated by malloc().
  - Only available if ruby was built with CALC_EXACT_MALLOC_SIZE.
  :examples: ''
- :id: 6
  :callseqs:
  - malloc_allocations → Integer
  :description:
  - Returns the number of malloc() allocations.
  - Only available if ruby was built with CALC_EXACT_MALLOC_SIZE.
  :examples: ''
- :id: 7
  :callseqs: []
  :description: []
  :examples: ''
- :id: 8
  :callseqs:
  - start                     → nil
  - 'start(full_mark: true, immediate_sweep: true)           → nil'
  :description:
  - Initiates garbage collection, unless manually disabled.
  - 'This method is defined with keyword arguments that default to true:'
  - |-
    Use full_mark: false to perform a minor GC. Use
    immediate_sweep: false to defer sweeping (use lazy sweep).
  - |-
    Note: These keyword arguments are implementation and version dependent.
    They are not guaranteed to be future-compatible, and may be ignored if the
    underlying implementation does not support them.
  :examples: ''
- :id: 9
  :callseqs:
  - stat → Hash
  - stat(hash) → hash
  - stat(:key) → Numeric
  :description:
  - Returns a Hash containing information about the GC.
  - 'The hash includes information about internal statistics about GC such as:'
  - |-
    The contents of the hash are implementation specific and may be changed in
    the future.
  - This method is only expected to work on C Ruby.
  :examples: |
    {
        :count=>0,
        :heap_allocated_pages=>24,
        :heap_sorted_length=>24,
        :heap_allocatable_pages=>0,
        :heap_available_slots=>9783,
        :heap_live_slots=>7713,
        :heap_free_slots=>2070,
        :heap_final_slots=>0,
        :heap_marked_slots=>0,
        :heap_eden_pages=>24,
        :heap_tomb_pages=>0,
        :total_allocated_pages=>24,
        :total_freed_pages=>0,
        :total_allocated_objects=>7796,
        :total_freed_objects=>83,
        :malloc_increase_bytes=>2389312,
        :malloc_increase_bytes_limit=>16777216,
        :minor_gc_count=>0,
        :major_gc_count=>0,
        :remembered_wb_unprotected_objects=>0,
        :remembered_wb_unprotected_objects_limit=>0,
        :old_objects=>0,
        :old_objects_limit=>0,
        :oldmalloc_increase_bytes=>2389760,
        :oldmalloc_increase_bytes_limit=>16777216
    }
- :id: 10
  :callseqs:
  - stress     → integer, true or false
  :description:
  - Returns current status of GC stress mode.
  :examples: ''
- :id: 11
  :callseqs:
  - stress = flag          → flag
  :description:
  - Updates the GC stress mode.
  - |-
    When stress mode is enabled, the GC is invoked at
    every GC opportunity: all memory and object
    allocations.
  - Enabling stress mode will degrade performance, it is only for debugging.
  - flag can be true, false, or an integer bit-ORed following flags.
  :examples: |
    0x01:: no major GC
    0x02:: no immediate sweep
    0x04:: full mark after malloc/calloc/realloc
- :id: 12
  :callseqs:
  - verify_internal_consistency                  → nil
  :description:
  - Verify internal consistency.
  - |-
    This method is implementation specific. Now this method checks generational
    consistency if RGenGC is supported.
  :examples: ''
- :id: 13
  :callseqs:
  - garbage_collect  → nil
  - include GC; garbage_collect  → nil
  - 'garbage_collect(full_mark: true, immediate_sweep: true) → nil'
  :description:
  - Initiates garbage collection, unless manually disabled.
  - 'This method is defined with keyword arguments that default to true:'
  - |-
    Use full_mark: false to perform a minor GC. Use
    immediate_sweep: false to defer sweeping (use lazy sweep).
  - |-
    Note: These keyword arguments are implementation and version dependent.
    They are not guaranteed to be future-compatible, and may be ignored if the
    underlying implementation does not support them.
  :examples: ''
