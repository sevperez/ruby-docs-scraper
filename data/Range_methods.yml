---
- :id: 0
  :callseqs:
  - new(begin, end, exclude_end=false)    → rng
  :description:
  - |-
    Constructs a range using the given begin and end.
    If the exclude_end parameter is omitted or is
    false, the rng will include the end object;
    otherwise, it will be excluded.
  :examples: ''
- :id: 1
  :callseqs:
  - rng == obj    → true or false
  :description:
  - |-
    Returns true only if obj is a Range, has equivalent begin and end items (by
    comparing them with ==), and has the same exclude_end? setting as the
    range.
  :examples: |
    (0..2) == (0..2)            #=> true
    (0..2) == Range.new(0,2)    #=> true
    (0..2) == (0...2)           #=> false
- :id: 2
  :callseqs:
  - rng === obj       →  true or false
  :description:
  - |-
    Returns true if obj is an element of the range,
    false otherwise.  Conveniently, === is the
    comparison operator used by case statements.
  - 'produces:'
  :examples: |
    case 79
    when 1..50   then   print "low\n"
    when 51..75  then   print "medium\n"
    when 76..100 then   print "high\n"
    end
    high
- :id: 3
  :callseqs:
  - begin    → obj
  :description:
  - Returns the object that defines the beginning of the range.
  :examples: "(1..10).begin   #=> 1\n"
- :id: 4
  :callseqs:
  - bsearch {|obj| block }  → value
  :description:
  - |-
    By using binary search, finds a value in range which meets the given
    condition in O(log n) where n is the size of the range.
  - |-
    You can use this method in two use cases: a find-minimum mode and a
    find-any mode.  In either case, the elements of the range must be monotone
    (or sorted) with respect to the block.
  - |-
    In find-minimum mode (this is a good choice for typical use case), the
    block must return true or false, and there must be a value x so that:
  - the block returns false for any value which is less than x, and
  - the block returns true for any value which is greater than or equal to x.
  - |-
    If x is within the range, this method returns the value x. Otherwise, it
    returns nil.
  - |-
    In find-any mode (this behaves like libc’s bsearch(3)), the block must
    return a number, and there must be two values x and y (x <= y) so that:
  - the block returns a positive number for v if v < x,
  - the block returns zero for v if x <= v < y, and
  - the block returns a negative number for v if y <= v.
  - |-
    This method returns any value which is within the intersection of the given
    range and x…y (if any).  If there is no value that satisfies the condition,
    it returns nil.
  - |-
    You must not mix the two modes at a time; the block must always return
    either true/false, or always return a number.  It is undefined which value
    is actually picked up at each iteration.
  :examples: |
    ary = [0, 4, 7, 10, 12]
    (0...ary.size).bsearch {|i| ary[i] >= 4 } #=> 1
    (0...ary.size).bsearch {|i| ary[i] >= 6 } #=> 2
    (0...ary.size).bsearch {|i| ary[i] >= 8 } #=> 3
    (0...ary.size).bsearch {|i| ary[i] >= 100 } #=> nil

    (0.0...Float::INFINITY).bsearch {|x| Math.log(x) >= 0 } #=> 1.0
    ary = [0, 100, 100, 100, 200]
    (0..4).bsearch {|i| 100 - ary[i] } #=> 1, 2 or 3
    (0..4).bsearch {|i| 300 - ary[i] } #=> nil
    (0..4).bsearch {|i|  50 - ary[i] } #=> nil
- :id: 5
  :callseqs:
  - cover?(obj)  →  true or false
  :description:
  - |-
    Returns true if obj is between the begin and end
    of the range.
  - |-
    This tests begin <= obj <= end when exclude_end? is
    false and begin <= obj < end when exclude_end? is
    true.
  :examples: |
    ("a".."z").cover?("c")    #=> true
    ("a".."z").cover?("5")    #=> false
    ("a".."z").cover?("cc")   #=> true
- :id: 6
  :callseqs:
  - each {| i | block } → rng
  - each                → an_enumerator
  :description:
  - Iterates over the elements of range, passing each in turn to the block.
  - |-
    The each method can only be used if the begin object of the
    range supports the succ method.  A TypeError is raised if the object does not have
    succ method defined (like Float).
  - If no block is given, an enumerator is returned instead.
  :examples: |
    (10..15).each {|n| print n, ' ' }
    # prints: 10 11 12 13 14 15

    (2.5..5).each {|n| print n, ' ' }
    # raises: TypeError: can't iterate from Float
- :id: 7
  :callseqs:
  - end    → obj
  :description:
  - Returns the object that defines the end of the range.
  :examples: |
    (1..10).end    #=> 10
    (1...10).end   #=> 10
- :id: 8
  :callseqs:
  - eql?(obj)    → true or false
  :description:
  - |-
    Returns true only if obj is a Range, has equivalent begin and end items (by
    comparing them with eql?), and has the same exclude_end? setting as the
    range.
  :examples: |
    (0..2).eql?(0..2)            #=> true
    (0..2).eql?(Range.new(0,2))  #=> true
    (0..2).eql?(0...2)           #=> false
- :id: 9
  :callseqs:
  - exclude_end?    → true or false
  :description:
  - Returns true if the range excludes its end value.
  :examples: |
    (1..5).exclude_end?     #=> false
    (1...5).exclude_end?    #=> true
- :id: 10
  :callseqs:
  - first    → obj
  - first(n) → an_array
  :description:
  - |-
    Returns the first object in the range, or an array of the first
    n elements.
  :examples: |
    (10..20).first     #=> 10
    (10..20).first(3)  #=> [10, 11, 12]
- :id: 11
  :callseqs:
  - hash    → integer
  :description:
  - |-
    Compute a hash-code for this range. Two ranges with equal begin and end
    points (using eql?), and the same exclude_end? value will
    generate the same hash-code.
  - See also Object#hash.
  :examples: ''
- :id: 12
  :callseqs:
  - include?(obj) →  true or false
  :description:
  - |-
    Returns true if obj is an element of the range,
    false otherwise.  If begin and end are numeric, comparison is
    done according to the magnitude of the values.
  :examples: |
    ("a".."z").include?("g")   #=> true
    ("a".."z").include?("A")   #=> false
    ("a".."z").include?("cc")  #=> false
- :id: 13
  :callseqs:
  - inspect  → string
  :description:
  - |-
    Convert this range object to a printable form (using inspect
    to convert the begin and end objects).
  :examples: ''
- :id: 14
  :callseqs:
  - last    → obj
  - last(n) → an_array
  :description:
  - |-
    Returns the last object in the range, or an array of the last
    n elements.
  - |-
    Note that with no arguments last will return the object that
    defines the end of the range even if exclude_end? is
    true.
  :examples: |
    (10..20).last      #=> 20
    (10...20).last     #=> 20
    (10..20).last(3)   #=> [18, 19, 20]
    (10...20).last(3)  #=> [17, 18, 19]
- :id: 15
  :callseqs:
  - max                       → obj
  - max {| a,b | block }      → obj
  - max(n)                    → obj
  - max(n) {| a,b | block }   → obj
  :description:
  - |-
    Returns the maximum value in the range. Returns nil if the
    begin value of the range larger than the end value. Returns
    nil if the begin value of an exclusive range is equal to the
    end value.
  - |-
    Can be given an optional block to override the default comparison method
    a <=> b.
  :examples: "(10..20).max    #=> 20\n"
- :id: 16
  :callseqs:
  - member?(obj)  →  true or false
  :description:
  - |-
    Returns true if obj is an element of the range,
    false otherwise.  If begin and end are numeric, comparison is
    done according to the magnitude of the values.
  :examples: |
    ("a".."z").include?("g")   #=> true
    ("a".."z").include?("A")   #=> false
    ("a".."z").include?("cc")  #=> false
- :id: 17
  :callseqs:
  - min                       → obj
  - min {| a,b | block }      → obj
  - min(n)                    → array
  - min(n) {| a,b | block }   → array
  :description:
  - |-
    Returns the minimum value in the range. Returns nil if the
    begin value of the range is larger than the end value. Returns
    nil if the begin value of an exclusive range is equal to the
    end value.
  - |-
    Can be given an optional block to override the default comparison method
    a <=> b.
  :examples: "(10..20).min    #=> 10\n"
- :id: 18
  :callseqs:
  - size                   → num
  :description:
  - |-
    Returns the number of elements in the range. Both the begin and the end of
    the Range must be Numeric, otherwise nil is returned.
  :examples: |
    (10..20).size    #=> 11
    ('a'..'z').size  #=> nil
    (-Float::INFINITY..Float::INFINITY).size #=> Infinity
- :id: 19
  :callseqs:
  - step(n=1) {| obj | block }    → rng
  - step(n=1)                     → an_enumerator
  :description:
  - |-
    Iterates over the range, passing each nth element to the
    block. If begin and end are numeric, n is added for each
    iteration. Otherwise step invokes succ to iterate
    through range elements.
  - If no block is given, an enumerator is returned instead.
  - 'produces:'
  - See Range for the definition of class Xs.
  :examples: |
    range = Xs.new(1)..Xs.new(10)
    range.step(2) {|x| puts x}
    puts
    range.step(3) {|x| puts x}
- :id: 20
  :callseqs:
  - to_s   → string
  :description:
  - |-
    Convert this range object to a printable form (using to_s to convert the begin and end
    objects).
  :examples: ''
