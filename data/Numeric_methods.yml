---
- :id: 0
  :callseqs:
  - modulo(numeric)  →  real
  :description:
  - Equivalent to num.divmod(numeric)[1].
  - 'See #divmod.'
  :examples: ''
- :id: 1
  :callseqs:
  - "+num  →  num"
  :description:
  - Unary Plus—Returns the receiver’s value.
  :examples: ''
- :id: 2
  :callseqs:
  - "-num  →  numeric"
  :description:
  - Unary Minus—Returns the receiver’s value, negated.
  :examples: ''
- :id: 3
  :callseqs:
  - number <=> other  →  0 or nil
  :description:
  - |-
    Returns zero if number equals other, otherwise
    nil is returned if the two values are incomparable.
  :examples: ''
- :id: 4
  :callseqs:
  - abs        →  numeric
  :description:
  - Returns the absolute value of num.
  - "#magnitude is an alias of #abs."
  :examples: |
    12.abs         #=> 12
    (-34.56).abs   #=> 34.56
    -34.56.abs     #=> 34.56
- :id: 5
  :callseqs:
  - abs2  →  real
  :description:
  - Returns square of self.
  :examples: ''
- :id: 6
  :callseqs:
  - angle  →  0 or float
  :description:
  - Returns 0 if the value is positive, pi otherwise.
  :examples: ''
- :id: 7
  :callseqs:
  - arg    →  0 or float
  :description:
  - Returns 0 if the value is positive, pi otherwise.
  :examples: ''
- :id: 8
  :callseqs:
  - ceil([ndigits])  →  integer or float
  :description:
  - |-
    Returns the smallest possible Integer that is
    greater than or equal to num.
  - |-
    Numeric achieves this by converting itself to a
    Float then invoking Float#ceil.
  :examples: |
    1.ceil        #=> 1
    1.2.ceil      #=> 2
    (-1.2).ceil   #=> -1
    (-1.0).ceil   #=> -1
- :id: 9
  :callseqs:
  - 'clone(freeze: true) → num'
  :description:
  - Returns the receiver. freeze cannot be false.
  :examples: ''
- :id: 10
  :callseqs:
  - coerce(numeric)  →  array
  :description:
  - |-
    If a numeric is the same type as num, returns an
    array containing numeric and num. Otherwise,
    returns an array with both a numeric and num
    represented as Float objects.
  - |-
    This coercion mechanism is used by Ruby to handle mixed-type numeric
    operations: it is intended to find a compatible common type between the two
    operands of the operator.
  :examples: |
    1.coerce(2.5)   #=> [2.5, 1.0]
    1.2.coerce(3)   #=> [3.0, 1.2]
    1.coerce(2)     #=> [2, 1]
- :id: 11
  :callseqs:
  - conj       →  self
  - conjugate  →  self
  :description:
  - Returns self.
  :examples: ''
- :id: 12
  :callseqs:
  - conjugate  →  self
  :description:
  - Returns self.
  :examples: ''
- :id: 13
  :callseqs:
  - denominator  →  integer
  :description:
  - Returns the denominator (always positive).
  :examples: ''
- :id: 14
  :callseqs:
  - div(numeric)  →  integer
  :description:
  - |-
    Uses / to perform division, then converts the result to an
    integer. numeric does not define the / operator;
    this is left to subclasses.
  - Equivalent to num.divmod(numeric)[0].
  - 'See #divmod.'
  :examples: ''
- :id: 15
  :callseqs:
  - divmod(numeric)  →  array
  :description:
  - |-
    Returns an array containing the quotient and modulus obtained by dividing
    num by numeric.
  - If q, r = * x.divmod(y), then
  - 'The quotient is rounded toward -infinity, as shown in the following table:'
  - Examples
  :examples: |
    q = floor(x/y)
    x = q*y+r
    11.divmod(3)         #=> [3, 2]
    11.divmod(-3)        #=> [-4, -1]
    11.divmod(3.5)       #=> [3, 0.5]
    (-11).divmod(3.5)    #=> [-4, 3.0]
    (11.5).divmod(3.5)   #=> [3, 1.0]
- :id: 16
  :callseqs:
  - dup → num
  :description:
  - Returns the receiver.
  :examples: ''
- :id: 17
  :callseqs:
  - eql?(numeric)  →  true or false
  :description:
  - |-
    Returns true if num and numeric are
    the same type and have equal values.  Contrast this with
    Numeric#==, which performs type conversions.
  :examples: |
    1 == 1.0          #=> true
    1.eql?(1.0)       #=> false
    (1.0).eql?(1.0)   #=> true
    68719476736.eql?(68719476736.0)   #=> false
- :id: 18
  :callseqs:
  - fdiv(numeric)  →  float
  :description:
  - Returns float division.
  :examples: ''
- :id: 19
  :callseqs:
  - finite?  →  true or false
  :description:
  - Return true if num is finite number, oterwise returns false.
  :examples: ''
- :id: 20
  :callseqs:
  - floor([ndigits])  →  integer or float
  :description:
  - Returns the largest integer less than or equal to num.
  - |-
    Numeric implements this by converting an Integer to a Float and
    invoking Float#floor.
  :examples: |
    1.floor      #=> 1
    (-1).floor   #=> -1
- :id: 21
  :callseqs:
  - i  →  Complex(0,num)
  :description:
  - |-
    Returns the corresponding imaginary number. Not available for complex
    numbers.
  :examples: ''
- :id: 22
  :callseqs:
  - imag       →  0
  - imaginary  →  0
  :description:
  - Returns zero.
  :examples: ''
- :id: 23
  :callseqs:
  - imaginary  →  0
  :description:
  - Returns zero.
  :examples: ''
- :id: 24
  :callseqs:
  - infinite?  →  nil or 1 or -1
  :description:
  - 'Returns values corresponding to the value of num‘s magnitude:'
  - nil
  - "-1"
  - "+1"
  :examples: ''
- :id: 25
  :callseqs:
  - integer?  →  true or false
  :description:
  - Returns true if num is an Integer.
  :examples: |
    (1.0).integer? #=> false
    (1).integer?   #=> true
- :id: 26
  :callseqs:
  - magnitude  →  numeric
  :description:
  - Returns the absolute value of num.
  - "#magnitude is an alias of #abs."
  :examples: |
    12.abs         #=> 12
    (-34.56).abs   #=> 34.56
    -34.56.abs     #=> 34.56
- :id: 27
  :callseqs:
  - modulo(numeric)  →  real
  :description:
  - Equivalent to num.divmod(numeric)[1].
  - 'See #divmod.'
  :examples: ''
- :id: 28
  :callseqs:
  - negative? →  true or false
  :description:
  - Returns true if num is less than 0.
  :examples: ''
- :id: 29
  :callseqs:
  - nonzero?  →  self or nil
  :description:
  - |-
    Returns self if num is not zero, nil
    otherwise.
  - 'This behavior is useful when chaining comparisons:'
  :examples: |
    a = %w( z Bb bB bb BB a aA Aa AA A )
    b = a.sort {|a,b| (a.downcase <=> b.downcase).nonzero? || a <=> b }
    b   #=> ["A", "a", "AA", "Aa", "aA", "BB", "Bb", "bB", "bb", "z"]
- :id: 30
  :callseqs:
  - numerator  →  integer
  :description:
  - Returns the numerator.
  :examples: ''
- :id: 31
  :callseqs:
  - phase  →  0 or float
  :description:
  - Returns 0 if the value is positive, pi otherwise.
  :examples: ''
- :id: 32
  :callseqs:
  - polar  →  array
  :description:
  - Returns an array; [num.abs, num.arg].
  :examples: ''
- :id: 33
  :callseqs:
  - positive? →  true or false
  :description:
  - Returns true if num is greater than 0.
  :examples: ''
- :id: 34
  :callseqs:
  - quo(int_or_rat)   →  rat
  - quo(flo)          →  flo
  :description:
  - Returns most exact division (rational for integers, float for floats).
  :examples: ''
- :id: 35
  :callseqs:
  - real  →  self
  :description:
  - Returns self.
  :examples: ''
- :id: 36
  :callseqs:
  - real?  →  true or false
  :description:
  - |-
    Returns true if num is a Real number. (i.e. not
    Complex).
  :examples: ''
- :id: 37
  :callseqs:
  - rect  →  array
  - rectangular  →  array
  :description:
  - Returns an array; [num, 0].
  :examples: ''
- :id: 38
  :callseqs:
  - rectangular  →  array
  :description:
  - Returns an array; [num, 0].
  :examples: ''
- :id: 39
  :callseqs:
  - remainder(numeric)  →  real
  :description:
  - 'See #divmod.'
  :examples: ''
- :id: 40
  :callseqs:
  - round([ndigits])  →  integer or float
  :description:
  - |-
    Rounds num to a given precision in decimal digits (default 0
    digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is more than zero.
  - |-
    Numeric implements this by converting itself to
    a Float and invoking Float#round.
  :examples: ''
- :id: 41
  :callseqs: []
  :description:
  - |-
    Trap attempts to add methods to Numeric objects.
    Always raises a TypeError.
  - Numerics should be values; singleton_methods should not be added to them.
  :examples: ''
- :id: 42
  :callseqs:
  - 'step(by: step, to: limit) {|i| block }   →  self'
  - 'step(by: step, to: limit)                →  an_enumerator'
  - step(limit=nil, step=1) {|i| block }     →  self
  - step(limit=nil, step=1)                  →  an_enumerator
  :description:
  - |-
    Invokes the given block with the sequence of numbers starting at
    num, incremented by step (defaulted to
    1) on each call.
  - |-
    The loop finishes when the value to be passed to the block is greater than
    limit (if step is positive) or less than
    limit (if step is negative), where limit
    is defaulted to infinity.
  - |-
    In the recommended keyword argument style, either or both of
    step and limit (default infinity) can be omitted.
    In the fixed position argument style, zero as a step (i.e. num.step(limit,
    0)) is not allowed for historical compatibility reasons.
  - |-
    If all the arguments are integers, the loop operates using an integer
    counter.
  - |-
    If any of the arguments are floating point numbers, all are converted to
    floats, and the loop is executed the following expression:
  - 'Where the n is the following:'
  - |-
    Otherwise, the loop starts at num, uses either the less-than
    (<) or greater-than (>) operator to compare the counter against
    limit, and increments itself using the +
    operator.
  - |-
    If no block is given, an Enumerator is
    returned instead.
  - 'For example:'
  - 'Will produce:'
  :examples: |
    floor(n + n*epsilon)+ 1
    n = (limit - num)/step
    p 1.step.take(4)
    p 10.step(by: -1).take(4)
    3.step(to: 5) { |i| print i, " " }
    1.step(10, 2) { |i| print i, " " }
    Math::E.step(to: Math::PI, by: 0.2) { |f| print f, " " }
- :id: 43
  :callseqs:
  - to_c  →  complex
  :description:
  - Returns the value as a complex.
  :examples: ''
- :id: 44
  :callseqs:
  - to_int  →  integer
  :description:
  - |-
    Invokes the child class’s to_i method to convert
    num to an integer.
  :examples: ''
- :id: 45
  :callseqs:
  - truncate([ndigits])  →  integer or float
  :description:
  - Returns num truncated to an Integer.
  - |-
    Numeric implements this by converting its value
    to a Float and invoking Float#truncate.
  :examples: ''
- :id: 46
  :callseqs:
  - zero?  →  true or false
  :description:
  - Returns true if num has a zero value.
  :examples: ''
