---
:id: 74
:name: Proc
:link: http://ruby-doc.org/core-2.4.1/Proc.html
:methods:
- :id: 0
  :callseqs:
  - new {|...| block } → a_proc
  - new                → a_proc
  :description:
  - |-
    Creates a new Proc object, bound to the current context.
    Proc::new may be called without a block only within a method
    with an attached block, in which case that block is converted to the
    Proc object.
  :examples: |
    def proc_from
      Proc.new
    end
    proc = proc_from { "hello" }
    proc.call   #=> "hello"
- :id: 1
  :callseqs:
  - proc === obj   → result_of_proc
  :description:
  - |-
    Invokes the block with obj as the proc's parameter like #call.  It is to allow a proc object to
    be a target of when clause in a case statement.
  :examples: ''
- :id: 2
  :callseqs:
  - prc[params,...]        → obj
  :description:
  - |-
    Invokes the block, setting the block's parameters to the values in
    params using something close to method calling semantics. Returns
    the value of the last expression evaluated in the block.
  - |-
    Note that prc.() invokes prc.call() with the
    parameters given.  It's syntactic sugar to hide "call".
  - |-
    For procs created using lambda or ->() an
    error is generated if the wrong number of parameters are passed to the
    proc. For procs created using Proc.new or
    Kernel.proc, extra parameters are silently discarded and
    missing parameters are set to nil.
  - 'See also #lambda?.'
  :examples: |
    a_proc = Proc.new {|scalar, *values| values.map {|value| value*scalar } }
    a_proc.call(9, 1, 2, 3)    #=> [9, 18, 27]
    a_proc[9, 1, 2, 3]         #=> [9, 18, 27]
    a_proc.(9, 1, 2, 3)        #=> [9, 18, 27]
    a_proc.yield(9, 1, 2, 3)   #=> [9, 18, 27]
    a_proc = proc {|a,b| [a,b] }
    a_proc.call(1)   #=> [1, nil]

    a_proc = lambda {|a,b| [a,b] }
    a_proc.call(1)   # ArgumentError: wrong number of arguments (given 1, expected 2)
- :id: 3
  :callseqs:
  - arity → integer
  :description:
  - |-
    Returns the number of mandatory arguments. If the block is declared to take
    no arguments, returns 0. If the block is known to take exactly n arguments,
    returns n. If the block has optional arguments, returns -n-1, where n is
    the number of mandatory arguments, with the exception for blocks that are
    not lambdas and have only a finite number of optional arguments; in this
    latter case, returns n. Keywords arguments will considered as a single
    additional argument, that argument being mandatory if any keyword argument
    is mandatory. A proc with no argument declarations is the same
    as a block declaring || as its arguments.
  :examples: ''
- :id: 4
  :callseqs:
  - binding    → binding
  :description:
  - |-
    Returns the binding associated with prc. Note that
    Kernel#eval accepts either a Proc or a
    Binding object as its second parameter.
  :examples: |
    def fred(param)
      proc {}
    end

    b = fred(99)
    eval("param", b.binding)   #=> 99
- :id: 5
  :callseqs:
  - call(params,...)   → obj
  :description:
  - |-
    Invokes the block, setting the block's parameters to the values in
    params using something close to method calling semantics. Returns
    the value of the last expression evaluated in the block.
  - |-
    Note that prc.() invokes prc.call() with the
    parameters given.  It's syntactic sugar to hide "call".
  - |-
    For procs created using lambda or ->() an
    error is generated if the wrong number of parameters are passed to the
    proc. For procs created using Proc.new or
    Kernel.proc, extra parameters are silently discarded and
    missing parameters are set to nil.
  - 'See also #lambda?.'
  :examples: |
    a_proc = Proc.new {|scalar, *values| values.map {|value| value*scalar } }
    a_proc.call(9, 1, 2, 3)    #=> [9, 18, 27]
    a_proc[9, 1, 2, 3]         #=> [9, 18, 27]
    a_proc.(9, 1, 2, 3)        #=> [9, 18, 27]
    a_proc.yield(9, 1, 2, 3)   #=> [9, 18, 27]
    a_proc = proc {|a,b| [a,b] }
    a_proc.call(1)   #=> [1, nil]

    a_proc = lambda {|a,b| [a,b] }
    a_proc.call(1)   # ArgumentError: wrong number of arguments (given 1, expected 2)
- :id: 6
  :callseqs:
  - curry         → a_proc
  - curry(arity)  → a_proc
  :description:
  - |-
    Returns a curried proc. If the optional arity argument is given,
    it determines the number of arguments. A curried proc receives some
    arguments. If a sufficient number of arguments are supplied, it passes the
    supplied arguments to the original proc and returns the result. Otherwise,
    returns another curried proc that takes the rest of arguments.
  :examples: |
    b = proc {|x, y, z| (x||0) + (y||0) + (z||0) }
    p b.curry[1][2][3]           #=> 6
    p b.curry[1, 2][3, 4]        #=> 6
    p b.curry(5)[1][2][3][4][5]  #=> 6
    p b.curry(5)[1, 2][3, 4][5]  #=> 6
    p b.curry(1)[1]              #=> 1

    b = proc {|x, y, z, *w| (x||0) + (y||0) + (z||0) + w.inject(0, &:+) }
    p b.curry[1][2][3]           #=> 6
    p b.curry[1, 2][3, 4]        #=> 10
    p b.curry(5)[1][2][3][4][5]  #=> 15
    p b.curry(5)[1, 2][3, 4][5]  #=> 15
    p b.curry(1)[1]              #=> 1

    b = lambda {|x, y, z| (x||0) + (y||0) + (z||0) }
    p b.curry[1][2][3]           #=> 6
    p b.curry[1, 2][3, 4]        #=> wrong number of arguments (given 4, expected 3)
    p b.curry(5)                 #=> wrong number of arguments (given 5, expected 3)
    p b.curry(1)                 #=> wrong number of arguments (given 1, expected 3)

    b = lambda {|x, y, z, *w| (x||0) + (y||0) + (z||0) + w.inject(0, &:+) }
    p b.curry[1][2][3]           #=> 6
    p b.curry[1, 2][3, 4]        #=> 10
    p b.curry(5)[1][2][3][4][5]  #=> 15
    p b.curry(5)[1, 2][3, 4][5]  #=> 15
    p b.curry(1)                 #=> wrong number of arguments (given 1, expected 3)

    b = proc { :foo }
    p b.curry[]                  #=> :foo
- :id: 7
  :callseqs:
  - hash   →  integer
  :description:
  - Returns a hash value corresponding to proc body.
  - See also Object#hash.
  :examples: ''
- :id: 8
  :callseqs:
  - inspect()
  :description: []
  :examples: ''
- :id: 9
  :callseqs:
  - lambda? → true or false
  :description:
  - |-
    Returns true for a Proc object for
    which argument handling is rigid. Such procs are typically generated by
    lambda.
  - |-
    A Proc object generated by proc
    ignores extra arguments.
  - It provides nil for missing arguments.
  - It expands a single array argument.
  - |-
    A Proc object generated by lambda
    doesn’t have such tricks.
  - |-
    #lambda? is a predicate for the
    tricks. It returns true if no tricks apply.
  - |-
    ::new is the same as
    proc.
  - lambda, proc and ::new preserve the tricks of a Proc object given by & argument.
  - |-
    A Proc object generated by &
    argument has the tricks
  - The & argument preserves the tricks if a Proc object is given by & argument.
  - |-
    A Proc object converted from a method has no
    tricks.
  - |-
    define_method is treated the same as method definition. The
    defined method has no tricks.
  - |-
    define_method always defines a method without the tricks, even
    if a non-lambda Proc object is given. This is the
    only exception for which the tricks are not preserved.
  - |-
    This exception ensures that methods never have tricks and makes it easy to
    have wrappers to define methods that behave as usual.
  - The wrapper def2 defines a method which has no tricks.
  :examples: |
    proc {|a,b| [a,b] }.call(1,2,3)    #=> [1,2]
    proc {|a,b| [a,b] }.call(1)        #=> [1,nil]
    proc {|a,b| [a,b] }.call([1,2])    #=> [1,2]
    lambda {|a,b| [a,b] }.call(1,2,3)  #=> ArgumentError
    lambda {|a,b| [a,b] }.call(1)      #=> ArgumentError
    lambda {|a,b| [a,b] }.call([1,2])  #=> ArgumentError
    lambda {}.lambda?            #=> true
    proc {}.lambda?              #=> false
    Proc.new {}.lambda?          #=> false
    lambda(&lambda {}).lambda?   #=> true
    proc(&lambda {}).lambda?     #=> true
    Proc.new(&lambda {}).lambda? #=> true

    lambda(&proc {}).lambda?     #=> false
    proc(&proc {}).lambda?       #=> false
    Proc.new(&proc {}).lambda?   #=> false
    def n(&b) b.lambda? end
    n {}                         #=> false
    n(&lambda {})                #=> true
    n(&proc {})                  #=> false
    n(&Proc.new {})              #=> false
    def m() end
    method(:m).to_proc.lambda?   #=> true

    n(&method(:m))               #=> true
    n(&method(:m).to_proc)       #=> true
    class C
      define_method(:d) {}
    end
    C.new.d(1,2)       #=> ArgumentError
    C.new.method(:d).to_proc.lambda?   #=> true
    class C
      define_method(:e, &proc {})
    end
    C.new.e(1,2)       #=> ArgumentError
    C.new.method(:e).to_proc.lambda?   #=> true
    class C
      def self.def2(name, &body)
        define_method(name, &body)
      end

      def2(:f) {}
    end
    C.new.f(1,2)       #=> ArgumentError
- :id: 10
  :callseqs:
  - parameters  → array
  :description:
  - Returns the parameter information of this proc.
  :examples: |
    prc = lambda{|x, y=42, *other|}
    prc.parameters  #=> [[:req, :x], [:opt, :y], [:rest, :other]]
- :id: 11
  :callseqs:
  - source_location  → [String, Integer]
  :description:
  - |-
    Returns the Ruby source filename and line number containing this proc or
    nil if this proc was not defined in Ruby (i.e. native).
  :examples: ''
- :id: 12
  :callseqs:
  - to_proc → proc
  :description:
  - |-
    Part of the protocol for converting objects to Proc objects.
    Instances of class Proc simply return themselves.
  :examples: ''
- :id: 13
  :callseqs:
  - to_s   → string
  :description:
  - |-
    Returns the unique identifier for this proc, along with an indication of
    where the proc was defined.
  :examples: ''
- :id: 14
  :callseqs:
  - yield(params,...)  → obj
  :description:
  - |-
    Invokes the block, setting the block's parameters to the values in
    params using something close to method calling semantics. Returns
    the value of the last expression evaluated in the block.
  - |-
    Note that prc.() invokes prc.call() with the
    parameters given.  It's syntactic sugar to hide "call".
  - |-
    For procs created using lambda or ->() an
    error is generated if the wrong number of parameters are passed to the
    proc. For procs created using Proc.new or
    Kernel.proc, extra parameters are silently discarded and
    missing parameters are set to nil.
  - 'See also #lambda?.'
  :examples: |
    a_proc = Proc.new {|scalar, *values| values.map {|value| value*scalar } }
    a_proc.call(9, 1, 2, 3)    #=> [9, 18, 27]
    a_proc[9, 1, 2, 3]         #=> [9, 18, 27]
    a_proc.(9, 1, 2, 3)        #=> [9, 18, 27]
    a_proc.yield(9, 1, 2, 3)   #=> [9, 18, 27]
    a_proc = proc {|a,b| [a,b] }
    a_proc.call(1)   #=> [1, nil]

    a_proc = lambda {|a,b| [a,b] }
    a_proc.call(1)   # ArgumentError: wrong number of arguments (given 1, expected 2)
