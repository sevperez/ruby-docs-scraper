---
- :id: 0
  :callseqs:
  - DEBUG     → num
  :description:
  - |-
    Returns the thread debug level.  Available only if compiled with
    THREAD_DEBUG=-1.
  :examples: ''
- :id: 1
  :callseqs:
  - DEBUG = num
  :description:
  - |-
    Sets the thread debug level.  Available only if compiled with
    THREAD_DEBUG=-1.
  :examples: ''
- :id: 2
  :callseqs:
  - abort_on_exception   → true or false
  :description:
  - Returns the status of the global “abort on exception” condition.
  - The default is false.
  - |-
    When set to true, if any thread is aborted by an exception,
    the raised exception will be re-raised in the main thread.
  - |-
    Can also be specified by the global $DEBUG flag or command line option
    -d.
  - See also ::abort_on_exception=.
  - |-
    There is also an instance level method to set this for a specific thread,
    see abort_on_exception.
  :examples: ''
- :id: 3
  :callseqs:
  - abort_on_exception= boolean   → true or false
  :description:
  - |-
    When set to true, if any thread is aborted by an exception,
    the raised exception will be re-raised in the main thread. Returns the new
    state.
  - 'This will produce:'
  - See also ::abort_on_exception.
  - |-
    There is also an instance level method to set this for a specific thread,
    see abort_on_exception=.
  :examples: |
    Thread.abort_on_exception = true
    t1 = Thread.new do
      puts  "In new thread"
      raise "Exception from thread"
    end
    sleep(1)
    puts "not reached"
- :id: 4
  :callseqs:
  - current   → thread
  :description:
  - Returns the currently executing thread.
  :examples: 'Thread.current   #=> #<Thread:0x401bdf4c run>

'
- :id: 5
  :callseqs:
  - exclusive { block }   => obj
  :description:
  - |-
    Wraps the block in a single, VM-global Thread::Mutex#synchronize,
    returning the value of the block. A thread executing inside the exclusive
    section will only block other threads which also use the ::exclusive mechanism.
  :examples: ''
- :id: 6
  :callseqs:
  - exit   → thread
  :description:
  - |-
    Terminates the currently running thread and schedules another thread to be
    run.
  - If this thread is already marked to be killed, ::exit returns the Thread.
  - If this is the main thread, or the last  thread, exit the process.
  :examples: ''
- :id: 7
  :callseqs:
  - fork([args]*) {|args| block }    → thread
  :description:
  - |-
    Basically the same as ::new.
    However, if class Thread is subclassed, then
    calling start in that subclass will not invoke the subclass’s
    initialize method.
  :examples: ''
- :id: 8
  :callseqs:
  - handle_interrupt(hash) { ... } → result of the block
  :description:
  - Changes asynchronous interrupt timing.
  - |-
    interrupt means asynchronous event and corresponding procedure by
    #raise, #kill, signal trap (not supported yet)
    and main thread termination (if main thread terminates, then all other
    thread will be killed).
  - |-
    The given hash has pairs like ExceptionClass =>
    :TimingSymbol. Where the ExceptionClass is the interrupt handled by
    the given block. The TimingSymbol can be one of the following symbols:
  - Invoke interrupts immediately.
  - Invoke interrupts while BlockingOperation.
  - Never invoke all interrupts.
  - |-
    BlockingOperation means that the operation will block the calling
    thread, such as read and write.  On CRuby implementation,
    BlockingOperation is any operation executed without GVL.
  - |-
    Masked asynchronous interrupts are delayed until they are enabled. This
    method is similar to sigprocmask(3).
  - Asynchronous interrupts are difficult to use.
  - |-
    If you need to communicate between threads, please consider to use another
    way such as Queue.
  - Or use them with deep understanding about this method.
  - 'In this example, we can guard from #raise exceptions.'
  - |-
    Using the :never TimingSymbol the RuntimeError exception will always be ignored
    in the first block of the main thread. In the second ::handle_interrupt block
    we can purposefully handle RuntimeError
    exceptions.
  - |-
    While we are ignoring the RuntimeError
    exception, it’s safe to write our resource allocation code. Then, the
    ensure block is where we can safely deallocate your resources.
  - |-
    In the next example, we will guard from the Timeout::Error exception. This
    will help prevent from leaking resources when Timeout::Error exceptions
    occur during normal ensure clause. For this example we use the help of the
    standard library Timeout, from lib/timeout.rb
  - |-
    In the first part of the timeout block, we can rely on
    Timeout::Error being ignored. Then in the Timeout::Error =>
    :on_blocking block, any operation that will block the calling thread
    is susceptible to a Timeout::Error exception being raised.
  - |-
    It’s possible to stack multiple levels of ::handle_interrupt blocks
    in order to control more than one ExceptionClass and TimingSymbol at a
    time.
  - |-
    All exceptions inherited from the ExceptionClass parameter will be
    considered.
  :examples: |
    th = Thread.new do
      Thread.handle_interrupt(RuntimeError => :never) {
        begin
          # You can write resource allocation code safely.
          Thread.handle_interrupt(RuntimeError => :immediate) {
            # ...
          }
        ensure
          # You can write resource deallocation code safely.
        end
      }
    end
    Thread.pass
    # ...
    th.raise "stop"
    require 'timeout'
    Thread.handle_interrupt(Timeout::Error => :never) {
      timeout(10){
        # Timeout::Error doesn't occur here
        Thread.handle_interrupt(Timeout::Error => :on_blocking) {
          # possible to be killed by Timeout::Error
          # while blocking operation
        }
        # Timeout::Error doesn't occur here
      }
    }
    Thread.handle_interrupt(FooError => :never) {
      Thread.handle_interrupt(BarError => :never) {
         # FooError and BarError are prohibited.
      }
    }
    Thread.handle_interrupt(Exception => :never) {
      # all exceptions inherited from Exception are prohibited.
    }
- :id: 9
  :callseqs:
  - kill(thread)   → thread
  :description:
  - Causes the given thread to exit, see also ::exit.
  :examples: |
    count = 0
    a = Thread.new { loop { count += 1 } }
    sleep(0.1)       #=> 0
    Thread.kill(a)   #=> #<Thread:0x401b3d30 dead>
    count            #=> 93947
    a.alive?         #=> false
- :id: 10
  :callseqs:
  - list   → array
  :description:
  - |-
    Returns an array of Thread objects for all
    threads that are either runnable or stopped.
  - 'This will produce:'
  :examples: |
    Thread.new { sleep(200) }
    Thread.new { 1000000.times {|i| i*i } }
    Thread.new { Thread.stop }
    Thread.list.each {|t| p t}
    #<Thread:0x401b3e84 sleep>
    #<Thread:0x401b3f38 run>
    #<Thread:0x401b3fb0 sleep>
    #<Thread:0x401bdf4c run>
- :id: 11
  :callseqs:
  - main   → thread
  :description:
  - Returns the main thread.
  :examples: ''
- :id: 12
  :callseqs:
  - new { ... }                  → thread
  - new(*args, &proc)            → thread
  - new(*args) { |args| ... }    → thread
  :description:
  - Creates a new thread executing the given block.
  - |-
    Any args given to ::new
    will be passed to the block:
  - A ThreadError exception is raised if ::new is called without a block.
  - |-
    If you’re going to subclass Thread, be sure to
    call super in your initialize method, otherwise a ThreadError will be raised.
  :examples: |
    arr = []
    a, b, c = 1, 2, 3
    Thread.new(a,b,c) { |d,e,f| arr << d << e << f }.join
    arr #=> [1, 2, 3]
- :id: 13
  :callseqs:
  - pass   → nil
  :description:
  - |-
    Give the thread scheduler a hint to pass execution to another thread. A
    running thread may or may not switch, it depends on OS and processor.
  :examples: ''
- :id: 14
  :callseqs:
  - pending_interrupt?(error = nil) → true/false
  :description:
  - Returns whether or not the asynchronous queue is empty.
  - |-
    Since ::handle_interrupt can be
    used to defer asynchronous events, this method can be used to determine if
    there are any deferred events.
  - |-
    If you find this method returns true, then you may finish
    :never blocks.
  - |-
    For example, the following method processes deferred asynchronous events
    immediately.
  - |-
    If error is given, then check only for error type
    deferred events.
  - |-
    This example can also be written as the following, which you should use to
    avoid asynchronous interrupts.
  :examples: |
    def Thread.kick_interrupt_immediately
      Thread.handle_interrupt(Object => :immediate) {
        Thread.pass
      }
    end
- :id: 15
  :callseqs:
  - report_on_exception   → true or false
  :description:
  - Returns the status of the global “report on exception” condition.
  - The default is false.
  - |-
    When set to true, all threads will report the exception if an
    exception is raised in any thread.
  - See also ::report_on_exception=.
  - |-
    There is also an instance level method to set this for a specific thread,
    see report_on_exception.
  :examples: ''
- :id: 16
  :callseqs:
  - report_on_exception= boolean   → true or false
  :description:
  - |-
    When set to true, all threads will report the exception if an
    exception is raised.  Returns the new state.
  - 'This will produce:'
  - See also ::report_on_exception.
  - |-
    There is also an instance level method to set this for a specific thread,
    see report_on_exception=.
  :examples: |
    Thread.report_on_exception = true
    t1 = Thread.new do
      puts  "In new thread"
      raise "Exception from thread"
    end
    sleep(1)
    puts "In the main thread"
- :id: 17
  :callseqs:
  - start([args]*) {|args| block }   → thread
  :description:
  - |-
    Basically the same as ::new.
    However, if class Thread is subclassed, then
    calling start in that subclass will not invoke the subclass’s
    initialize method.
  :examples: ''
- :id: 18
  :callseqs:
  - stop   → nil
  :description:
  - |-
    Stops execution of the current thread, putting it into a “sleep” state, and
    schedules execution of another thread.
  :examples: |
    a = Thread.new { print "a"; Thread.stop; print "c" }
    sleep 0.1 while a.status!='sleep'
    print "b"
    a.run
    a.join
    #=> "abc"
- :id: 19
  :callseqs:
  - thr[sym]   → obj or nil
  :description:
  - |-
    Attribute Reference—Returns the value of a fiber-local variable (current
    thread’s root fiber if not explicitly inside a Fiber), using either a symbol or a string name. If
    the specified variable does not exist, returns nil.
  - 'This will produce:'
  - |-
    #[] and #[]= are not thread-local but
    fiber-local. This confusion did not exist in Ruby 1.8 because fibers are
    only available since Ruby 1.9. Ruby 1.9 chooses that the methods behaves
    fiber-local to save following idiom for dynamic scope.
  - |-
    The idiom may not work as dynamic scope if the methods are thread-local and
    a given block switches fiber.
  - |-
    For thread-local variables, please see thread_variable_get and
    thread_variable_set.
  :examples: |
    [
      Thread.new { Thread.current["name"] = "A" },
      Thread.new { Thread.current[:name]  = "B" },
      Thread.new { Thread.current["name"] = "C" }
    ].each do |th|
      th.join
      puts "#{th.inspect}: #{th[:name]}"
    end
    #<Thread:0x00000002a54220 dead>: A
    #<Thread:0x00000002a541a8 dead>: B
    #<Thread:0x00000002a54130 dead>: C
    def meth(newvalue)
      begin
        oldvalue = Thread.current[:name]
        Thread.current[:name] = newvalue
        yield
      ensure
        Thread.current[:name] = oldvalue
      end
    end
    f = Fiber.new {
      meth(1) {
        Fiber.yield
      }
    }
    meth(2) {
      f.resume
    }
    f.resume
    p Thread.current[:name]
    #=> nil if fiber-local
    #=> 2 if thread-local (The value 2 is leaked to outside of meth method.)
- :id: 20
  :callseqs:
  - thr[sym] = obj   → obj
  :description:
  - |-
    Attribute Assignment—Sets or creates the value of a fiber-local variable,
    using either a symbol or a string.
  - 'See also #[].'
  - |-
    For thread-local variables, please see thread_variable_set and
    thread_variable_get.
  :examples: ''
- :id: 21
  :callseqs:
  - abort_on_exception   → true or false
  :description:
  - |-
    Returns the status of the thread-local “abort on exception” condition for
    this thr.
  - The default is false.
  - See also abort_on_exception=.
  - There is also a class level method to set this for all threads, see ::abort_on_exception.
  :examples: ''
- :id: 22
  :callseqs:
  - abort_on_exception= boolean   → true or false
  :description:
  - |-
    When set to true, if this thr is aborted by an
    exception, the raised exception will be re-raised in the main thread.
  - See also abort_on_exception.
  - There is also a class level method to set this for all threads, see ::abort_on_exception=.
  :examples: ''
- :id: 23
  :callseqs:
  - add_trace_func(proc)    → proc
  :description:
  - Adds proc as a handler for tracing.
  - |-
    See #set_trace_func and
    Kernel#set_trace_func.
  :examples: ''
- :id: 24
  :callseqs:
  - alive?   → true or false
  :description:
  - Returns true if thr is running or sleeping.
  - See also stop? and status.
  :examples: |
    thr = Thread.new { }
    thr.join                #=> #<Thread:0x401b3fb0 dead>
    Thread.current.alive?   #=> true
    thr.alive?              #=> false
- :id: 25
  :callseqs:
  - backtrace    → array
  :description:
  - Returns the current backtrace of the target thread.
  :examples: ''
- :id: 26
  :callseqs:
  - backtrace_locations(*args)   → array or nil
  :description:
  - |-
    Returns the execution stack for the target thread—an array containing
    backtrace location objects.
  - |-
    See Thread::Backtrace::Location for
    more information.
  - |-
    This method behaves similarly to Kernel#caller_locations
    except it applies to a specific thread.
  :examples: ''
- :id: 27
  :callseqs:
  - exit        → thr or nil
  - kill        → thr or nil
  - terminate   → thr or nil
  :description:
  - Terminates thr and schedules another thread to be run.
  - If this thread is already marked to be killed, exit returns the Thread.
  - If this is the main thread, or the last thread, exits the process.
  :examples: ''
- :id: 28
  :callseqs: []
  :description: []
  :examples: ''
- :id: 29
  :callseqs:
  - group   → thgrp or nil
  :description:
  - |-
    Returns the ThreadGroup which contains the
    given thread, or returns nil if thr is not a
    member of any group.
  :examples: 'Thread.main.group   #=> #<ThreadGroup:0x4029d914>

'
- :id: 30
  :callseqs:
  - inspect   → string
  :description:
  - Dump the name, id, and status of thr to a string.
  :examples: ''
- :id: 31
  :callseqs:
  - join          → thr
  - join(limit)   → thr
  :description:
  - The calling thread will suspend execution and run this thr.
  - |-
    Does not return until thr exits or until the given
    limit seconds have passed.
  - |-
    If the time limit expires, nil will be returned, otherwise
    thr is returned.
  - Any threads not joined will be killed when the main program exits.
  - |-
    If thr had previously raised an exception and the ::abort_on_exception or
    $DEBUG flags are not set, (so the exception has not yet been processed), it
    will be processed at this time.
  - The following example illustrates the limit parameter.
  - 'This will produce:'
  :examples: |
    a = Thread.new { print "a"; sleep(10); print "b"; print "c" }
    x = Thread.new { print "x"; Thread.pass; print "y"; print "z" }
    x.join # Let thread x finish, thread a will be killed on exit.
    #=> "axyz"
    y = Thread.new { 4.times { sleep 0.1; puts 'tick... ' }}
    puts "Waiting" until y.join(0.15)
- :id: 32
  :callseqs:
  - key?(sym)   → true or false
  :description:
  - |-
    Returns true if the given string (or symbol) exists as a
    fiber-local variable.
  :examples: |
    me = Thread.current
    me[:oliver] = "a"
    me.key?(:oliver)    #=> true
    me.key?(:stanley)   #=> false
- :id: 33
  :callseqs:
  - keys   → array
  :description:
  - Returns an array of the names of the fiber-local variables (as Symbols).
  :examples: |
    thr = Thread.new do
      Thread.current[:cat] = 'meow'
      Thread.current["dog"] = 'woof'
    end
    thr.join   #=> #<Thread:0x401b3f10 dead>
    thr.keys   #=> [:dog, :cat]
- :id: 34
  :callseqs:
  - exit        → thr or nil
  - kill        → thr or nil
  - terminate   → thr or nil
  :description:
  - Terminates thr and schedules another thread to be run.
  - If this thread is already marked to be killed, exit returns the Thread.
  - If this is the main thread, or the last thread, exits the process.
  :examples: ''
- :id: 35
  :callseqs:
  - name   → string
  :description:
  - show the name of the thread.
  :examples: ''
- :id: 36
  :callseqs:
  - name=(name)   → string
  :description:
  - |-
    set given name to the ruby thread. On some platform, it may set the name to
    pthread and/or kernel.
  :examples: ''
- :id: 37
  :callseqs:
  - pending_interrupt?(error = nil) → true/false
  :description:
  - |-
    Returns whether or not the asynchronous queue is empty for the target
    thread.
  - |-
    If error is given, then check only for error type
    deferred events.
  - |-
    See ::pending_interrupt?
    for more information.
  :examples: ''
- :id: 38
  :callseqs:
  - priority   → integer
  :description:
  - |-
    Returns the priority of thr. Default is inherited from the current
    thread which creating the new thread, or zero for the initial main thread;
    higher-priority thread will run more frequently than lower-priority threads
    (but lower-priority threads can also run).
  - |-
    This is just hint for Ruby thread scheduler.  It may be ignored on some
    platform.
  :examples: 'Thread.current.priority   #=> 0

'
- :id: 39
  :callseqs:
  - priority= integer   → thr
  :description:
  - |-
    Sets the priority of thr to integer. Higher-priority
    threads will run more frequently than lower-priority threads (but
    lower-priority threads can also run).
  - |-
    This is just hint for Ruby thread scheduler.  It may be ignored on some
    platform.
  :examples: |
    count1 = count2 = 0
    a = Thread.new do
          loop { count1 += 1 }
        end
    a.priority = -1

    b = Thread.new do
          loop { count2 += 1 }
        end
    b.priority = -2
    sleep 1   #=> 1
    count1    #=> 622504
    count2    #=> 5832
- :id: 40
  :callseqs:
  - raise
  - raise(string)
  - raise(exception [, string [, array]])
  :description:
  - |-
    Raises an exception from the given thread. The caller does not have to be
    thr. See Kernel#raise
    for more information.
  - 'This will produce:'
  :examples: |
    Thread.abort_on_exception = true
    a = Thread.new { sleep(200) }
    a.raise("Gotcha")
- :id: 41
  :callseqs:
  - report_on_exception   → true or false
  :description:
  - |-
    Returns the status of the thread-local “report on exception” condition for
    this thr.
  - The default is false.
  - See also report_on_exception=.
  - There is also a class level method to set this for all threads, see ::report_on_exception.
  :examples: ''
- :id: 42
  :callseqs:
  - report_on_exception= boolean   → true or false
  :description:
  - |-
    When set to true, all threads (including the main program)
    will report the exception if an exception is raised in this
    thr.
  - See also report_on_exception.
  - There is also a class level method to set this for all threads, see ::report_on_exception=.
  :examples: ''
- :id: 43
  :callseqs:
  - run   → thr
  :description:
  - Wakes up thr, making it eligible for scheduling.
  - 'This will produce:'
  - See also the instance method wakeup.
  :examples: |
    a = Thread.new { puts "a"; Thread.stop; puts "c" }
    sleep 0.1 while a.status!='sleep'
    puts "Got here"
    a.run
    a.join
    a
    Got here
    c
- :id: 44
  :callseqs:
  - safe_level   → integer
  :description:
  - |-
    Returns the safe level in effect for thr. Setting thread-local
    safe levels can help when implementing sandboxes which run insecure code.
  :examples: |
    thr = Thread.new { $SAFE = 1; sleep }
    Thread.current.safe_level   #=> 0
    thr.safe_level              #=> 1
- :id: 45
  :callseqs:
  - set_trace_func(proc)    → proc
  - set_trace_func(nil)     → nil
  :description:
  - |-
    Establishes proc on thr as the handler for tracing, or
    disables tracing if the parameter is nil.
  - See Kernel#set_trace_func.
  :examples: ''
- :id: 46
  :callseqs:
  - status   → string, false or nil
  :description:
  - Returns the status of thr.
  - Returned if this thread is sleeping or waiting on I/O
  - When this thread is executing
  - If this thread is aborting
  - When this thread is terminated normally
  - If terminated with an exception.
  - See also the instance methods alive? and stop?
  :examples: |
    a = Thread.new { raise("die now") }
    b = Thread.new { Thread.stop }
    c = Thread.new { Thread.exit }
    d = Thread.new { sleep }
    d.kill                  #=> #<Thread:0x401b3678 aborting>
    a.status                #=> nil
    b.status                #=> "sleep"
    c.status                #=> false
    d.status                #=> "aborting"
    Thread.current.status   #=> "run"
- :id: 47
  :callseqs:
  - stop?   → true or false
  :description:
  - Returns true if thr is dead or sleeping.
  - See also alive? and status.
  :examples: |
    a = Thread.new { Thread.stop }
    b = Thread.current
    a.stop?   #=> true
    b.stop?   #=> false
- :id: 48
  :callseqs:
  - terminate   → thr or nil
  :description:
  - Terminates thr and schedules another thread to be run.
  - If this thread is already marked to be killed, exit returns the Thread.
  - If this is the main thread, or the last thread, exits the process.
  :examples: ''
- :id: 49
  :callseqs:
  - thread_variable?(key)   → true or false
  :description:
  - |-
    Returns true if the given string (or symbol) exists as a
    thread-local variable.
  - |-
    Note that these are not fiber local variables.  Please see #[] and #thread_variable_get
    for more details.
  :examples: |
    me = Thread.current
    me.thread_variable_set(:oliver, "a")
    me.thread_variable?(:oliver)    #=> true
    me.thread_variable?(:stanley)   #=> false
- :id: 50
  :callseqs:
  - thread_variable_get(key)  → obj or nil
  :description:
  - |-
    Returns the value of a thread local variable that has been set.  Note that
    these are different than fiber local values.  For fiber local values,
    please see #[] and #[]=.
  - |-
    Thread local values are carried along with
    threads, and do not respect fibers.  For example:
  - |-
    The value “bar” is returned for the thread local, where nil is returned for
    the fiber local.  The fiber is executed in the same thread, so the thread
    local values are available.
  :examples: |
    Thread.new {
      Thread.current.thread_variable_set("foo", "bar") # set a thread local
      Thread.current["foo"] = "bar"                    # set a fiber local

      Fiber.new {
        Fiber.yield [
          Thread.current.thread_variable_get("foo"), # get the thread local
          Thread.current["foo"],                     # get the fiber local
        ]
      }.resume
    }.join.value # => ['bar', nil]
- :id: 51
  :callseqs:
  - thread_variable_set(key, value)
  :description:
  - |-
    Sets a thread local with key to value.  Note that
    these are local to threads, and not to fibers.  Please see #thread_variable_get
    and #[] for more information.
  :examples: ''
- :id: 52
  :callseqs:
  - thread_variables   → array
  :description:
  - Returns an array of the names of the thread-local variables (as Symbols).
  - |-
    Note that these are not fiber local variables.  Please see #[] and #thread_variable_get
    for more details.
  :examples: |
    thr = Thread.new do
      Thread.current.thread_variable_set(:cat, 'meow')
      Thread.current.thread_variable_set("dog", 'woof')
    end
    thr.join               #=> #<Thread:0x401b3f10 dead>
    thr.thread_variables   #=> [:dog, :cat]
- :id: 53
  :callseqs:
  - value   → obj
  :description:
  - |-
    Waits for thr to complete, using join, and returns its value or raises
    the exception which terminated the thread.
  :examples: |
    a = Thread.new { 2 + 2 }
    a.value   #=> 4

    b = Thread.new { raise 'something went wrong' }
    b.value   #=> RuntimeError: something went wrong
- :id: 54
  :callseqs:
  - wakeup   → thr
  :description:
  - |-
    Marks a given thread as eligible for scheduling, however it may still
    remain blocked on I/O.
  - 'Note: This does not invoke the scheduler, see run for more information.'
  :examples: |
    c = Thread.new { Thread.stop; puts "hey!" }
    sleep 0.1 while c.status!='sleep'
    c.wakeup
    c.join
    #=> "hey!"
