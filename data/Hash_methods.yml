---
- :id: 0
  :callseqs:
  - Hash[ key, value, ... ]         → new_hash
  - Hash[ [ [key, value], ... ] ]   → new_hash
  - Hash[ object ]                  → new_hash
  :description:
  - Creates a new hash populated with the given objects.
  - |-
    Similar to the literal { key => value, ...
    }. In the first form, keys and values occur in pairs, so there must
    be an even number of arguments.
  - |-
    The second and third form take a single argument which is either an array
    of key-value pairs or an object convertible to a hash.
  :examples: |
    Hash["a", 100, "b", 200]             #=> {"a"=>100, "b"=>200}
    Hash[ [ ["a", 100], ["b", 200] ] ]   #=> {"a"=>100, "b"=>200}
    Hash["a" => 100, "b" => 200]         #=> {"a"=>100, "b"=>200}
- :id: 1
  :callseqs:
  - new                          → new_hash
  - new(obj)                     → new_hash
  - new {|hash, key| block }     → new_hash
  :description:
  - |-
    Returns a new, empty hash. If this hash is subsequently accessed by a key
    that doesn’t correspond to a hash entry, the value returned depends on the
    style of new used to create the hash. In the first form, the
    access returns nil. If obj is specified, this single
    object will be used for all default values. If a block is
    specified, it will be called with the hash object and the key, and should
    return the default value. It is the block’s responsibility to store the
    value in the hash if required.
  :examples: |
    h = Hash.new("Go Fish")
    h["a"] = 100
    h["b"] = 200
    h["a"]           #=> 100
    h["c"]           #=> "Go Fish"
    # The following alters the single default object
    h["c"].upcase!   #=> "GO FISH"
    h["d"]           #=> "GO FISH"
    h.keys           #=> ["a", "b"]

    # While this creates a new default object each time
    h = Hash.new { |hash, key| hash[key] = "Go Fish: #{key}" }
    h["c"]           #=> "Go Fish: c"
    h["c"].upcase!   #=> "GO FISH: C"
    h["d"]           #=> "Go Fish: d"
    h.keys           #=> ["c", "d"]
- :id: 2
  :callseqs:
  - try_convert(obj) → hash or nil
  :description:
  - |-
    Try to convert obj into a hash, using #to_hash method. Returns converted
    hash or nil if obj cannot be converted for any reason.
  :examples: |
    Hash.try_convert({1=>2})   # => {1=>2}
    Hash.try_convert("1=>2")   # => nil
- :id: 3
  :callseqs:
  - hash < other → true or false
  :description:
  - Returns true if hash is subset of other.
  :examples: |
    h1 = {a:1, b:2}
    h2 = {a:1, b:2, c:3}
    h1 < h2    #=> true
    h2 < h1    #=> false
    h1 < h1    #=> false
- :id: 4
  :callseqs:
  - hash <= other → true or false
  :description:
  - |-
    Returns true if hash is subset of other or
    equals to other.
  :examples: |
    h1 = {a:1, b:2}
    h2 = {a:1, b:2, c:3}
    h1 <= h2   #=> true
    h2 <= h1   #=> false
    h1 <= h1   #=> true
- :id: 5
  :callseqs:
  - hsh == other_hash    → true or false
  :description:
  - |-
    Equality—Two hashes are equal if they each contain the same number of keys
    and if each key-value pair is equal to (according to
    Object#==) the corresponding elements in the other hash.
  - The orders of each hashes are not compared.
  :examples: |
    h1 = { "a" => 1, "c" => 2 }
    h2 = { 7 => 35, "c" => 2, "a" => 1 }
    h3 = { "a" => 1, "c" => 2, 7 => 35 }
    h4 = { "a" => 1, "d" => 2, "f" => 35 }
    h1 == h2   #=> false
    h2 == h3   #=> true
    h3 == h4   #=> false
    h1 = { "a" => 1, "c" => 2 }
    h2 = { "c" => 2, "a" => 1 }
    h1 == h2   #=> true
- :id: 6
  :callseqs:
  - hash > other → true or false
  :description:
  - Returns true if other is subset of hash.
  :examples: |
    h1 = {a:1, b:2}
    h2 = {a:1, b:2, c:3}
    h1 > h2    #=> false
    h2 > h1    #=> true
    h1 > h1    #=> false
- :id: 7
  :callseqs:
  - hash >= other → true or false
  :description:
  - |-
    Returns true if other is subset of hash or
    equals to hash.
  :examples: |
    h1 = {a:1, b:2}
    h2 = {a:1, b:2, c:3}
    h1 >= h2   #=> false
    h2 >= h1   #=> true
    h1 >= h1   #=> true
- :id: 8
  :callseqs:
  - hsh[key]    →  value
  :description:
  - |-
    Element Reference—Retrieves the value object corresponding to the
    key object. If not found, returns the default value (see
    Hash::new for details).
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h["a"]   #=> 100
    h["c"]   #=> nil
- :id: 9
  :callseqs:
  - hsh[key] = value        → value
  :description:
  - |-
    Associates the value given by value with the key given by
    key.
  - |-
    key should not have its value changed while it is in use as a
    key (an unfrozen String passed as a key will be duplicated and
    frozen).
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h["a"] = 9
    h["c"] = 4
    h   #=> {"a"=>9, "b"=>200, "c"=>4}
    h.store("d", 42) #=> 42
    h   #=> {"a"=>9, "b"=>200, "c"=>4, "d"=>42}
    a = "a"
    b = "b".freeze
    h = { a => 100, b => 200 }
    h.key(100).equal? a #=> false
    h.key(200).equal? b #=> true
- :id: 10
  :callseqs:
  - any? [{ |(key, value)| block }]   → true or false
  :description:
  - See also Enumerable#any?
  :examples: ''
- :id: 11
  :callseqs:
  - assoc(obj)   →  an_array  or  nil
  :description:
  - |-
    Searches through the hash comparing obj with the key using
    ==. Returns the key-value pair (two elements array) or
    nil if no match is found.  See Array#assoc.
  :examples: |
    h = {"colors"  => ["red", "blue", "green"],
         "letters" => ["a", "b", "c" ]}
    h.assoc("letters")  #=> ["letters", ["a", "b", "c"]]
    h.assoc("foo")      #=> nil
- :id: 12
  :callseqs:
  - clear → hsh
  :description:
  - Removes all key-value pairs from hsh.
  :examples: |
    h = { "a" => 100, "b" => 200 }   #=> {"a"=>100, "b"=>200}
    h.clear                          #=> {}
- :id: 13
  :callseqs:
  - compact → new_hash
  :description:
  - Returns a new hash with the nil values/key pairs removed
  :examples: |
    h = { a: 1, b: false, c: nil }
    h.compact     #=> { a: 1, b: false }
    h             #=> { a: 1, b: false, c: nil }
- :id: 14
  :callseqs:
  - compact! → hsh
  :description:
  - Removes all nil values from the hash. Returns the hash.
  :examples: |
    h = { a: 1, b: false, c: nil }
    h.compact!     #=> { a: 1, b: false }
- :id: 15
  :callseqs:
  - compare_by_identity → hsh
  :description:
  - |-
    Makes hsh compare its keys by their identity, i.e. it will
    consider exact same objects as same keys.
  :examples: |
    h1 = { "a" => 100, "b" => 200, :c => "c" }
    h1["a"]        #=> 100
    h1.compare_by_identity
    h1.compare_by_identity? #=> true
    h1["a".dup]    #=> nil  # different objects.
    h1[:c]         #=> "c"  # same symbols are all same.
- :id: 16
  :callseqs:
  - compare_by_identity? → true or false
  :description:
  - |-
    Returns true if hsh will compare its keys by their
    identity.  Also see Hash#compare_by_identity.
  :examples: ''
- :id: 17
  :callseqs:
  - default(key=nil)   → obj
  :description:
  - |-
    Returns the default value, the value that would be returned by hsh if key did not exist in hsh. See
    also Hash::new and Hash#default=.
  :examples: |
    h = Hash.new                            #=> {}
    h.default                               #=> nil
    h.default(2)                            #=> nil

    h = Hash.new("cat")                     #=> {}
    h.default                               #=> "cat"
    h.default(2)                            #=> "cat"

    h = Hash.new {|h,k| h[k] = k.to_i*10}   #=> {}
    h.default                               #=> nil
    h.default(2)                            #=> 20
- :id: 18
  :callseqs:
  - default = obj     → obj
  :description:
  - |-
    Sets the default value, the value returned for a key that does not exist in
    the hash. It is not possible to set the default to a Proc that
    will be executed on each key lookup.
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.default = "Go fish"
    h["a"]     #=> 100
    h["z"]     #=> "Go fish"
    # This doesn't do what you might hope...
    h.default = proc do |hash, key|
      hash[key] = key + key
    end
    h[2]       #=> #<Proc:0x401b3948@-:6>
    h["cat"]   #=> #<Proc:0x401b3948@-:6>
- :id: 19
  :callseqs:
  - default_proc → anObject
  :description:
  - |-
    If Hash::new was invoked with a block, return that block,
    otherwise return nil.
  :examples: |
    h = Hash.new {|h,k| h[k] = k*k }   #=> {}
    p = h.default_proc                 #=> #<Proc:0x401b3d08@-:1>
    a = []                             #=> []
    p.call(a, 2)
    a                                  #=> [nil, nil, 4]
- :id: 20
  :callseqs:
  - default_proc = proc_obj or nil
  :description:
  - Sets the default proc to be executed on each failed key lookup.
  :examples: |
    h.default_proc = proc do |hash, key|
      hash[key] = key + key
    end
    h[2]       #=> 4
    h["cat"]   #=> "catcat"
- :id: 21
  :callseqs:
  - delete(key)                   → value
  - delete(key) {| key | block }  → value
  :description:
  - |-
    Deletes the key-value pair and returns the value from hsh whose
    key is equal to key. If the key is not found, it returns
    nil. If the optional code block is given and the key is not found,
    pass in the key and return the result of block.
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.delete("a")                              #=> 100
    h.delete("z")                              #=> nil
    h.delete("z") { |el| "#{el} not found" }   #=> "z not found"
- :id: 22
  :callseqs:
  - delete_if {| key, value | block }  → hsh
  - delete_if                          → an_enumerator
  :description:
  - |-
    Deletes every key-value pair from hsh for which block
    evaluates to true.
  - If no block is given, an enumerator is returned instead.
  :examples: |
    h = { "a" => 100, "b" => 200, "c" => 300 }
    h.delete_if {|key, value| key >= "b" }   #=> {"a"=>100}
- :id: 23
  :callseqs:
  - dig(key, ...)                 → object
  :description:
  - |-
    Extracts the nested value specified by the sequence of key objects
    by calling dig at each step, returning nil if any
    intermediate step is nil.
  :examples: |
    h = { foo: {bar: {baz: 1}}}

    h.dig(:foo, :bar, :baz)     #=> 1
    h.dig(:foo, :zot, :xyz)     #=> nil

    g = { foo: [10, 11, 12] }
    g.dig(:foo, 1)              #=> 11
    g.dig(:foo, 1, 0)           #=> TypeError: Integer does not have #dig method
    g.dig(:foo, :bar)           #=> TypeError: no implicit conversion of Symbol into Integer
- :id: 24
  :callseqs:
  - each      {| key, value | block } → hsh
  - each_pair {| key, value | block } → hsh
  - each                              → an_enumerator
  - each_pair                         → an_enumerator
  :description:
  - |-
    Calls block once for each key in hsh, passing the
    key-value pair as parameters.
  - If no block is given, an enumerator is returned instead.
  - 'produces:'
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.each {|key, value| puts "#{key} is #{value}" }
    a is 100
    b is 200
- :id: 25
  :callseqs:
  - each_key {| key | block } → hsh
  - each_key                  → an_enumerator
  :description:
  - |-
    Calls block once for each key in hsh, passing the key as
    a parameter.
  - If no block is given, an enumerator is returned instead.
  - 'produces:'
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.each_key {|key| puts key }
    a
    b
- :id: 26
  :callseqs:
  - each_pair {| key, value | block } → hsh
  - each_pair                         → an_enumerator
  :description:
  - |-
    Calls block once for each key in hsh, passing the
    key-value pair as parameters.
  - If no block is given, an enumerator is returned instead.
  - 'produces:'
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.each {|key, value| puts "#{key} is #{value}" }
    a is 100
    b is 200
- :id: 27
  :callseqs:
  - each_value {| value | block } → hsh
  - each_value                    → an_enumerator
  :description:
  - |-
    Calls block once for each key in hsh, passing the value
    as a parameter.
  - If no block is given, an enumerator is returned instead.
  - 'produces:'
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.each_value {|value| puts value }
    100
    200
- :id: 28
  :callseqs:
  - empty?    → true or false
  :description:
  - Returns true if hsh contains no key-value pairs.
  :examples: "{}.empty?   #=> true\n"
- :id: 29
  :callseqs:
  - eql?(other)  → true or false
  :description:
  - |-
    Returns true if hash and other are both
    hashes with the same content. The orders of each hashes are not compared.
  :examples: ''
- :id: 30
  :callseqs:
  - fetch(key [, default] )       → obj
  - fetch(key) {| key | block }   → obj
  :description:
  - |-
    Returns a value from the hash for the given key. If the key can’t be found,
    there are several options: With no other arguments, it will raise a
    KeyError exception; if default is given, then that
    will be returned; if the optional code block is specified, then that will
    be run and its result returned.
  - |-
    The following example shows that an exception is raised if the key is not
    found and a default value is not supplied.
  - 'produces:'
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.fetch("a")                            #=> 100
    h.fetch("z", "go fish")                 #=> "go fish"
    h.fetch("z") { |el| "go fish, #{el}"}   #=> "go fish, z"
    h = { "a" => 100, "b" => 200 }
    h.fetch("z")
- :id: 31
  :callseqs:
  - fetch_values(key, ...)                 → array
  - fetch_values(key, ...) { |key| block } → array
  :description:
  - |-
    Returns an array containing the values associated with the given keys but
    also raises KeyError when one of keys can’t be found. Also see
    Hash#values_at and Hash#fetch.
  :examples: |
    h = { "cat" => "feline", "dog" => "canine", "cow" => "bovine" }

    h.fetch_values("cow", "cat")                   #=> ["bovine", "feline"]
    h.fetch_values("cow", "bird")                  # raises KeyError
    h.fetch_values("cow", "bird") { |k| k.upcase } #=> ["bovine", "BIRD"]
- :id: 32
  :callseqs:
  - flatten → an_array
  - flatten(level) → an_array
  :description:
  - |-
    Returns a new array that is a one-dimensional flattening of this hash. That
    is, for every key or value that is an array, extract its elements into the
    new array.  Unlike Array#flatten,
    this method does not flatten recursively by default.  The optional
    level argument determines the level of recursion to flatten.
  :examples: |
    a =  {1=> "one", 2 => [2,"two"], 3 => "three"}
    a.flatten    # => [1, "one", 2, [2, "two"], 3, "three"]
    a.flatten(2) # => [1, "one", 2, 2, "two", 3, "three"]
- :id: 33
  :callseqs:
  - has_key?(key)    → true or false
  :description:
  - Returns true if the given key is present in hsh.
  - |-
    Note that include? and member? do not test member
    equality using == as do other Enumerables.
  - See also Enumerable#include?
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.has_key?("a")   #=> true
    h.has_key?("z")   #=> false
- :id: 34
  :callseqs:
  - has_value?(value)    → true or false
  :description:
  - |-
    Returns true if the given value is present for some key in
    hsh.
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.value?(100)   #=> true
    h.value?(999)   #=> false
- :id: 35
  :callseqs:
  - hash   → integer
  :description:
  - |-
    Compute a hash-code for this hash. Two hashes with the same content will
    have the same hash code (and will compare using eql?).
  - See also Object#hash.
  :examples: ''
- :id: 36
  :callseqs:
  - include?(key)    → true or false
  :description:
  - Returns true if the given key is present in hsh.
  - |-
    Note that include? and member? do not test member
    equality using == as do other Enumerables.
  - See also Enumerable#include?
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.has_key?("a")   #=> true
    h.has_key?("z")   #=> false
- :id: 37
  :callseqs:
  - to_s     → string
  - inspect  → string
  :description:
  - Return the contents of this hash as a string.
  :examples: |
    h = { "c" => 300, "a" => 100, "d" => 400, "c" => 300  }
    h.to_s   #=> "{\"c\"=>300, \"a\"=>100, \"d\"=>400}"
- :id: 38
  :callseqs:
  - invert → new_hash
  :description:
  - |-
    Returns a new hash created by using hsh’s values as keys, and the
    keys as values. If a key with the same value already exists in the
    hsh, then the last one defined will be used, the earlier value(s)
    will be discarded.
  - 'If there is no key with the same value, #invert is involutive.'
  - |-
    The condition, no key with the same value, can be tested by comparing the
    size of inverted hash.
  :examples: |
    h = { "n" => 100, "m" => 100, "y" => 300, "d" => 200, "a" => 0 }
    h.invert   #=> {0=>"a", 100=>"m", 200=>"d", 300=>"y"}
    h = { a: 1, b: 3, c: 4 }
    h.invert.invert == h #=> true
    # no key with the same value
    h = { a: 1, b: 3, c: 4 }
    h.size == h.invert.size #=> true

    # two (or more) keys has the same value
    h = { a: 1, b: 3, c: 1 }
    h.size == h.invert.size #=> false
- :id: 39
  :callseqs:
  - keep_if {| key, value | block }  → hsh
  - keep_if                          → an_enumerator
  :description:
  - |-
    Deletes every key-value pair from hsh for which block
    evaluates to false.
  - If no block is given, an enumerator is returned instead.
  :examples: ''
- :id: 40
  :callseqs:
  - key(value)    → key
  :description:
  - |-
    Returns the key of an occurrence of a given value. If the value is not
    found, returns nil.
  :examples: |
    h = { "a" => 100, "b" => 200, "c" => 300, "d" => 300 }
    h.key(200)   #=> "b"
    h.key(300)   #=> "c"
    h.key(999)   #=> nil
- :id: 41
  :callseqs:
  - key?(key)        → true or false
  :description:
  - Returns true if the given key is present in hsh.
  - |-
    Note that include? and member? do not test member
    equality using == as do other Enumerables.
  - See also Enumerable#include?
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.has_key?("a")   #=> true
    h.has_key?("z")   #=> false
- :id: 42
  :callseqs:
  - keys    → array
  :description:
  - |-
    Returns a new array populated with the keys from this hash. See also
    Hash#values.
  :examples: |
    h = { "a" => 100, "b" => 200, "c" => 300, "d" => 400 }
    h.keys   #=> ["a", "b", "c", "d"]
- :id: 43
  :callseqs:
  - length    →  integer
  :description:
  - Returns the number of key-value pairs in the hash.
  :examples: |
    h = { "d" => 100, "a" => 200, "v" => 300, "e" => 400 }
    h.length        #=> 4
    h.delete("a")   #=> 200
    h.length        #=> 3
- :id: 44
  :callseqs:
  - member?(key)     → true or false
  :description:
  - Returns true if the given key is present in hsh.
  - |-
    Note that include? and member? do not test member
    equality using == as do other Enumerables.
  - See also Enumerable#include?
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.has_key?("a")   #=> true
    h.has_key?("z")   #=> false
- :id: 45
  :callseqs:
  - merge(other_hash)                              → new_hash
  - merge(other_hash){|key, oldval, newval| block} → new_hash
  :description:
  - |-
    Returns a new hash containing the contents of other_hash and the
    contents of hsh. If no block is specified, the value for entries
    with duplicate keys will be that of other_hash. Otherwise the
    value for each duplicate key is determined by calling the block with the
    key, its value in hsh and its value in other_hash.
  :examples: |
    h1 = { "a" => 100, "b" => 200 }
    h2 = { "b" => 254, "c" => 300 }
    h1.merge(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}
    h1.merge(h2){|key, oldval, newval| newval - oldval}
                   #=> {"a"=>100, "b"=>54,  "c"=>300}
    h1             #=> {"a"=>100, "b"=>200}
- :id: 46
  :callseqs:
  - merge!(other_hash)                                 → hsh
  - merge!(other_hash){|key, oldval, newval| block}    → hsh
  :description:
  - |-
    Adds the contents of other_hash to hsh.  If no block is
    specified, entries with duplicate keys are overwritten with the values from
    other_hash, otherwise the value of each duplicate key is
    determined by calling the block with the key, its value in hsh and
    its value in other_hash.
  :examples: |
    h1 = { "a" => 100, "b" => 200 }
    h2 = { "b" => 254, "c" => 300 }
    h1.merge!(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}

    h1 = { "a" => 100, "b" => 200 }
    h2 = { "b" => 254, "c" => 300 }
    h1.merge!(h2) { |key, v1, v2| v1 }
                    #=> {"a"=>100, "b"=>200, "c"=>300}
- :id: 47
  :callseqs:
  - rassoc(obj) → an_array or nil
  :description:
  - |-
    Searches through the hash comparing obj with the value using
    ==. Returns the first key-value pair (two-element array) that
    matches. See also Array#rassoc.
  :examples: |
    a = {1=> "one", 2 => "two", 3 => "three", "ii" => "two"}
    a.rassoc("two")    #=> [2, "two"]
    a.rassoc("four")   #=> nil
- :id: 48
  :callseqs:
  - rehash → hsh
  :description:
  - |-
    Rebuilds the hash based on the current hash values for each key. If values
    of key objects have changed since they were inserted, this method will
    reindex hsh. If Hash#rehash is called while an
    iterator is traversing the hash, a RuntimeError will be raised
    in the iterator.
  :examples: |
    a = [ "a", "b" ]
    c = [ "c", "d" ]
    h = { a => 100, c => 300 }
    h[a]       #=> 100
    a[0] = "z"
    h[a]       #=> nil
    h.rehash   #=> {["z", "b"]=>100, ["c", "d"]=>300}
    h[a]       #=> 100
- :id: 49
  :callseqs:
  - reject {|key, value| block}   → a_hash
  - reject                        → an_enumerator
  :description:
  - Returns a new hash consisting of entries for which the block returns false.
  - If no block is given, an enumerator is returned instead.
  :examples: |
    h = { "a" => 100, "b" => 200, "c" => 300 }
    h.reject {|k,v| k < "b"}  #=> {"b" => 200, "c" => 300}
    h.reject {|k,v| v > 100}  #=> {"a" => 100}
- :id: 50
  :callseqs:
  - reject! {| key, value | block }  → hsh or nil
  - reject!                          → an_enumerator
  :description:
  - |-
    Equivalent to Hash#delete_if, but returns nil if
    no changes were made.
  :examples: ''
- :id: 51
  :callseqs:
  - replace(other_hash) → hsh
  :description:
  - |-
    Replaces the contents of hsh with the contents of
    other_hash.
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.replace({ "c" => 300, "d" => 400 })   #=> {"c"=>300, "d"=>400}
- :id: 52
  :callseqs:
  - select {|key, value| block}   → a_hash
  - select                        → an_enumerator
  :description:
  - Returns a new hash consisting of entries for which the block returns true.
  - If no block is given, an enumerator is returned instead.
  :examples: |
    h = { "a" => 100, "b" => 200, "c" => 300 }
    h.select {|k,v| k > "a"}  #=> {"b" => 200, "c" => 300}
    h.select {|k,v| v < 200}  #=> {"a" => 100}
- :id: 53
  :callseqs:
  - select! {| key, value | block }  → hsh or nil
  - select!                          → an_enumerator
  :description:
  - |-
    Equivalent to Hash#keep_if, but returns nil if no
    changes were made.
  :examples: ''
- :id: 54
  :callseqs:
  - shift → anArray or obj
  :description:
  - |-
    Removes a key-value pair from hsh and returns it as the two-item
    array [ key, value ], or the hash’s
    default value if the hash is empty.
  :examples: |
    h = { 1 => "a", 2 => "b", 3 => "c" }
    h.shift   #=> [1, "a"]
    h         #=> {2=>"b", 3=>"c"}
- :id: 55
  :callseqs:
  - size      →  integer
  :description:
  - Returns the number of key-value pairs in the hash.
  :examples: |
    h = { "d" => 100, "a" => 200, "v" => 300, "e" => 400 }
    h.length        #=> 4
    h.delete("a")   #=> 200
    h.length        #=> 3
- :id: 56
  :callseqs:
  - store(key, value)   → value
  :description:
  - |-
    Associates the value given by value with the key given by
    key.
  - |-
    key should not have its value changed while it is in use as a
    key (an unfrozen String passed as a key will be duplicated and
    frozen).
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h["a"] = 9
    h["c"] = 4
    h   #=> {"a"=>9, "b"=>200, "c"=>4}
    h.store("d", 42) #=> 42
    h   #=> {"a"=>9, "b"=>200, "c"=>4, "d"=>42}
    a = "a"
    b = "b".freeze
    h = { a => 100, b => 200 }
    h.key(100).equal? a #=> false
    h.key(200).equal? b #=> true
- :id: 57
  :callseqs:
  - to_a → array
  :description:
  - |-
    Converts hsh to a nested array of [ key,
    value ] arrays.
  :examples: |
    h = { "c" => 300, "a" => 100, "d" => 400, "c" => 300  }
    h.to_a   #=> [["c", 300], ["a", 100], ["d", 400]]
- :id: 58
  :callseqs:
  - to_h     → hsh or new_hash
  :description:
  - Returns self. If called on a subclass of Hash, converts the receiver to a Hash
    object.
  :examples: ''
- :id: 59
  :callseqs:
  - to_hash   => hsh
  :description:
  - Returns self.
  :examples: ''
- :id: 60
  :callseqs: []
  :description: []
  :examples: ''
- :id: 61
  :callseqs: []
  :description: []
  :examples: ''
- :id: 62
  :callseqs:
  - transform_values {|value| block } → hsh
  - transform_values                  → an_enumerator
  :description:
  - |-
    Return a new with the results of running block once for every value. This
    method does not change the keys.
  - If no block is given, an enumerator is returned instead.
  :examples: |
    h = { a: 1, b: 2, c: 3 }
    h.transform_values {|v| v * v + 1 }  #=> { a: 2, b: 5, c: 10 }
    h.transform_values(&:to_s)           #=> { a: "1", b: "2", c: "3" }
    h.transform_values.with_index {|v, i| "#{v}.#{i}" }
                                         #=> { a: "1.0", b: "2.1", c: "3.2" }
- :id: 63
  :callseqs:
  - transform_values! {|value| block } → hsh
  - transform_values!                  → an_enumerator
  :description:
  - |-
    Return a new with the results of running block once for every value. This
    method does not change the keys.
  - If no block is given, an enumerator is returned instead.
  :examples: |
    h = { a: 1, b: 2, c: 3 }
    h.transform_values! {|v| v * v + 1 }  #=> { a: 2, b: 5, c: 10 }
    h.transform_values!(&:to_s)           #=> { a: "1", b: "2", c: "3" }
    h.transform_values!.with_index {|v, i| "#{v}.#{i}" }
                                          #=> { a: "1.0", b: "2.1", c: "3.2" }
- :id: 64
  :callseqs:
  - update(other_hash)                                 → hsh
  - update(other_hash){|key, oldval, newval| block}    → hsh
  :description:
  - |-
    Adds the contents of other_hash to hsh.  If no block is
    specified, entries with duplicate keys are overwritten with the values from
    other_hash, otherwise the value of each duplicate key is
    determined by calling the block with the key, its value in hsh and
    its value in other_hash.
  :examples: |
    h1 = { "a" => 100, "b" => 200 }
    h2 = { "b" => 254, "c" => 300 }
    h1.merge!(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}

    h1 = { "a" => 100, "b" => 200 }
    h2 = { "b" => 254, "c" => 300 }
    h1.merge!(h2) { |key, v1, v2| v1 }
                    #=> {"a"=>100, "b"=>200, "c"=>300}
- :id: 65
  :callseqs:
  - value?(value)        → true or false
  :description:
  - |-
    Returns true if the given value is present for some key in
    hsh.
  :examples: |
    h = { "a" => 100, "b" => 200 }
    h.value?(100)   #=> true
    h.value?(999)   #=> false
- :id: 66
  :callseqs:
  - values    → array
  :description:
  - |-
    Returns a new array populated with the values from hsh. See also
    Hash#keys.
  :examples: |
    h = { "a" => 100, "b" => 200, "c" => 300 }
    h.values   #=> [100, 200, 300]
- :id: 67
  :callseqs:
  - values_at(key, ...)   → array
  :description:
  - |-
    Return an array containing the values associated with the given keys. Also
    see Hash.select.
  :examples: |
    h = { "cat" => "feline", "dog" => "canine", "cow" => "bovine" }
    h.values_at("cow", "cat")  #=> ["bovine", "feline"]
