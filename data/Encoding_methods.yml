---
:id: 16
:name: Encoding
:link: http://ruby-doc.org/core-2.4.1/Encoding.html
:methods:
- :id: 0
  :callseqs:
  - aliases → {"alias1" => "orig1", "alias2" => "orig2", ...}
  :description:
  - Returns the hash of available encoding alias and original encoding name.
  :examples: ''
- :id: 1
  :callseqs:
  - compatible?(obj1, obj2) → enc or nil
  :description:
  - Checks the compatibility of two objects.
  - |-
    If the objects are both strings they are compatible when they are
    concatenatable.  The encoding of the concatenated string will be returned
    if they are compatible, nil if they are not.
  - |-
    If the objects are non-strings their encodings are compatible when they
    have an encoding and:
  - Either encoding is US-ASCII compatible
  - One of the encodings is a 7-bit encoding
  :examples: |
    Encoding.compatible?("\xa1".force_encoding("iso-8859-1"), "b")
    #=> #<Encoding:ISO-8859-1>

    Encoding.compatible?(
      "\xa1".force_encoding("iso-8859-1"),
      "\xa1\xa1".force_encoding("euc-jp"))
    #=> nil
- :id: 2
  :callseqs:
  - default_external → enc
  :description:
  - Returns default external encoding.
  - |-
    The default external encoding is used by default for strings created from
    the following locations:
  - CSV
  - File data read from disk
  - SDBM
  - StringIO
  - Zlib::GzipReader
  - Zlib::GzipWriter
  - String#inspect
  - Regexp#inspect
  - |-
    While strings created from these locations will have this encoding, the
    encoding may not be valid.  Be sure to check String#valid_encoding?.
  - |-
    File data written to disk will be transcoded to the
    default external encoding when written.
  - The default external encoding is initialized by the locale or -E option.
  :examples: ''
- :id: 3
  :callseqs:
  - default_external = enc
  :description:
  - |-
    Sets default external encoding.  You should not set ::default_external in
    ruby code as strings created before changing the value may have a different
    encoding from strings created after the value was changed., instead you
    should use ruby -E to invoke ruby with the correct
    default_external.
  - |-
    See ::default_external for
    information on how the default external encoding is used.
  :examples: ''
- :id: 4
  :callseqs:
  - default_internal → enc
  :description:
  - |-
    Returns default internal encoding.  Strings will be transcoded to the
    default internal encoding in the following places if the default internal
    encoding is not nil:
  - CSV
  - Etc.sysconfdir and Etc.systmpdir
  - File data read from disk
  - File names from Dir
  - Integer#chr
  - String#inspect and Regexp#inspect
  - Strings returned from Readline
  - Strings returned from SDBM
  - Time#zone
  - Values from ENV
  - Values in ARGV including $PROGRAM_NAME
  - |-
    Additionally String#encode and String#encode! use the default
    internal encoding if no encoding is given.
  - |-
    The locale encoding (__ENCODING__), not ::default_internal, is
    used as the encoding of created strings.
  - |-
    ::default_internal is
    initialized by the source file's internal_encoding or -E option.
  :examples: ''
- :id: 5
  :callseqs:
  - default_internal = enc or nil
  :description:
  - |-
    Sets default internal encoding or removes default internal encoding when
    passed nil.  You should not set ::default_internal in
    ruby code as strings created before changing the value may have a different
    encoding from strings created after the change.  Instead you should use
    ruby -E to invoke ruby with the correct default_internal.
  - |-
    See ::default_internal for
    information on how the default internal encoding is used.
  :examples: ''
- :id: 6
  :callseqs:
  - find(string) → enc
  :description:
  - |-
    Search the encoding with specified name. name should be a
    string.
  - |-
    Names which this method accept are encoding names and aliases including
    following special aliases
  - default external encoding
  - default internal encoding
  - locale encoding
  - filesystem encoding
  - |-
    An ArgumentError is raised when no
    encoding with name. Only
    Encoding.find("internal") however returns nil when
    no encoding named “internal”, in other words, when Ruby has no default
    internal encoding.
  :examples: 'Encoding.find("US-ASCII")  #=> #<Encoding:US-ASCII>

'
- :id: 7
  :callseqs:
  - list → [enc1, enc2, ...]
  :description:
  - Returns the list of loaded encodings.
  :examples: |
    Encoding.list
    #=> [#<Encoding:ASCII-8BIT>, #<Encoding:UTF-8>,
          #<Encoding:ISO-2022-JP (dummy)>]

    Encoding.find("US-ASCII")
    #=> #<Encoding:US-ASCII>

    Encoding.list
    #=> [#<Encoding:ASCII-8BIT>, #<Encoding:UTF-8>,
          #<Encoding:US-ASCII>, #<Encoding:ISO-2022-JP (dummy)>]
- :id: 8
  :callseqs:
  - locale_charmap → string
  :description:
  - |-
    Returns the locale charmap name. It returns nil if no appropriate
    information.
  - |-
    The result is highly platform dependent. So ::find may cause an error. If you
    need some encoding object even for unknown locale, ::find("locale") can be used.
  :examples: |
    Debian GNU/Linux
      LANG=C
        Encoding.locale_charmap  #=> "ANSI_X3.4-1968"
      LANG=ja_JP.EUC-JP
        Encoding.locale_charmap  #=> "EUC-JP"

    SunOS 5
      LANG=C
        Encoding.locale_charmap  #=> "646"
      LANG=ja
        Encoding.locale_charmap  #=> "eucJP"
- :id: 9
  :callseqs:
  - name_list → ["enc1", "enc2", ...]
  :description:
  - Returns the list of available encoding names.
  :examples: ''
- :id: 10
  :callseqs:
  - ascii_compatible? → true or false
  :description:
  - Returns whether ASCII-compatible or not.
  :examples: |
    Encoding::UTF_8.ascii_compatible?     #=> true
    Encoding::UTF_16BE.ascii_compatible?  #=> false
- :id: 11
  :callseqs:
  - dummy? → true or false
  :description:
  - |-
    Returns true for dummy encodings. A dummy encoding is an encoding for which
    character handling is not properly implemented. It is used for stateful
    encodings.
  :examples: |
    Encoding::ISO_2022_JP.dummy?       #=> true
    Encoding::UTF_8.dummy?             #=> false
- :id: 12
  :callseqs:
  - inspect → string
  :description:
  - Returns a string which represents the encoding for programmers.
  :examples: |
    Encoding::UTF_8.inspect       #=> "#<Encoding:UTF-8>"
    Encoding::ISO_2022_JP.inspect #=> "#<Encoding:ISO-2022-JP (dummy)>"
- :id: 13
  :callseqs:
  - name → string
  :description:
  - Returns the name of the encoding.
  :examples: 'Encoding::UTF_8.name      #=> "UTF-8"

'
- :id: 14
  :callseqs:
  - names → array
  :description:
  - Returns the list of name and aliases of the encoding.
  :examples: 'Encoding::WINDOWS_31J.names  #=> ["Windows-31J", "CP932", "csWindows31J"]

'
- :id: 15
  :callseqs:
  - replicate(name) → encoding
  :description:
  - |-
    Returns a replicated encoding of enc whose name is name.
    The new encoding should have the same byte structure of enc. If
    name is used by another encoding, raise ArgumentError.
  :examples: ''
- :id: 16
  :callseqs:
  - to_s → string
  :description:
  - Returns the name of the encoding.
  :examples: 'Encoding::UTF_8.name      #=> "UTF-8"

'
