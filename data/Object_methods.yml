---
:id: 71
:name: Object
:link: http://ruby-doc.org/core-2.4.1/Object.html
:methods:
- :id: 0
  :callseqs:
  - obj !~ other  → true or false
  :description:
  - |-
    Returns true if two objects do not match (using the =~ method),
    otherwise false.
  :examples: ''
- :id: 1
  :callseqs:
  - obj <=> other → 0 or nil
  :description:
  - |-
    Returns 0 if obj and other are the same object or
    obj == other, otherwise nil.
  - |-
    The <=> is used by various methods to compare objects,
    for example Enumerable#sort, Enumerable#max etc.
  - |-
    Your implementation of <=> should return one of the
    following values: -1, 0, 1 or nil. -1 means self is smaller than other. 0
    means self is equal to other. 1 means self is bigger than other. Nil means
    the two values could not be compared.
  - |-
    When you define <=>, you can include Comparable to gain the methods
    <=, <, ==, >=,
    > and between?.
  :examples: ''
- :id: 2
  :callseqs:
  - obj === other   → true or false
  :description:
  - |-
    Case Equality – For class Object, effectively the
    same as calling #==, but typically overridden by descendants
    to provide meaningful semantics in case statements.
  :examples: ''
- :id: 3
  :callseqs:
  - obj =~ other  → nil
  :description:
  - |-
    Pattern Match—Overridden by descendants (notably Regexp and
    String) to provide meaningful pattern-match semantics.
  :examples: ''
- :id: 4
  :callseqs:
  - class    → class
  :description:
  - |-
    Returns the class of obj. This method must always be called with
    an explicit receiver, as class is also a reserved word in
    Ruby.
  :examples: |
    1.class      #=> Integer
    self.class   #=> Object
- :id: 5
  :callseqs:
  - 'clone(freeze: true) → an_object'
  :description:
  - |-
    Produces a shallow copy of obj—the instance variables of
    obj are copied, but not the objects they reference.
    clone copies the frozen (unless :freeze keyword argument is
    given with a false value) and tainted state of obj. See also the
    discussion under Object#dup.
  - |-
    This method may have class-specific behavior.  If so, that behavior will be
    documented under the #initialize_copy method of the class.
  :examples: |
    class Klass
       attr_accessor :str
    end
    s1 = Klass.new      #=> #<Klass:0x401b3a38>
    s1.str = "Hello"    #=> "Hello"
    s2 = s1.clone       #=> #<Klass:0x401b3998 @str="Hello">
    s2.str[1,4] = "i"   #=> "i"
    s1.inspect          #=> "#<Klass:0x401b3a38 @str=\"Hi\">"
    s2.inspect          #=> "#<Klass:0x401b3998 @str=\"Hi\">"
- :id: 6
  :callseqs:
  - define_singleton_method(symbol, method) → symbol
  - define_singleton_method(symbol) { block } → symbol
  :description:
  - |-
    Defines a singleton method in the receiver. The method parameter
    can be a Proc, a Method or an
    UnboundMethod object. If a block is specified, it is used as
    the method body.
  :examples: |
    class A
      class << self
        def class_name
          to_s
        end
      end
    end
    A.define_singleton_method(:who_am_i) do
      "I am: #{class_name}"
    end
    A.who_am_i   # ==> "I am: A"

    guy = "Bob"
    guy.define_singleton_method(:hello) { "#{self}: Hello there!" }
    guy.hello    #=>  "Bob: Hello there!"
- :id: 7
  :callseqs:
  - display(port=$>)    → nil
  :description:
  - |-
    Prints obj on the given port (default $>).
    Equivalent to:
  - 'For example:'
  - 'produces:'
  :examples: |
    def display(port=$>)
      port.write self
      nil
    end
    1.display
    "cat".display
    [ 4, 5, 6 ].display
    puts
- :id: 8
  :callseqs:
  - dup → an_object
  :description:
  - |-
    Produces a shallow copy of obj—the instance variables of
    obj are copied, but not the objects they reference.
    dup copies the tainted state of obj.
  - |-
    This method may have class-specific behavior.  If so, that behavior will be
    documented under the #initialize_copy method of the class.
  - |-
    In general, clone and dup may have different
    semantics in descendant classes. While clone is used to
    duplicate an object, including its internal state, dup
    typically uses the class of the descendant object to create the new
    instance.
  - |-
    When using dup, any modules that the
    object has been extended with will not be copied.
  :examples: |
    class Klass
      attr_accessor :str
    end

    module Foo
      def foo; 'foo'; end
    end

    s1 = Klass.new #=> #<Klass:0x401b3a38>
    s1.extend(Foo) #=> #<Klass:0x401b3a38>
    s1.foo #=> "foo"

    s2 = s1.clone #=> #<Klass:0x401b3a38>
    s2.foo #=> "foo"

    s3 = s1.dup #=> #<Klass:0x401b3a38>
    s3.foo #=> NoMethodError: undefined method `foo' for #<Klass:0x401b3a38>
- :id: 9
  :callseqs:
  - enum_for(method = :each, *args)                → enum
  - enum_for(method = :each, *args){|*args| block} → enum
  :description:
  - |-
    Creates a new Enumerator which will enumerate
    by calling method on obj, passing
    args if any.
  - |-
    If a block is given, it will be used to calculate the size of the
    enumerator without the need to iterate it (see Enumerator#size).
  - |-
    It is typical to call #to_enum
    when defining methods for a generic Enumerable, in case no block is passed.
  - 'Here is such an example, with parameter passing and a sizing block:'
  :examples: |
    str = "xyz"

    enum = str.enum_for(:each_byte)
    enum.each { |b| puts b }
    # => 120
    # => 121
    # => 122

    # protect an array from being modified by some_method
    a = [1, 2, 3]
    some_method(a.to_enum)
- :id: 10
  :callseqs:
  - obj == other        → true or false
  - equal?(other)   → true or false
  - eql?(other)     → true or false
  :description:
  - |-
    Equality — At the Object level, == returns
    true only if obj and other are the
    same object. Typically, this method is overridden in descendant classes to
    provide class-specific meaning.
  - |-
    Unlike ==, the equal? method should never be
    overridden by subclasses as it is used to determine object identity (that
    is, a.equal?(b) if and only if a is the same
    object as b):
  - |-
    The eql? method returns true if obj
    and other refer to the same hash key.  This is used by Hash to test members for equality.  For objects of
    class Object, eql? is synonymous with
    ==.  Subclasses normally continue this tradition by aliasing
    eql? to their overridden == method, but there are
    exceptions.  Numeric types, for example, perform type
    conversion across ==, but not across eql?, so:
  :examples: |
    obj = "a"
    other = obj.dup

    obj == other      #=> true
    obj.equal? other  #=> false
    obj.equal? obj    #=> true
    1 == 1.0     #=> true
    1.eql? 1.0   #=> false
- :id: 11
  :callseqs:
  - extend(module, ...)    → obj
  :description:
  - |-
    Adds to obj the instance methods from each module given as a
    parameter.
  :examples: |
    module Mod
      def hello
        "Hello from Mod.\n"
      end
    end

    class Klass
      def hello
        "Hello from Klass.\n"
      end
    end

    k = Klass.new
    k.hello         #=> "Hello from Klass.\n"
    k.extend(Mod)   #=> #<Klass:0x401b3bc8>
    k.hello         #=> "Hello from Mod.\n"
- :id: 12
  :callseqs:
  - freeze    → obj
  :description:
  - |-
    Prevents further modifications to obj. A RuntimeError
    will be raised if modification is attempted. There is no way to unfreeze a
    frozen object. See also Object#frozen?.
  - This method returns self.
  - 'produces:'
  - 'Objects of the following classes are always frozen: Integer, Float, Symbol.'
  :examples: |
    a = [ "a", "b", "c" ]
    a.freeze
    a << "z"
- :id: 13
  :callseqs:
  - frozen?    → true or false
  :description:
  - Returns the freeze status of obj.
  :examples: |
    a = [ "a", "b", "c" ]
    a.freeze    #=> ["a", "b", "c"]
    a.frozen?   #=> true
- :id: 14
  :callseqs:
  - hash    → integer
  :description:
  - |-
    Generates an Integer hash value for this object.
    This function must have the property that a.eql?(b) implies
    a.hash == b.hash.
  - |-
    The hash value is used along with eql? by the Hash class to determine if two objects reference the
    same hash key.  Any hash value that exceeds the capacity of an Integer will be truncated before being used.
  - |-
    The hash value for an object may not be identical across invocations or
    implementations of Ruby.  If you need a stable identifier across Ruby
    invocations and implementations you will need to generate one with a custom
    method.
  :examples: ''
- :id: 15
  :callseqs:
  - inspect   → string
  :description:
  - |-
    Returns a string containing a human-readable representation of
    obj. The default inspect shows the object’s class
    name, an encoding of the object id, and a list of the instance variables
    and their values (by calling inspect on each of them). User
    defined classes should override this method to provide a better
    representation of obj.  When overriding this method, it should
    return a string whose encoding is compatible with the default external
    encoding.
  :examples: |
    [ 1, 2, 3..4, 'five' ].inspect   #=> "[1, 2, 3..4, \"five\"]"
    Time.new.inspect                 #=> "2008-03-08 19:43:39 +0900"

    class Foo
    end
    Foo.new.inspect                  #=> "#<Foo:0x0300c868>"

    class Bar
      def initialize
        @bar = 1
      end
    end
    Bar.new.inspect                  #=> "#<Bar:0x0300c868 @bar=1>"
- :id: 16
  :callseqs:
  - instance_of?(class)    → true or false
  :description:
  - |-
    Returns true if obj is an instance of the given
    class. See also Object#kind_of?.
  :examples: |
    class A;     end
    class B < A; end
    class C < B; end

    b = B.new
    b.instance_of? A   #=> false
    b.instance_of? B   #=> true
    b.instance_of? C   #=> false
- :id: 17
  :callseqs:
  - instance_variable_defined?(symbol)    → true or false
  - instance_variable_defined?(string)    → true or false
  :description:
  - |-
    Returns true if the given instance variable is defined in
    obj. String arguments are converted to
    symbols.
  :examples: |
    class Fred
      def initialize(p1, p2)
        @a, @b = p1, p2
      end
    end
    fred = Fred.new('cat', 99)
    fred.instance_variable_defined?(:@a)    #=> true
    fred.instance_variable_defined?("@b")   #=> true
    fred.instance_variable_defined?("@c")   #=> false
- :id: 18
  :callseqs:
  - instance_variable_get(symbol)    → obj
  - instance_variable_get(string)    → obj
  :description:
  - |-
    Returns the value of the given instance variable, or nil if the instance
    variable is not set. The @ part of the variable name should be
    included for regular instance variables. Throws a NameError
    exception if the supplied symbol is not valid as an instance variable name.
    String arguments are converted to symbols.
  :examples: |
    class Fred
      def initialize(p1, p2)
        @a, @b = p1, p2
      end
    end
    fred = Fred.new('cat', 99)
    fred.instance_variable_get(:@a)    #=> "cat"
    fred.instance_variable_get("@b")   #=> 99
- :id: 19
  :callseqs:
  - instance_variable_set(symbol, obj)    → obj
  - instance_variable_set(string, obj)    → obj
  :description:
  - |-
    Sets the instance variable named by symbol to the given object,
    thereby frustrating the efforts of the class’s author to attempt to provide
    proper encapsulation. The variable does not have to exist prior to this
    call. If the instance variable name is passed as a string, that string is
    converted to a symbol.
  :examples: |
    class Fred
      def initialize(p1, p2)
        @a, @b = p1, p2
      end
    end
    fred = Fred.new('cat', 99)
    fred.instance_variable_set(:@a, 'dog')   #=> "dog"
    fred.instance_variable_set(:@c, 'cat')   #=> "cat"
    fred.inspect                             #=> "#<Fred:0x401b3da8 @a=\"dog\", @b=99, @c=\"cat\">"
- :id: 20
  :callseqs:
  - instance_variables    → array
  :description:
  - |-
    Returns an array of instance variable names for the receiver. Note that
    simply defining an accessor does not create the corresponding instance
    variable.
  :examples: |
    class Fred
      attr_accessor :a1
      def initialize
        @iv = 3
      end
    end
    Fred.new.instance_variables   #=> [:@iv]
- :id: 21
  :callseqs:
  - is_a?(class)       → true or false
  :description:
  - |-
    Returns true if class is the class of obj,
    or if class is one of the superclasses of obj or modules
    included in obj.
  :examples: |
    module M;    end
    class A
      include M
    end
    class B < A; end
    class C < B; end

    b = B.new
    b.is_a? A          #=> true
    b.is_a? B          #=> true
    b.is_a? C          #=> false
    b.is_a? M          #=> true

    b.kind_of? A       #=> true
    b.kind_of? B       #=> true
    b.kind_of? C       #=> false
    b.kind_of? M       #=> true
- :id: 22
  :callseqs:
  - itself → an_object
  :description:
  - Returns obj.
  :examples: |
    string = 'my string' #=> "my string"
    string.itself.object_id == string.object_id #=> true
- :id: 23
  :callseqs:
  - kind_of?(class)    → true or false
  :description:
  - |-
    Returns true if class is the class of obj,
    or if class is one of the superclasses of obj or modules
    included in obj.
  :examples: |
    module M;    end
    class A
      include M
    end
    class B < A; end
    class C < B; end

    b = B.new
    b.is_a? A          #=> true
    b.is_a? B          #=> true
    b.is_a? C          #=> false
    b.is_a? M          #=> true

    b.kind_of? A       #=> true
    b.kind_of? B       #=> true
    b.kind_of? C       #=> false
    b.kind_of? M       #=> true
- :id: 24
  :callseqs:
  - method(sym)    → method
  :description:
  - |-
    Looks up the named method as a receiver in obj, returning a
    Method object (or raising NameError). The
    Method object acts as a closure in obj’s object
    instance, so instance variables and the value of self remain
    available.
  :examples: |
    class Demo
      def initialize(n)
        @iv = n
      end
      def hello()
        "Hello, @iv = #{@iv}"
      end
    end

    k = Demo.new(99)
    m = k.method(:hello)
    m.call   #=> "Hello, @iv = 99"

    l = Demo.new('Fred')
    m = l.method("hello")
    m.call   #=> "Hello, @iv = Fred"
- :id: 25
  :callseqs:
  - methods(regular=true)    → array
  :description:
  - |-
    Returns a list of the names of public and protected methods of
    obj. This will include all the methods accessible in
    obj's ancestors. If the optional parameter is false,
    it returns an array of obj<i>'s public and protected singleton
    methods, the array will not include methods in modules included in
    <i>obj.
  :examples: |
    class Klass
      def klass_method()
      end
    end
    k = Klass.new
    k.methods[0..9]    #=> [:klass_method, :nil?, :===,
                       #    :==~, :!, :eql?
                       #    :hash, :<=>, :class, :singleton_class]
    k.methods.length   #=> 56

    k.methods(false)   #=> []
    def k.singleton_method; end
    k.methods(false)   #=> [:singleton_method]

    module M123; def m123; end end
    k.extend M123
    k.methods(false)   #=> [:singleton_method]
- :id: 26
  :callseqs:
  - nil?               → true or false
  :description:
  - |-
    Only the object nil responds true to
    nil?.
  :examples: |
    Object.new.nil?   #=> false
    nil.nil?          #=> true
- :id: 27
  :callseqs:
  - __id__       → integer
  - object_id    → integer
  :description:
  - Returns an integer identifier for obj.
  - |-
    The same number will be returned on all calls to object_id for
    a given object, and no two active objects will share an id.
  - |-
    Note: that some objects of builtin classes are reused for optimization.
    This is the case for immediate values and frozen string literals.
  - |-
    Immediate values are not passed by reference but are passed by value:
    nil, true, false, Fixnums, Symbols,
    and some Floats.
  :examples: |
    Object.new.object_id  == Object.new.object_id  # => false
    (21 * 2).object_id    == (21 * 2).object_id    # => true
    "hello".object_id     == "hello".object_id     # => false
    "hi".freeze.object_id == "hi".freeze.object_id # => true
- :id: 28
  :callseqs:
  - private_methods(all=true)   → array
  :description:
  - |-
    Returns the list of private methods accessible to obj. If the
    all parameter is set to false, only those methods in
    the receiver will be listed.
  :examples: ''
- :id: 29
  :callseqs:
  - protected_methods(all=true)   → array
  :description:
  - |-
    Returns the list of protected methods accessible to obj. If the
    all parameter is set to false, only those methods in
    the receiver will be listed.
  :examples: ''
- :id: 30
  :callseqs:
  - public_method(sym)    → method
  :description:
  - Similar to method, searches public method only.
  :examples: ''
- :id: 31
  :callseqs:
  - public_methods(all=true)   → array
  :description:
  - |-
    Returns the list of public methods accessible to obj. If the
    all parameter is set to false, only those methods in
    the receiver will be listed.
  :examples: ''
- :id: 32
  :callseqs:
  - public_send(symbol [, args...])  → obj
  - public_send(string [, args...])  → obj
  :description:
  - |-
    Invokes the method identified by symbol, passing it any arguments
    specified. Unlike send, #public_send calls public
    methods only. When the method is identified by a string, the string is
    converted to a symbol.
  :examples: '1.public_send(:puts, "hello")  # causes NoMethodError

'
- :id: 33
  :callseqs:
  - remove_instance_variable(symbol)    → obj
  :description:
  - |-
    Removes the named instance variable from obj, returning that
    variable's value.
  :examples: |
    class Dummy
      attr_reader :var
      def initialize
        @var = 99
      end
      def remove
        remove_instance_variable(:@var)
      end
    end
    d = Dummy.new
    d.var      #=> 99
    d.remove   #=> 99
    d.var      #=> nil
- :id: 34
  :callseqs:
  - respond_to?(symbol, include_all=false) → true or false
  - respond_to?(string, include_all=false) → true or false
  :description:
  - "Returns true if obj responds to the given method. \nPrivate and protected methods
    are included in the search only if the\noptional second parameter evaluates to
    true."
  - |-
    If the method is not implemented, as Process.fork on Windows, File.lchmod on GNU/Linux, etc., false
    is returned.
  - |-
    If the method is not defined, respond_to_missing? method is
    called and the result is returned.
  - |-
    When the method name parameter is given as a string, the string is
    converted to a symbol.
  :examples: ''
- :id: 35
  :callseqs:
  - respond_to_missing?(symbol, include_all) → true or false
  - respond_to_missing?(string, include_all) → true or false
  :description:
  - DO NOT USE THIS DIRECTLY.
  - |-
    Hook method to return whether the obj can respond to id
    method or not.
  - |-
    When the method name parameter is given as a string, the string is
    converted to a symbol.
  - |-
    See respond_to?, and the
    example of BasicObject.
  :examples: ''
- :id: 36
  :callseqs:
  - send(symbol [, args...])       → obj
  - __send__(symbol [, args...])   → obj
  - send(string [, args...])       → obj
  - __send__(string [, args...])   → obj
  :description:
  - |-
    Invokes the method identified by symbol, passing it any arguments
    specified. You can use __send__ if the name send
    clashes with an existing method in obj. When the method is
    identified by a string, the string is converted to a symbol.
  :examples: |
    class Klass
      def hello(*args)
        "Hello " + args.join(' ')
      end
    end
    k = Klass.new
    k.send :hello, "gentle", "readers"   #=> "Hello gentle readers"
- :id: 37
  :callseqs:
  - singleton_class    → class
  :description:
  - |-
    Returns the singleton class of obj.  This method creates a new
    singleton class if obj does not have one.
  - |-
    If obj is nil, true, or
    false, it returns NilClass, TrueClass, or FalseClass, respectively. If obj is an
    Integer, a Float or a
    Symbol, it raises a TypeError.
  :examples: |
    Object.new.singleton_class  #=> #<Class:#<Object:0xb7ce1e24>>
    String.singleton_class      #=> #<Class:String>
    nil.singleton_class         #=> NilClass
- :id: 38
  :callseqs:
  - singleton_method(sym)    → method
  :description:
  - Similar to method, searches singleton method only.
  :examples: |
    class Demo
      def initialize(n)
        @iv = n
      end
      def hello()
        "Hello, @iv = #{@iv}"
      end
    end

    k = Demo.new(99)
    def k.hi
      "Hi, @iv = #{@iv}"
    end
    m = k.singleton_method(:hi)
    m.call   #=> "Hi, @iv = 99"
    m = k.singleton_method(:hello) #=> NameError
- :id: 39
  :callseqs:
  - singleton_methods(all=true)    → array
  :description:
  - |-
    Returns an array of the names of singleton methods for obj. If the
    optional all parameter is true, the list will include methods in
    modules included in obj. Only public and protected singleton
    methods are returned.
  :examples: |
    module Other
      def three() end
    end

    class Single
      def Single.four() end
    end

    a = Single.new

    def a.one()
    end

    class << a
      include Other
      def two()
      end
    end

    Single.singleton_methods    #=> [:four]
    a.singleton_methods(false)  #=> [:two, :one]
    a.singleton_methods         #=> [:two, :one, :three]
- :id: 40
  :callseqs:
  - taint → obj
  :description:
  - Mark the object as tainted.
  - |-
    Objects that are marked as tainted will be restricted from various built-in
    methods. This is to prevent insecure data, such as command-line arguments
    or strings read from Kernel#gets,
    from inadvertently compromising the user’s system.
  - To check whether an object is tainted, use tainted?.
  - |-
    You should only untaint a tainted object if your code has inspected it and
    determined that it is safe. To do so use untaint.
  :examples: ''
- :id: 41
  :callseqs:
  - tainted?    → true or false
  :description:
  - Returns true if the object is tainted.
  - See taint for more information.
  :examples: ''
- :id: 42
  :callseqs:
  - tap{|x| block }    → obj
  :description:
  - |-
    Yields self to the block, and then returns self. The primary purpose of
    this method is to “tap into” a method chain, in order to perform operations
    on intermediate results within the chain.
  :examples: |
    (1..10)                  .tap {|x| puts "original: #{x}" }
      .to_a                  .tap {|x| puts "array:    #{x}" }
      .select {|x| x.even? } .tap {|x| puts "evens:    #{x}" }
      .map {|x| x*x }        .tap {|x| puts "squares:  #{x}" }
- :id: 43
  :callseqs:
  - to_enum(method = :each, *args)                 → enum
  - to_enum(method = :each, *args) {|*args| block} → enum
  :description:
  - |-
    Creates a new Enumerator which will enumerate
    by calling method on obj, passing
    args if any.
  - |-
    If a block is given, it will be used to calculate the size of the
    enumerator without the need to iterate it (see Enumerator#size).
  - |-
    It is typical to call #to_enum
    when defining methods for a generic Enumerable, in case no block is passed.
  - 'Here is such an example, with parameter passing and a sizing block:'
  :examples: |
    str = "xyz"

    enum = str.enum_for(:each_byte)
    enum.each { |b| puts b }
    # => 120
    # => 121
    # => 122

    # protect an array from being modified by some_method
    a = [1, 2, 3]
    some_method(a.to_enum)
- :id: 44
  :callseqs:
  - to_s    → string
  :description:
  - |-
    Returns a string representing obj. The default to_s
    prints the object’s class and an encoding of the object id. As a special
    case, the top-level object that is the initial execution context of Ruby
    programs returns “main”.
  :examples: ''
- :id: 45
  :callseqs:
  - trust    → obj
  :description:
  - Deprecated method that is equivalent to untaint.
  :examples: ''
- :id: 46
  :callseqs:
  - untaint    → obj
  :description:
  - Removes the tainted mark from the object.
  - See taint for more information.
  :examples: ''
- :id: 47
  :callseqs:
  - untrust → obj
  :description:
  - Deprecated method that is equivalent to taint.
  :examples: ''
- :id: 48
  :callseqs:
  - untrusted?    → true or false
  :description:
  - Deprecated method that is equivalent to tainted?.
  :examples: ''
