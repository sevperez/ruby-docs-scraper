---
:id: 79
:name: Process::UID
:link: http://ruby-doc.org/core-2.4.1/Process/UID.html
:methods:
- :id: 0
  :callseqs:
  - Process::UID.change_privilege(user)   → integer
  :description:
  - |-
    Change the current process’s real and effective user ID to that specified
    by user. Returns the new user ID. Not available on all platforms.
  :examples: |
    [Process.uid, Process.euid]          #=> [0, 0]
    Process::UID.change_privilege(31)    #=> 31
    [Process.uid, Process.euid]          #=> [31, 31]
- :id: 1
  :callseqs:
  - euid           → integer
  - Process::UID.eid       → integer
  - Process::Sys.geteuid   → integer
  :description:
  - Returns the effective user ID for this process.
  :examples: 'Process.euid   #=> 501

'
- :id: 2
  :callseqs:
  - Process::UID.from_name(name)   → uid
  :description:
  - |-
    Get the user ID by the name. If the user is not found,
    ArgumentError will be raised.
  :examples: |
    Process::UID.from_name("root") #=> 0
    Process::UID.from_name("nosuchuser") #=> can't find user for nosuchuser (ArgumentError)
- :id: 3
  :callseqs:
  - Process::UID.grant_privilege(user)   → integer
  - Process::UID.eid= user               → integer
  :description:
  - |-
    Set the effective user ID, and if possible, the saved user ID of the
    process to the given user. Returns the new effective user ID. Not
    available on all platforms.
  :examples: |
    [Process.uid, Process.euid]          #=> [0, 0]
    Process::UID.grant_privilege(31)     #=> 31
    [Process.uid, Process.euid]          #=> [0, 31]
- :id: 4
  :callseqs:
  - Process::UID.re_exchange   → integer
  :description:
  - |-
    Exchange real and effective user IDs and return the new effective user ID.
    Not available on all platforms.
  :examples: |
    [Process.uid, Process.euid]   #=> [0, 31]
    Process::UID.re_exchange      #=> 0
    [Process.uid, Process.euid]   #=> [31, 0]
- :id: 5
  :callseqs:
  - Process::UID.re_exchangeable?   → true or false
  :description:
  - |-
    Returns true if the real and effective user IDs of a process
    may be exchanged on the current platform.
  :examples: ''
- :id: 6
  :callseqs:
  - uid           → integer
  - Process::UID.rid      → integer
  - Process::Sys.getuid   → integer
  :description:
  - Returns the (real) user ID of this process.
  :examples: 'Process.uid   #=> 501

'
- :id: 7
  :callseqs:
  - Process::UID.sid_available?   → true or false
  :description:
  - |-
    Returns true if the current platform has saved user ID
    functionality.
  :examples: ''
- :id: 8
  :callseqs:
  - Process::UID.switch              → integer
  - Process::UID.switch {|| block}   → object
  :description:
  - |-
    Switch the effective and real user IDs of the current process. If a
    block is given, the user IDs will be switched back after the block
    is executed. Returns the new effective user ID if called without a block,
    and the return value of the block if one is given.
  :examples: ''
