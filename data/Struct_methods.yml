---
:id: 101
:name: Struct
:link: http://ruby-doc.org/core-2.4.1/Struct.html
:methods:
- :id: 0
  :callseqs:
  - new([class_name] [, member_name]+)                        → StructClass
  - new([class_name] [, member_name]+) {|StructClass| block } → StructClass
  - new(value, ...)                                      → object
  - StructClass[value, ...]                                          → object
  :description:
  - |-
    The first two forms are used to create a new Struct subclass class_name that can
    contain a value for each member_name.  This subclass can be
    used to create instances of the structure like any other Class.
  - |-
    If the class_name is omitted an anonymous structure class will
    be created.  Otherwise, the name of this struct will appear as a constant
    in class Struct, so it must be unique for all
    Structs in the system and must start with a capital letter.  Assigning a
    structure class to a constant also gives the class the name of the
    constant.
  - |-
    If a block is given it will be evaluated in the context of
    StructClass, passing the created class as a parameter:
  - |-
    This is the recommended way to customize a struct.  Subclassing an
    anonymous struct creates an extra anonymous class that will never be used.
  - |-
    The last two forms create a new instance of a struct subclass.  The number
    of value parameters must be less than or equal to the number
    of attributes defined for the structure.  Unset parameters default to
    nil. Passing more parameters than number of attributes will
    raise an ArgumentError.
  :examples: |
    # Create a structure with a name under Struct
    Struct.new("Customer", :name, :address)
    #=> Struct::Customer
    Struct::Customer.new("Dave", "123 Main")
    #=> #<struct Struct::Customer name="Dave", address="123 Main">

    # Create a structure named by its constant
    Customer = Struct.new(:name, :address)
    #=> Customer
    Customer.new("Dave", "123 Main")
    #=> #<struct Customer name="Dave", address="123 Main">
    Customer = Struct.new(:name, :address) do
      def greeting
        "Hello #{name}!"
      end
    end
    Customer.new("Dave", "123 Main").greeting  #=> "Hello Dave!"
    Customer = Struct.new(:name, :address)
    Customer.new("Dave", "123 Main")
    #=> #<struct Customer name="Dave", address="123 Main">
    Customer["Dave"]
    #=> #<struct Customer name="Dave", address=nil>
- :id: 1
  :callseqs:
  - struct == other     → true or false
  :description:
  - |-
    Equality—Returns true if other has the same
    struct subclass and has equal member values (according to Object#==).
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe   = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joejr = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    jane  = Customer.new("Jane Doe", "456 Elm, Anytown NC", 12345)
    joe == joejr   #=> true
    joe == jane    #=> false
- :id: 2
  :callseqs:
  - struct[member]   → object
  - struct[index]    → object
  :description:
  - |-
    Attribute Reference—Returns the value of the given struct
    member or the member at the given index.   Raises
    NameError if the member does not
    exist and IndexError if the
    index is out of range.
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)

    joe["name"]   #=> "Joe Smith"
    joe[:name]    #=> "Joe Smith"
    joe[0]        #=> "Joe Smith"
- :id: 3
  :callseqs:
  - struct[member] = obj    → obj
  - struct[index]  = obj    → obj
  :description:
  - |-
    Attribute Assignment—Sets the value of the given struct member
    or the member at the given index.  Raises NameError if the member does not
    exist and IndexError if the
    index is out of range.
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)

    joe["name"] = "Luke"
    joe[:zip]   = "90210"

    joe.name   #=> "Luke"
    joe.zip    #=> "90210"
- :id: 4
  :callseqs:
  - dig(key, ...)              → object
  :description:
  - |-
    Extracts the nested value specified by the sequence of key
    objects by calling dig at each step, returning
    nil if any intermediate step is nil.
  :examples: |
    Foo = Struct.new(:a)
    f = Foo.new(Foo.new({b: [1, 2, 3]}))

    f.dig(:a, :a, :b, 0)    # => 1
    f.dig(:b, 0)            # => nil
    f.dig(:a, :a, :b, :c)   # TypeError: no implicit conversion of Symbol into Integer
- :id: 5
  :callseqs:
  - each {|obj| block }  → struct
  - each                 → enumerator
  :description:
  - |-
    Yields the value of each struct member in order.  If no block is given an
    enumerator is returned.
  - 'Produces:'
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.each {|x| puts(x) }
- :id: 6
  :callseqs:
  - each_pair {|sym, obj| block }     → struct
  - each_pair                         → enumerator
  :description:
  - |-
    Yields the name and value of each struct member in order.  If no block is
    given an enumerator is returned.
  - 'Produces:'
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.each_pair {|name, value| puts("#{name} => #{value}") }
- :id: 7
  :callseqs:
  - eql?(other)   → true or false
  :description:
  - |-
    Hash equality---other and
    struct refer to the same hash key if they have the same struct
    subclass and have equal member values (according to Object#eql?).
  :examples: ''
- :id: 8
  :callseqs:
  - hash   → integer
  :description:
  - Returns a hash value based on this struct’s contents.
  - See also Object#hash.
  :examples: ''
- :id: 9
  :callseqs:
  - to_s      → string
  - inspect   → string
  :description:
  - Returns a description of this struct as a string.
  :examples: ''
- :id: 10
  :callseqs:
  - length    → integer
  :description:
  - Returns the number of struct members.
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.length   #=> 3
- :id: 11
  :callseqs:
  - members    → array
  :description:
  - 'Returns the struct members as an array of symbols:'
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.members   #=> [:name, :address, :zip]
- :id: 12
  :callseqs:
  - select {|obj| block }  → array
  - select                 → enumerator
  :description:
  - |-
    Yields each member value from the struct to the block and returns an Array containing the member values from the
    struct for which the given block returns a true value
    (equivalent to Enumerable#select).
  :examples: |
    Lots = Struct.new(:a, :b, :c, :d, :e, :f)
    l = Lots.new(11, 22, 33, 44, 55, 66)
    l.select {|v| v.even? }   #=> [22, 44, 66]
- :id: 13
  :callseqs:
  - size      → integer
  :description:
  - Returns the number of struct members.
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.length   #=> 3
- :id: 14
  :callseqs:
  - to_a     → array
  :description:
  - Returns the values for this struct as an Array.
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.to_a[1]   #=> "123 Maple, Anytown NC"
- :id: 15
  :callseqs:
  - to_h     → hash
  :description:
  - |-
    Returns a Hash containing the names and values for
    the struct’s members.
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.to_h[:address]   #=> "123 Maple, Anytown NC"
- :id: 16
  :callseqs:
  - to_s()
  :description: []
  :examples: ''
- :id: 17
  :callseqs:
  - values   → array
  :description:
  - Returns the values for this struct as an Array.
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.to_a[1]   #=> "123 Maple, Anytown NC"
- :id: 18
  :callseqs:
  - values_at(selector, ...)  → array
  :description:
  - |-
    Returns the struct member values for each selector as an Array.  A selector may be either an Integer offset or a Range
    of offsets (as in Array#values_at).
  :examples: |
    Customer = Struct.new(:name, :address, :zip)
    joe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)
    joe.values_at(0, 2)   #=> ["Joe Smith", 12345]
