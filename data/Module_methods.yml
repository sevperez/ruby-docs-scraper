---
:id: 64
:name: Module
:link: http://ruby-doc.org/core-2.4.1/Module.html
:methods:
- :id: 0
  :callseqs:
  - constants   → array
  - constants(inherited)   → array
  :description:
  - |-
    In the first form, returns an array of the names of all constants
    accessible from the point of call. This list includes the names of all
    modules and classes defined in the global scope.
  - The second form calls the instance method constants.
  :examples: |
    Module.constants.first(4)
       # => [:ARGF, :ARGV, :ArgumentError, :Array]

    Module.constants.include?(:SEEK_SET)   # => false

    class IO
      Module.constants.include?(:SEEK_SET) # => true
    end
- :id: 1
  :callseqs:
  - nesting    → array
  :description:
  - Returns the list of Modules nested at the point of call.
  :examples: |
    module M1
      module M2
        $a = Module.nesting
      end
    end
    $a           #=> [M1::M2, M1]
    $a[0].name   #=> "M1::M2"
- :id: 2
  :callseqs:
  - new                  → mod
  - new {|mod| block }   → mod
  :description:
  - |-
    Creates a new anonymous module. If a block is given, it is passed the
    module object, and the block is evaluated in the context of this module
    like module_eval.
  - |-
    Assign the module to a constant (name starting uppercase) if you want to
    treat it like a regular module.
  :examples: |
    fred = Module.new do
      def meth1
        "hello"
      end
      def meth2
        "bye"
      end
    end
    a = "my string"
    a.extend(fred)   #=> "my string"
    a.meth1          #=> "hello"
    a.meth2          #=> "bye"
- :id: 3
  :callseqs:
  - used_modules → array
  :description:
  - |-
    Returns an array of all modules used in the current scope. The ordering of
    modules in the resulting array is not defined.
  - 'produces:'
  :examples: |
    module A
      refine Object do
      end
    end

    module B
      refine Object do
      end
    end

    using A
    using B
    p Module.used_modules
    [B, A]
- :id: 4
  :callseqs:
  - mod < other   →  true, false, or nil
  :description:
  - |-
    Returns true if mod is a subclass of other. Returns
    nil if there’s no relationship between the two. (Think of the
    relationship in terms of the class definition: “class A < B” implies “A
    < B”.)
  :examples: ''
- :id: 5
  :callseqs:
  - mod <= other   →  true, false, or nil
  :description:
  - |-
    Returns true if mod is a subclass of other or is the same
    as other. Returns nil if there’s no relationship
    between the two. (Think of the relationship in terms of the class
    definition: “class A < B” implies “A < B”.)
  :examples: ''
- :id: 6
  :callseqs:
  - module <=> other_module   → -1, 0, +1, or nil
  :description:
  - |-
    Comparison—Returns -1, 0, +1 or nil depending on whether
    module includes other_module, they are the same,
    or if module is included by other_module.
  - |-
    Returns nil if module has no relationship with
    other_module, if other_module is not a module, or
    if the two values are incomparable.
  :examples: ''
- :id: 7
  :callseqs:
  - obj == other        → true or false
  - equal?(other)   → true or false
  - eql?(other)     → true or false
  :description:
  - |-
    Equality — At the Object level, == returns
    true only if obj and other are the
    same object. Typically, this method is overridden in descendant classes to
    provide class-specific meaning.
  - |-
    Unlike ==, the equal? method should never be
    overridden by subclasses as it is used to determine object identity (that
    is, a.equal?(b) if and only if a is the same
    object as b):
  - |-
    The eql? method returns true if obj
    and other refer to the same hash key.  This is used by Hash to test members for equality.  For objects of
    class Object, eql? is synonymous with
    ==.  Subclasses normally continue this tradition by aliasing
    eql? to their overridden == method, but there are
    exceptions.  Numeric types, for example, perform type
    conversion across ==, but not across eql?, so:
  :examples: |
    obj = "a"
    other = obj.dup

    obj == other      #=> true
    obj.equal? other  #=> false
    obj.equal? obj    #=> true
    1 == 1.0     #=> true
    1.eql? 1.0   #=> false
- :id: 8
  :callseqs:
  - mod === obj    → true or false
  :description:
  - |-
    Case Equality—Returns true if obj is an instance of
    mod or an instance of one of mod’s descendants. Of
    limited use for modules, but can be used in case statements to
    classify objects by class.
  :examples: ''
- :id: 9
  :callseqs:
  - mod > other   →  true, false, or nil
  :description:
  - |-
    Returns true if mod is an ancestor of other. Returns
    nil if there’s no relationship between the two. (Think of the
    relationship in terms of the class definition: “class A < B” implies “B
    > A”.)
  :examples: ''
- :id: 10
  :callseqs:
  - mod >= other   →  true, false, or nil
  :description:
  - |-
    Returns true if mod is an ancestor of other, or the two
    modules are the same. Returns nil if there’s no relationship
    between the two. (Think of the relationship in terms of the class
    definition: “class A < B” implies “B > A”.)
  :examples: ''
- :id: 11
  :callseqs:
  - ancestors → array
  :description:
  - |-
    Returns a list of modules included/prepended in mod (including
    mod itself).
  :examples: |
    module Mod
      include Math
      include Comparable
      prepend Enumerable
    end

    Mod.ancestors        #=> [Enumerable, Mod, Comparable, Math]
    Math.ancestors       #=> [Math]
    Enumerable.ancestors #=> [Enumerable]
- :id: 12
  :callseqs:
  - autoload(module, filename)   → nil
  :description:
  - |-
    Registers filename to be loaded (using
    Kernel::require) the first time that module (which
    may be a String or a symbol) is accessed in the namespace of
    mod.
  :examples: |
    module A
    end
    A.autoload(:B, "b")
    A::B.doit            # autoloads "b"
- :id: 13
  :callseqs:
  - autoload?(name)   → String or nil
  :description:
  - |-
    Returns filename to be loaded if name is registered as
    autoload in the namespace of mod.
  :examples: |
    module A
    end
    A.autoload(:B, "b")
    A.autoload?(:B)            #=> "b"
- :id: 14
  :callseqs:
  - class_eval(string [, filename [, lineno]])  → obj
  - class_eval {|mod| block }                   → obj
  :description:
  - |-
    Evaluates the string or block in the context of mod, except that
    when a block is given, constant/class variable lookup is not affected. This
    can be used to add methods to a class. module_eval returns the
    result of evaluating its argument. The optional filename and
    lineno parameters set the text for error messages.
  - 'produces:'
  :examples: |
    class Thing
    end
    a = %q{def hello() "Hello there!" end}
    Thing.module_eval(a)
    puts Thing.new.hello()
    Thing.module_eval("invalid code", "dummy", 123)
- :id: 15
  :callseqs:
  - class_exec(arg...) {|var...| block }        → obj
  :description:
  - |-
    Evaluates the given block in the context of the class/module. The method
    defined in the block will belong to the receiver. Any arguments passed to
    the method will be passed to the block. This can be used if the block needs
    to access instance variables.
  - 'produces:'
  :examples: |
    class Thing
    end
    Thing.class_exec{
      def hello() "Hello there!" end
    }
    puts Thing.new.hello()
    Hello there!
- :id: 16
  :callseqs:
  - class_variable_defined?(symbol)    → true or false
  - class_variable_defined?(string)    → true or false
  :description:
  - |-
    Returns true if the given class variable is defined in
    obj. String arguments are converted to
    symbols.
  :examples: |
    class Fred
      @@foo = 99
    end
    Fred.class_variable_defined?(:@@foo)    #=> true
    Fred.class_variable_defined?(:@@bar)    #=> false
- :id: 17
  :callseqs:
  - class_variable_get(symbol)    → obj
  - class_variable_get(string)    → obj
  :description:
  - |-
    Returns the value of the given class variable (or throws a
    NameError exception). The @@ part of the variable
    name should be included for regular class variables. String arguments are converted to symbols.
  :examples: |
    class Fred
      @@foo = 99
    end
    Fred.class_variable_get(:@@foo)     #=> 99
- :id: 18
  :callseqs:
  - class_variable_set(symbol, obj)    → obj
  - class_variable_set(string, obj)    → obj
  :description:
  - |-
    Sets the class variable named by symbol to the given object. If
    the class variable name is passed as a string, that string is converted to
    a symbol.
  :examples: |
    class Fred
      @@foo = 99
      def foo
        @@foo
      end
    end
    Fred.class_variable_set(:@@foo, 101)     #=> 101
    Fred.new.foo                             #=> 101
- :id: 19
  :callseqs:
  - class_variables(inherit=true)    → array
  :description:
  - |-
    Returns an array of the names of class variables in mod. This
    includes the names of class variables in any included modules, unless the
    inherit parameter is set to false.
  :examples: |
    class One
      @@var1 = 1
    end
    class Two < One
      @@var2 = 2
    end
    One.class_variables          #=> [:@@var1]
    Two.class_variables          #=> [:@@var2, :@@var1]
    Two.class_variables(false)   #=> [:@@var2]
- :id: 20
  :callseqs:
  - const_defined?(sym, inherit=true)   → true or false
  - const_defined?(str, inherit=true)   → true or false
  :description:
  - |-
    Says whether mod or its ancestors have a constant with the given
    name:
  - |-
    If mod is a Module, additionally Object
    and its ancestors are checked:
  - |-
    In each of the checked classes or modules, if the constant is not present
    but there is an autoload for it, true is returned directly
    without autoloading:
  - |-
    If the constant is not found the callback const_missing is
    not called and the method returns false.
  - |-
    If inherit is false, the lookup only checks the constants in
    the receiver:
  - In this case, the same logic for autoloading applies.
  - |-
    If the argument is not a valid constant name a NameError is
    raised with the message “wrong constant name name”:
  :examples: |
    Float.const_defined?(:EPSILON)      #=> true, found in Float itself
    Float.const_defined?("String")      #=> true, found in Object (ancestor)
    BasicObject.const_defined?(:Hash)   #=> false
    Math.const_defined?(:String)   #=> true, found in Object
    module Admin
      autoload :User, 'admin/user'
    end
    Admin.const_defined?(:User)   #=> true
    IO.const_defined?(:SYNC)          #=> true, found in File::Constants (ancestor)
    IO.const_defined?(:SYNC, false)   #=> false, not found in IO itself
    Hash.const_defined? 'foobar'   #=> NameError: wrong constant name foobar
- :id: 21
  :callseqs:
  - const_get(sym, inherit=true)    → obj
  - const_get(str, inherit=true)    → obj
  :description:
  - |-
    Checks for a constant with the given name in mod. If
    inherit is set, the lookup will also search the ancestors (and
    Object if mod is a Module).
  - |-
    The value of the constant is returned if a definition is found, otherwise a
    NameError is raised.
  - |-
    This method will recursively look up constant names if a namespaced class
    name is provided.  For example:
  - 'The inherit flag is respected on each lookup.  For example:'
  - |-
    If the argument is not a valid constant name a NameError will
    be raised with a warning “wrong constant name”.
  :examples: |
    Math.const_get(:PI)   #=> 3.14159265358979
    module Foo; class Bar; end end
    Object.const_get 'Foo::Bar'
    module Foo
      class Bar
        VAL = 10
      end

      class Baz < Bar; end
    end

    Object.const_get 'Foo::Baz::VAL'         # => 10
    Object.const_get 'Foo::Baz::VAL', false  # => NameError
    Object.const_get 'foobar' #=> NameError: wrong constant name foobar
- :id: 22
  :callseqs:
  - const_missing(sym)    → obj
  :description:
  - |-
    Invoked when a reference is made to an undefined constant in mod.
    It is passed a symbol for the undefined constant, and returns a value to be
    used for that constant. The following code is an example of the same:
  - |-
    In the next example when a reference is made to an undefined constant, it
    attempts to load a file whose name is the lowercase version of the constant
    (thus class Fred is assumed to be in file
    fred.rb).  If found, it returns the loaded class. It therefore
    implements an autoload feature similar to Kernel#autoload and #autoload.
  :examples: |
    def Foo.const_missing(name)
      name # return the constant name as Symbol
    end

    Foo::UNDEFINED_CONST    #=> :UNDEFINED_CONST: symbol returned
    def Object.const_missing(name)
      @looked_for ||= {}
      str_name = name.to_s
      raise "Class not found: #{name}" if @looked_for[str_name]
      @looked_for[str_name] = 1
      file = str_name.downcase
      require file
      klass = const_get(name)
      return klass if klass
      raise "Class not found: #{name}"
    end
- :id: 23
  :callseqs:
  - const_set(sym, obj)    → obj
  - const_set(str, obj)    → obj
  :description:
  - |-
    Sets the named constant to the given object, returning that object. Creates
    a new constant if no constant with the given name previously existed.
  - |-
    If sym or str is not a valid constant name a
    NameError will be raised with a warning “wrong constant name”.
  :examples: |
    Math.const_set("HIGH_SCHOOL_PI", 22.0/7.0)   #=> 3.14285714285714
    Math::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968
    Object.const_set('foobar', 42) #=> NameError: wrong constant name foobar
- :id: 24
  :callseqs:
  - constants(inherit=true)    → array
  :description:
  - |-
    Returns an array of the names of the constants accessible in mod.
    This includes the names of constants in any included modules (example at
    start of section), unless the inherit parameter is set to
    false.
  - |-
    The implementation makes no guarantees about the order in which the
    constants are yielded.
  - Also see Module::const_defined?.
  :examples: |
    IO.constants.include?(:SYNC)        #=> true
    IO.constants(false).include?(:SYNC) #=> false
- :id: 25
  :callseqs:
  - deprecate_constant(symbol, ...)    => mod
  :description:
  - Makes a list of existing constants deprecated.
  :examples: ''
- :id: 26
  :callseqs:
  - freeze       → mod
  :description:
  - Prevents further modifications to mod.
  - This method returns self.
  :examples: ''
- :id: 27
  :callseqs:
  - include(module, ...)    → self
  :description:
  - |-
    Invokes Module.append_features on each parameter in reverse
    order.
  :examples: ''
- :id: 28
  :callseqs:
  - include?(module)    → true or false
  :description:
  - |-
    Returns true if module is included in mod or
    one of mod's ancestors.
  :examples: |
    module A
    end
    class B
      include A
    end
    class C < B
    end
    B.include?(A)   #=> true
    C.include?(A)   #=> true
    A.include?(A)   #=> false
- :id: 29
  :callseqs:
  - included_modules → array
  :description:
  - Returns the list of modules included in mod.
  :examples: |
    module Mixin
    end

    module Outer
      include Mixin
    end

    Mixin.included_modules   #=> []
    Outer.included_modules   #=> [Mixin]
- :id: 30
  :callseqs:
  - inspect()
  :description: []
  :examples: ''
- :id: 31
  :callseqs:
  - instance_method(symbol)   → unbound_method
  :description:
  - |-
    Returns an UnboundMethod representing the given instance
    method in mod.
  - 'produces:'
  :examples: |
    class Interpreter
      def do_a() print "there, "; end
      def do_d() print "Hello ";  end
      def do_e() print "!\n";     end
      def do_v() print "Dave";    end
      Dispatcher = {
        "a" => instance_method(:do_a),
        "d" => instance_method(:do_d),
        "e" => instance_method(:do_e),
        "v" => instance_method(:do_v)
      }
      def interpret(string)
        string.each_char {|b| Dispatcher[b].bind(self).call }
      end
    end

    interpreter = Interpreter.new
    interpreter.interpret('dave')
    Hello there, Dave!
- :id: 32
  :callseqs:
  - instance_methods(include_super=true)   → array
  :description:
  - |-
    Returns an array containing the names of the public and protected instance
    methods in the receiver. For a module, these are the public and protected
    methods; for a class, they are the instance (not singleton) methods. If the
    optional parameter is false, the methods of any ancestors are
    not included.
  :examples: |
    module A
      def method1()  end
    end
    class B
      include A
      def method2()  end
    end
    class C < B
      def method3()  end
    end

    A.instance_methods(false)                   #=> [:method1]
    B.instance_methods(false)                   #=> [:method2]
    B.instance_methods(true).include?(:method1) #=> true
    C.instance_methods(false)                   #=> [:method3]
    C.instance_methods.include?(:method2)       #=> true
- :id: 33
  :callseqs:
  - method_defined?(symbol)    → true or false
  - method_defined?(string)    → true or false
  :description:
  - |-
    Returns true if the named method is defined by mod
    (or its included modules and, if mod is a class, its ancestors).
    Public and protected methods are matched. String
    arguments are converted to symbols.
  :examples: |
    module A
      def method1()  end
      def protected_method1()  end
      protected :protected_method1
    end
    class B
      def method2()  end
      def private_method2()  end
      private :private_method2
    end
    class C < B
      include A
      def method3()  end
    end

    A.method_defined? :method1              #=> true
    C.method_defined? "method1"             #=> true
    C.method_defined? "method2"             #=> true
    C.method_defined? "method3"             #=> true
    C.method_defined? "protected_method1"   #=> true
    C.method_defined? "method4"             #=> false
    C.method_defined? "private_method2"     #=> false
- :id: 34
  :callseqs:
  - module_eval(string [, filename [, lineno]]) → obj
  - module_eval {|mod| block }                  → obj
  :description:
  - |-
    Evaluates the string or block in the context of mod, except that
    when a block is given, constant/class variable lookup is not affected. This
    can be used to add methods to a class. module_eval returns the
    result of evaluating its argument. The optional filename and
    lineno parameters set the text for error messages.
  - 'produces:'
  :examples: |
    class Thing
    end
    a = %q{def hello() "Hello there!" end}
    Thing.module_eval(a)
    puts Thing.new.hello()
    Thing.module_eval("invalid code", "dummy", 123)
- :id: 35
  :callseqs:
  - module_exec(arg...) {|var...| block }       → obj
  :description:
  - |-
    Evaluates the given block in the context of the class/module. The method
    defined in the block will belong to the receiver. Any arguments passed to
    the method will be passed to the block. This can be used if the block needs
    to access instance variables.
  - 'produces:'
  :examples: |
    class Thing
    end
    Thing.class_exec{
      def hello() "Hello there!" end
    }
    puts Thing.new.hello()
    Hello there!
- :id: 36
  :callseqs:
  - name    → string
  :description:
  - |-
    Returns the name of the module mod.  Returns nil for anonymous
    modules.
  :examples: ''
- :id: 37
  :callseqs:
  - prepend(module, ...)    → self
  :description:
  - |-
    Invokes Module.prepend_features on each parameter in reverse
    order.
  :examples: ''
- :id: 38
  :callseqs:
  - private_class_method(symbol, ...)   → mod
  - private_class_method(string, ...)   → mod
  :description:
  - |-
    Makes existing class methods private. Often used to hide the default
    constructor new.
  - String arguments are converted to symbols.
  :examples: |
    class SimpleSingleton  # Not thread safe
      private_class_method :new
      def SimpleSingleton.create(*args, &block)
        @me = new(*args, &block) if ! @me
        @me
      end
    end
- :id: 39
  :callseqs:
  - private_constant(symbol, ...)    => mod
  :description:
  - Makes a list of existing constants private.
  :examples: ''
- :id: 40
  :callseqs:
  - private_instance_methods(include_super=true)    → array
  :description:
  - |-
    Returns a list of the private instance methods defined in mod. If
    the optional parameter is false, the methods of any ancestors
    are not included.
  :examples: |
    module Mod
      def method1()  end
      private :method1
      def method2()  end
    end
    Mod.instance_methods           #=> [:method2]
    Mod.private_instance_methods   #=> [:method1]
- :id: 41
  :callseqs:
  - private_method_defined?(symbol)    → true or false
  - private_method_defined?(string)    → true or false
  :description:
  - |-
    Returns true if the named private method is defined by _ mod_
    (or its included modules and, if mod is a class, its ancestors).
    String arguments are converted to symbols.
  :examples: |
    module A
      def method1()  end
    end
    class B
      private
      def method2()  end
    end
    class C < B
      include A
      def method3()  end
    end

    A.method_defined? :method1            #=> true
    C.private_method_defined? "method1"   #=> false
    C.private_method_defined? "method2"   #=> true
    C.method_defined? "method2"           #=> false
- :id: 42
  :callseqs:
  - protected_instance_methods(include_super=true)   → array
  :description:
  - |-
    Returns a list of the protected instance methods defined in mod.
    If the optional parameter is false, the methods of any
    ancestors are not included.
  :examples: ''
- :id: 43
  :callseqs:
  - protected_method_defined?(symbol)   → true or false
  - protected_method_defined?(string)   → true or false
  :description:
  - |-
    Returns true if the named protected method is defined by
    mod (or its included modules and, if mod is a class, its
    ancestors). String arguments are converted to
    symbols.
  :examples: |
    module A
      def method1()  end
    end
    class B
      protected
      def method2()  end
    end
    class C < B
      include A
      def method3()  end
    end

    A.method_defined? :method1              #=> true
    C.protected_method_defined? "method1"   #=> false
    C.protected_method_defined? "method2"   #=> true
    C.method_defined? "method2"             #=> true
- :id: 44
  :callseqs:
  - public_class_method(symbol, ...)    → mod
  - public_class_method(string, ...)    → mod
  :description:
  - Makes a list of existing class methods public.
  - String arguments are converted to symbols.
  :examples: ''
- :id: 45
  :callseqs:
  - public_constant(symbol, ...)    => mod
  :description:
  - Makes a list of existing constants public.
  :examples: ''
- :id: 46
  :callseqs:
  - public_instance_method(symbol)   → unbound_method
  :description:
  - Similar to instance_method, searches public method only.
  :examples: ''
- :id: 47
  :callseqs:
  - public_instance_methods(include_super=true)   → array
  :description:
  - |-
    Returns a list of the public instance methods defined in mod. If
    the optional parameter is false, the methods of any ancestors
    are not included.
  :examples: ''
- :id: 48
  :callseqs:
  - public_method_defined?(symbol)   → true or false
  - public_method_defined?(string)   → true or false
  :description:
  - |-
    Returns true if the named public method is defined by
    mod (or its included modules and, if mod is a class, its
    ancestors). String arguments are converted to
    symbols.
  :examples: |
    module A
      def method1()  end
    end
    class B
      protected
      def method2()  end
    end
    class C < B
      include A
      def method3()  end
    end

    A.method_defined? :method1           #=> true
    C.public_method_defined? "method1"   #=> true
    C.public_method_defined? "method2"   #=> false
    C.method_defined? "method2"          #=> true
- :id: 49
  :callseqs:
  - remove_class_variable(sym)    → obj
  :description:
  - |-
    Removes the definition of the sym, returning that constant's
    value.
  - 'produces:'
  :examples: |
    class Dummy
      @@var = 99
      puts @@var
      remove_class_variable(:@@var)
      p(defined? @@var)
    end
    99
    nil
- :id: 50
  :callseqs:
  - singleton_class?    → true or false
  :description:
  - |-
    Returns true if mod is a singleton class or
    false if it is an ordinary class or module.
  :examples: |
    class C
    end
    C.singleton_class?                  #=> false
    C.singleton_class.singleton_class?  #=> true
- :id: 51
  :callseqs:
  - to_s   → string
  :description:
  - |-
    Returns a string representing this module or class. For basic classes and
    modules, this is the name. For singletons, we show information on the thing
    we’re attached to as well.
  :examples: ''
- :id: 52
  :callseqs:
  - alias_method(new_name, old_name)   → self
  :description:
  - |-
    Makes new_name a new copy of the method old_name. This
    can be used to retain access to methods that are overridden.
  - 'produces:'
  :examples: |
    module Mod
      alias_method :orig_exit, :exit
      def exit(code=0)
        puts "Exiting with code #{code}"
        orig_exit(code)
      end
    end
    include Mod
    exit(99)
    Exiting with code 99
- :id: 53
  :callseqs:
  - append_features(mod)   → mod
  :description:
  - |-
    When this module is included in another, Ruby calls
    append_features in this module, passing it the receiving
    module in mod. Ruby’s default implementation is to add the
    constants, methods, and module variables of this module to mod if
    this module has not already been added to mod or one of its
    ancestors. See also Module#include.
  :examples: ''
- :id: 54
  :callseqs:
  - attr(*args)
  :description: []
  :examples: ''
- :id: 55
  :callseqs:
  - attr_accessor(symbol, ...)    → nil
  - attr_accessor(string, ...)    → nil
  :description:
  - |-
    Defines a named attribute for this module, where the name is
    symbol.id2name, creating an instance variable
    (@name) and a corresponding access method to read it. Also
    creates a method called name= to set the attribute. String arguments are converted to symbols.
  :examples: |
    module Mod
      attr_accessor(:one, :two)
    end
    Mod.instance_methods.sort   #=> [:one, :one=, :two, :two=]
- :id: 56
  :callseqs:
  - attr_reader(symbol, ...)  → nil
  - attr(symbol, ...)         → nil
  - attr_reader(string, ...)  → nil
  - attr(string, ...)         → nil
  :description:
  - |-
    Creates instance variables and corresponding methods that return the value
    of each instance variable. Equivalent to calling
    “attr:name” on each name in turn. String arguments are converted to symbols.
  :examples: ''
- :id: 57
  :callseqs:
  - attr_writer(symbol, ...)    → nil
  - attr_writer(string, ...)    → nil
  :description:
  - |-
    Creates an accessor method to allow assignment to the attribute
    symbol.id2name. String
    arguments are converted to symbols.
  :examples: ''
- :id: 58
  :callseqs:
  - define_method(symbol, method)     → symbol
  - define_method(symbol) { block }   → symbol
  :description:
  - |-
    Defines an instance method in the receiver. The method parameter
    can be a Proc, a Method or an
    UnboundMethod object. If a block is specified, it is used as
    the method body. This block is evaluated using instance_eval,
    a point that is tricky to demonstrate because define_method is
    private. (This is why we resort to the send hack in this
    example.)
  - 'produces:'
  :examples: |
    class A
      def fred
        puts "In Fred"
      end
      def create_method(name, &block)
        self.class.send(:define_method, name, &block)
      end
      define_method(:wilma) { puts "Charge it!" }
    end
    class B < A
      define_method(:barney, instance_method(:fred))
    end
    a = B.new
    a.barney
    a.wilma
    a.create_method(:betty) { p self }
    a.betty
    In Fred
    Charge it!
    #<B:0x401b39e8>
- :id: 59
  :callseqs:
  - extend_object(obj)    → obj
  :description:
  - |-
    Extends the specified object by adding this module’s constants and methods
    (which are added as singleton methods). This is the callback method used by
    Object#extend.
  - 'produces:'
  :examples: |
    module Picky
      def Picky.extend_object(o)
        if String === o
          puts "Can't add Picky to a String"
        else
          puts "Picky added to #{o.class}"
          super
        end
      end
    end
    (s = Array.new).extend Picky  # Call Object.extend
    (s = "quick brown fox").extend Picky
- :id: 60
  :callseqs:
  - extended(othermod)
  :description:
  - The equivalent of included, but for extended modules.
  :examples: |
    module A
      def self.extended(mod)
        puts "#{self} extended in #{mod}"
      end
    end
    module Enumerable
      extend A
    end
     # => prints "A extended in Enumerable"
- :id: 61
  :callseqs:
  - included(othermod)
  :description:
  - |-
    Callback invoked whenever the receiver is included in another module or
    class. This should be used in preference to
    Module.append_features if your code wants to perform some
    action when a module is included in another.
  :examples: |
    module A
      def A.included(mod)
        puts "#{self} included in #{mod}"
      end
    end
    module Enumerable
      include A
    end
     # => prints "A included in Enumerable"
- :id: 62
  :callseqs:
  - method_added(method_name)
  :description:
  - Invoked as a callback whenever an instance method is added to the receiver.
  - 'produces:'
  :examples: |
    module Chatty
      def self.method_added(method_name)
        puts "Adding #{method_name.inspect}"
      end
      def self.some_class_method() end
      def some_instance_method() end
    end
    Adding :some_instance_method
- :id: 63
  :callseqs:
  - method_removed(method_name)
  :description:
  - |-
    Invoked as a callback whenever an instance method is removed from the
    receiver.
  - 'produces:'
  :examples: |
    module Chatty
      def self.method_removed(method_name)
        puts "Removing #{method_name.inspect}"
      end
      def self.some_class_method() end
      def some_instance_method() end
      class << self
        remove_method :some_class_method
      end
      remove_method :some_instance_method
    end
    Removing :some_instance_method
- :id: 64
  :callseqs:
  - method_undefined(p1)
  :description:
  - Not documented
  :examples: ''
- :id: 65
  :callseqs:
  - module_function(symbol, ...)    → self
  - module_function(string, ...)    → self
  :description:
  - |-
    Creates module functions for the named methods. These functions may be
    called with the module as a receiver, and also become available as instance
    methods to classes that mix in the module. Module
    functions are copies of the original, and so may be changed independently.
    The instance-method versions are made private. If used with no arguments,
    subsequently defined methods become module functions. String arguments are converted to symbols.
  :examples: |
    module Mod
      def one
        "This is one"
      end
      module_function :one
    end
    class Cls
      include Mod
      def call_one
        one
      end
    end
    Mod.one     #=> "This is one"
    c = Cls.new
    c.call_one  #=> "This is one"
    module Mod
      def one
        "This is the new one"
      end
    end
    Mod.one     #=> "This is one"
    c.call_one  #=> "This is the new one"
- :id: 66
  :callseqs:
  - prepend_features(mod)   → mod
  :description:
  - |-
    When this module is prepended in another, Ruby calls
    prepend_features in this module, passing it the receiving
    module in mod. Ruby’s default implementation is to overlay the
    constants, methods, and module variables of this module to mod if
    this module has not already been added to mod or one of its
    ancestors. See also Module#prepend.
  :examples: ''
- :id: 67
  :callseqs:
  - prepended(othermod)
  :description:
  - The equivalent of included, but for prepended modules.
  :examples: |
    module A
      def self.prepended(mod)
        puts "#{self} prepended to #{mod}"
      end
    end
    module Enumerable
      prepend A
    end
     # => prints "A prepended to Enumerable"
- :id: 68
  :callseqs:
  - private                 → self
  - private(symbol, ...)    → self
  - private(string, ...)    → self
  :description:
  - |-
    With no arguments, sets the default visibility for subsequently defined
    methods to private. With arguments, sets the named methods to have private
    visibility. String arguments are converted to
    symbols.
  - Note that to show a private method on RDoc, use :doc:.
  :examples: |
    module Mod
      def a()  end
      def b()  end
      private
      def c()  end
      private :a
    end
    Mod.private_instance_methods   #=> [:a, :c]
- :id: 69
  :callseqs:
  - protected                → self
  - protected(symbol, ...)   → self
  - protected(string, ...)   → self
  :description:
  - |-
    With no arguments, sets the default visibility for subsequently defined
    methods to protected. With arguments, sets the named methods to have
    protected visibility. String arguments are
    converted to symbols.
  - |-
    If a method has protected visibility, it is callable only where
    self of the context is the same as the method. (method
    definition or instance_eval). This behavior is different from Java’s
    protected method. Usually private should be used.
  - Note that a protected method is slow because it can’t use inline cache.
  - 'To show a private method on RDoc, use :doc: instead of this.'
  :examples: ''
- :id: 70
  :callseqs:
  - public                 → self
  - public(symbol, ...)    → self
  - public(string, ...)    → self
  :description:
  - |-
    With no arguments, sets the default visibility for subsequently defined
    methods to public. With arguments, sets the named methods to have public
    visibility. String arguments are converted to
    symbols.
  :examples: ''
- :id: 71
  :callseqs:
  - refine(mod) { block }   → module
  :description:
  - Refine mod in the receiver.
  - Returns a module, where refined methods are defined.
  :examples: ''
- :id: 72
  :callseqs:
  - remove_const(sym)   → obj
  :description:
  - |-
    Removes the definition of the given constant, returning that constant's
    previous value.  If that constant referred to a module, this will not
    change that module's name and can lead to confusion.
  :examples: ''
- :id: 73
  :callseqs:
  - remove_method(symbol)   → self
  - remove_method(string)   → self
  :description:
  - |-
    Removes the method identified by symbol from the current class.
    For an example, see Module.undef_method. String arguments are converted to symbols.
  :examples: ''
- :id: 74
  :callseqs:
  - undef_method(symbol)    → self
  - undef_method(string)    → self
  :description:
  - |-
    Prevents the current class from responding to calls to the named method.
    Contrast this with remove_method, which deletes the method
    from the particular class; Ruby will still search superclasses and mixed-in
    modules for a possible receiver. String arguments
    are converted to symbols.
  - 'produces:'
  :examples: |
    class Parent
      def hello
        puts "In parent"
      end
    end
    class Child < Parent
      def hello
        puts "In child"
      end
    end

    c = Child.new
    c.hello

    class Child
      remove_method :hello  # remove from child, still in parent
    end
    c.hello

    class Child
      undef_method :hello   # prevent any calls to 'hello'
    end
    c.hello
- :id: 75
  :callseqs:
  - using(module)    → self
  :description:
  - |-
    Import class refinements from module into the current class or
    module definition.
  :examples: ''
