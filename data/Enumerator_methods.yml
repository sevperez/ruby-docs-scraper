---
:id: 24
:name: Enumerator
:link: http://ruby-doc.org/core-2.4.1/Enumerator.html
:methods:
- :id: 0
  :callseqs:
  - new(size = nil) { |yielder| ... }
  - new(obj, method = :each, *args)
  :description:
  - |-
    Creates a new Enumerator object, which can be
    used as an Enumerable.
  - |-
    In the first form, iteration is defined by the given block, in which a
    “yielder” object, given as block parameter, can be used to yield a value by
    calling the yield method (aliased as +<<+):
  - |-
    The optional parameter can be used to specify how to calculate the size in
    a lazy fashion (see #size). It
    can either be a value or a callable object.
  - |-
    In the second, deprecated, form, a generated Enumerator iterates over the given object using
    the given method with the given arguments passed.
  - |-
    Use of this form is discouraged.  Use Kernel#enum_for or Kernel#to_enum
    instead.
  :examples: |
    fib = Enumerator.new do |y|
      a = b = 1
      loop do
        y << a
        a, b = b, a + b
      end
    end

    p fib.take(10) # => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    e = Enumerator.new(ObjectSpace, :each_object)
        #-> ObjectSpace.enum_for(:each_object)

    e.select { |obj| obj.is_a?(Class) }  #=> array of all classes
- :id: 1
  :callseqs:
  - each { |elm| block }                    → obj
  - each                                    → enum
  - each(*appending_args) { |elm| block }   → obj
  - each(*appending_args)                   → an_enumerator
  :description:
  - |-
    Iterates over the block according to how this Enumerator was constructed. If no block and no
    arguments are given, returns self.
  :examples: |
    "Hello, world!".scan(/\w+/)                     #=> ["Hello", "world"]
    "Hello, world!".to_enum(:scan, /\w+/).to_a      #=> ["Hello", "world"]
    "Hello, world!".to_enum(:scan).each(/\w+/).to_a #=> ["Hello", "world"]

    obj = Object.new

    def obj.each_arg(a, b=:b, *rest)
      yield a
      yield b
      yield rest
      :method_returned
    end

    enum = obj.to_enum :each_arg, :a, :x

    enum.each.to_a                  #=> [:a, :x, []]
    enum.each.equal?(enum)          #=> true
    enum.each { |elm| elm }         #=> :method_returned

    enum.each(:y, :z).to_a          #=> [:a, :x, [:y, :z]]
    enum.each(:y, :z).equal?(enum)  #=> false
    enum.each(:y, :z) { |elm| elm } #=> :method_returned
- :id: 2
  :callseqs:
  - each_with_index {|(*args), idx| ... }
  - each_with_index
  :description:
  - |-
    Same as #with_index, i.e.
    there is no starting offset.
  - |-
    If no block is given, a new Enumerator is
    returned that includes the index.
  :examples: ''
- :id: 3
  :callseqs:
  - each_with_object(obj) {|(*args), obj| ... }
  - each_with_object(obj)
  :description:
  - |-
    Iterates the given block for each element with an arbitrary object,
    obj, and returns obj
  - If no block is given, returns a new Enumerator.
  :examples: |
    to_three = Enumerator.new do |y|
      3.times do |x|
        y << x
      end
    end

    to_three_with_string = to_three.with_object("foo")
    to_three_with_string.each do |x,string|
      puts "#{string}: #{x}"
    end

    # => foo:0
    # => foo:1
    # => foo:2
- :id: 4
  :callseqs:
  - feed obj   → nil
  :description:
  - Sets the value to be returned by the next yield inside e.
  - If the value is not set, the yield returns nil.
  - This value is cleared after being yielded.
  :examples: |
    # Array#map passes the array's elements to "yield" and collects the
    # results of "yield" as an array.
    # Following example shows that "next" returns the passed elements and
    # values passed to "feed" are collected as an array which can be
    # obtained by StopIteration#result.
    e = [1,2,3].map
    p e.next           #=> 1
    e.feed "a"
    p e.next           #=> 2
    e.feed "b"
    p e.next           #=> 3
    e.feed "c"
    begin
      e.next
    rescue StopIteration
      p $!.result      #=> ["a", "b", "c"]
    end

    o = Object.new
    def o.each
      x = yield         # (2) blocks
      p x               # (5) => "foo"
      x = yield         # (6) blocks
      p x               # (8) => nil
      x = yield         # (9) blocks
      p x               # not reached w/o another e.next
    end

    e = o.to_enum
    e.next              # (1)
    e.feed "foo"        # (3)
    e.next              # (4)
    e.next              # (7)
                        # (10)
- :id: 5
  :callseqs:
  - inspect  → string
  :description:
  - Creates a printable version of e.
  :examples: ''
- :id: 6
  :callseqs:
  - next   → object
  :description:
  - |-
    Returns the next object in the enumerator, and move the internal position
    forward.  When the position reached at the end, StopIteration is raised.
  - |-
    Note that enumeration sequence by next does not affect other
    non-external enumeration methods, unless the underlying iteration methods
    itself has side-effect, e.g. IO#each_line.
  :examples: |
    a = [1,2,3]
    e = a.to_enum
    p e.next   #=> 1
    p e.next   #=> 2
    p e.next   #=> 3
    p e.next   #raises StopIteration
- :id: 7
  :callseqs:
  - next_values   → array
  :description:
  - |-
    Returns the next object as an array in the enumerator, and move the
    internal position forward.  When the position reached at the end, StopIteration is raised.
  - |-
    This method can be used to distinguish yield and yield
    nil.
  - |-
    Note that next_values does not affect other non-external
    enumeration methods unless underlying iteration method itself has
    side-effect, e.g. IO#each_line.
  :examples: |
    o = Object.new
    def o.each
      yield
      yield 1
      yield 1, 2
      yield nil
      yield [1, 2]
    end
    e = o.to_enum
    p e.next_values
    p e.next_values
    p e.next_values
    p e.next_values
    p e.next_values
    e = o.to_enum
    p e.next
    p e.next
    p e.next
    p e.next
    p e.next

    ## yield args       next_values      next
    #  yield            []               nil
    #  yield 1          [1]              1
    #  yield 1, 2       [1, 2]           [1, 2]
    #  yield nil        [nil]            nil
    #  yield [1, 2]     [[1, 2]]         [1, 2]
- :id: 8
  :callseqs:
  - peek   → object
  :description:
  - |-
    Returns the next object in the enumerator, but doesn’t move the internal
    position forward.  If the position is already at the end, StopIteration is raised.
  :examples: |
    a = [1,2,3]
    e = a.to_enum
    p e.next   #=> 1
    p e.peek   #=> 2
    p e.peek   #=> 2
    p e.peek   #=> 2
    p e.next   #=> 2
    p e.next   #=> 3
    p e.peek   #raises StopIteration
- :id: 9
  :callseqs:
  - peek_values   → array
  :description:
  - |-
    Returns the next object as an array, similar to #next_values, but doesn’t
    move the internal position forward.  If the position is already at the end,
    StopIteration is raised.
  :examples: |
    o = Object.new
    def o.each
      yield
      yield 1
      yield 1, 2
    end
    e = o.to_enum
    p e.peek_values    #=> []
    e.next
    p e.peek_values    #=> [1]
    p e.peek_values    #=> [1]
    e.next
    p e.peek_values    #=> [1, 2]
    e.next
    p e.peek_values    # raises StopIteration
- :id: 10
  :callseqs:
  - rewind   → e
  :description:
  - Rewinds the enumeration sequence to the beginning.
  - If the enclosed object responds to a “rewind” method, it is called.
  :examples: ''
- :id: 11
  :callseqs:
  - size          → int, Float::INFINITY or nil
  :description:
  - |-
    Returns the size of the enumerator, or nil if it can’t be
    calculated lazily.
  :examples: |
    (1..100).to_a.permutation(4).size # => 94109400
    loop.size # => Float::INFINITY
    (1..100).drop_while.size # => nil
- :id: 12
  :callseqs:
  - with_index(offset = 0) {|(*args), idx| ... }
  - with_index(offset = 0)
  :description:
  - |-
    Iterates the given block for each element with an index, which starts from
    offset.  If no block is given, returns a new Enumerator that includes the index, starting
    from offset
  - the starting index to use
  :examples: ''
- :id: 13
  :callseqs:
  - with_object(obj) {|(*args), obj| ... }
  - with_object(obj)
  :description:
  - |-
    Iterates the given block for each element with an arbitrary object,
    obj, and returns obj
  - If no block is given, returns a new Enumerator.
  :examples: |
    to_three = Enumerator.new do |y|
      3.times do |x|
        y << x
      end
    end

    to_three_with_string = to_three.with_object("foo")
    to_three_with_string.each do |x,string|
      puts "#{string}: #{x}"
    end

    # => foo:0
    # => foo:1
    # => foo:2
