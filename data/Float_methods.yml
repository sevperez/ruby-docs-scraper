---
:id: 37
:name: Float
:link: http://ruby-doc.org/core-2.4.1/Float.html
:methods:
- :id: 0
  :callseqs:
  - float % other        →  float
  :description:
  - |-
    Return the modulo after division of float by
    other.
  :examples: |
    6543.21.modulo(137)      #=> 104.21
    6543.21.modulo(137.24)   #=> 92.9299999999996
- :id: 1
  :callseqs:
  - float * other  →  float
  :description:
  - |-
    Returns a new float which is the product of float and
    other.
  :examples: ''
- :id: 2
  :callseqs:
  - float ** other  →  float
  :description:
  - Raises float to the power of other.
  :examples: '2.0**3      #=> 8.0

'
- :id: 3
  :callseqs:
  - float + other  →  float
  :description:
  - |-
    Returns a new float which is the sum of float and
    other.
  :examples: ''
- :id: 4
  :callseqs:
  - float - other  →  float
  :description:
  - |-
    Returns a new float which is the difference of float and
    other.
  :examples: ''
- :id: 5
  :callseqs:
  - "-float  →  float"
  :description:
  - Returns float, negated.
  :examples: ''
- :id: 6
  :callseqs:
  - float / other  →  float
  :description:
  - |-
    Returns a new float which is the result of dividing float by
    other.
  :examples: ''
- :id: 7
  :callseqs:
  - float < real  →  true or false
  :description:
  - |-
    Returns true if float is less than
    real.
  - |-
    The result of NaN < NaN is undefined, so the
    implementation-dependent value is returned.
  :examples: ''
- :id: 8
  :callseqs:
  - float <= real  →  true or false
  :description:
  - |-
    Returns true if float is less than or equal to
    real.
  - |-
    The result of NaN <= NaN is undefined, so the
    implementation-dependent value is returned.
  :examples: ''
- :id: 9
  :callseqs:
  - float <=> real  →  -1, 0, +1 or nil
  :description:
  - |-
    Returns -1, 0, +1 or nil depending on whether float is less
    than, equal to, or greater than real. This is the basis for
    the tests in Comparable.
  - |-
    The result of NaN <=> NaN is undefined, so the
    implementation-dependent value is returned.
  - nil is returned if the two values are incomparable.
  :examples: ''
- :id: 10
  :callseqs:
  - float == obj  →  true or false
  :description:
  - |-
    Returns true only if obj has the same value as
    float. Contrast this with #eql?, which requires obj to be a Float.
  - |-
    The result of NaN == NaN is undefined, so the
    implementation-dependent value is returned.
  :examples: '1.0 == 1   #=> true

'
- :id: 11
  :callseqs:
  - float == obj  →  true or false
  :description:
  - |-
    Returns true only if obj has the same value as
    float. Contrast this with #eql?, which requires obj to be a Float.
  - |-
    The result of NaN == NaN is undefined, so the
    implementation-dependent value is returned.
  :examples: '1.0 == 1   #=> true

'
- :id: 12
  :callseqs:
  - float > real  →  true or false
  :description:
  - |-
    Returns true if float is greater than
    real.
  - |-
    The result of NaN > NaN is undefined, so the
    implementation-dependent value is returned.
  :examples: ''
- :id: 13
  :callseqs:
  - float >= real  →  true or false
  :description:
  - |-
    Returns true if float is greater than or equal to
    real.
  - |-
    The result of NaN >= NaN is undefined, so the
    implementation-dependent value is returned.
  :examples: ''
- :id: 14
  :callseqs:
  - abs        →  float
  :description:
  - Returns the absolute value of float.
  :examples: |
    (-34.56).abs   #=> 34.56
    -34.56.abs     #=> 34.56
- :id: 15
  :callseqs:
  - angle  →  0 or float
  :description:
  - Returns 0 if the value is positive, pi otherwise.
  :examples: ''
- :id: 16
  :callseqs:
  - arg    →  0 or float
  :description:
  - Returns 0 if the value is positive, pi otherwise.
  :examples: ''
- :id: 17
  :callseqs:
  - ceil([ndigits])  →  integer or float
  :description:
  - |-
    Returns the smallest number greater than or equal to float in
    decimal digits (default 0 digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is positive, self for zero, and ceil up
    for negative.
  :examples: |
    1.2.ceil      #=> 2
    2.0.ceil      #=> 2
    (-1.2).ceil   #=> -1
    (-2.0).ceil   #=> -2
    1.234567.ceil(2)  #=> 1.24
    1.234567.ceil(3)  #=> 1.235
    1.234567.ceil(4)  #=> 1.2346
    1.234567.ceil(5)  #=> 1.23457

    34567.89.ceil(-5) #=> 100000
    34567.89.ceil(-4) #=> 40000
    34567.89.ceil(-3) #=> 35000
    34567.89.ceil(-2) #=> 34600
    34567.89.ceil(-1) #=> 34570
    34567.89.ceil(0)  #=> 34568
    34567.89.ceil(1)  #=> 34567.9
    34567.89.ceil(2)  #=> 34567.89
    34567.89.ceil(3)  #=> 34567.89
- :id: 18
  :callseqs:
  - coerce(numeric)  →  array
  :description:
  - |-
    Returns an array with both a numeric and a float
    represented as Float objects.
  - This is achieved by converting a numeric to a Float.
  :examples: |
    1.2.coerce(3)       #=> [3.0, 1.2]
    2.5.coerce(1.1)     #=> [1.1, 2.5]
- :id: 19
  :callseqs:
  - denominator  →  integer
  :description:
  - |-
    Returns the denominator (always positive).  The result is machine
    dependent.
  - See numerator.
  :examples: ''
- :id: 20
  :callseqs:
  - divmod(numeric)  →  array
  :description:
  - See Numeric#divmod.
  :examples: |
    42.0.divmod 6 #=> [7, 0.0]
    42.0.divmod 5 #=> [8, 2.0]
- :id: 21
  :callseqs:
  - eql?(obj)  →  true or false
  :description:
  - |-
    Returns true only if obj is a Float with the same value as float.
    Contrast this with Float#==, which performs type conversions.
  - |-
    The result of NaN.eql?(NaN) is undefined, so the
    implementation-dependent value is returned.
  :examples: '1.0.eql?(1)   #=> false

'
- :id: 22
  :callseqs:
  - fdiv(numeric)  →  float
  :description:
  - Returns float / numeric, same as Float#/.
  :examples: ''
- :id: 23
  :callseqs:
  - finite?  →  true or false
  :description:
  - |-
    Returns true if float is a valid IEEE floating
    point number (it is not infinite, and #nan? is false).
  :examples: ''
- :id: 24
  :callseqs:
  - floor([ndigits])  →  integer or float
  :description:
  - |-
    Returns the largest number less than or equal to float in
    decimal digits (default 0 digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is positive, self for zero, and floor
    down for negative.
  :examples: |
    1.2.floor      #=> 1
    2.0.floor      #=> 2
    (-1.2).floor   #=> -2
    (-2.0).floor   #=> -2

    1.234567.floor(2)  #=> 1.23
    1.234567.floor(3)  #=> 1.234
    1.234567.floor(4)  #=> 1.2345
    1.234567.floor(5)  #=> 1.23456

    34567.89.floor(-5) #=> 0
    34567.89.floor(-4) #=> 30000
    34567.89.floor(-3) #=> 34000
    34567.89.floor(-2) #=> 34500
    34567.89.floor(-1) #=> 34560
    34567.89.floor(0)  #=> 34567
    34567.89.floor(1)  #=> 34567.8
    34567.89.floor(2)  #=> 34567.89
    34567.89.floor(3)  #=> 34567.89
- :id: 25
  :callseqs:
  - hash  →  integer
  :description:
  - Returns a hash code for this float.
  - See also Object#hash.
  :examples: ''
- :id: 26
  :callseqs:
  - infinite?  →  nil, -1, +1
  :description:
  - 'Return values corresponding to the value of float:'
  - nil
  - "-1"
  - '1'
  - 'For example:'
  :examples: |
    (0.0).infinite?        #=> nil
    (-1.0/0.0).infinite?   #=> -1
    (+1.0/0.0).infinite?   #=> 1
- :id: 27
  :callseqs:
  - inspect()
  :description: []
  :examples: ''
- :id: 28
  :callseqs:
  - magnitude  →  float
  :description:
  - Returns the absolute value of float.
  :examples: |
    (-34.56).abs   #=> 34.56
    -34.56.abs     #=> 34.56
- :id: 29
  :callseqs:
  - modulo(other)  →  float
  :description:
  - |-
    Return the modulo after division of float by
    other.
  :examples: |
    6543.21.modulo(137)      #=> 104.21
    6543.21.modulo(137.24)   #=> 92.9299999999996
- :id: 30
  :callseqs:
  - nan?  →  true or false
  :description:
  - |-
    Returns true if float is an invalid IEEE floating
    point number.
  :examples: |
    a = -1.0      #=> -1.0
    a.nan?        #=> false
    a = 0.0/0.0   #=> NaN
    a.nan?        #=> true
- :id: 31
  :callseqs:
  - negative? →  true or false
  :description:
  - Returns true if float is less than 0.
  :examples: ''
- :id: 32
  :callseqs:
  - next_float  →  float
  :description:
  - Returns the next representable floating-point number.
  - Float::MAX.next_float and Float::INFINITY.next_float is Float::INFINITY.
  - Float::NAN.next_float is Float::NAN.
  - 'For example:'
  :examples: |
    p 0.01.next_float  #=> 0.010000000000000002
    p 1.0.next_float   #=> 1.0000000000000002
    p 100.0.next_float #=> 100.00000000000001

    p 0.01.next_float - 0.01   #=> 1.734723475976807e-18
    p 1.0.next_float - 1.0     #=> 2.220446049250313e-16
    p 100.0.next_float - 100.0 #=> 1.4210854715202004e-14

    f = 0.01; 20.times { printf "%-20a %s\n", f, f.to_s; f = f.next_float }
    #=> 0x1.47ae147ae147bp-7 0.01
    #   0x1.47ae147ae147cp-7 0.010000000000000002
    #   0x1.47ae147ae147dp-7 0.010000000000000004
    #   0x1.47ae147ae147ep-7 0.010000000000000005
    #   0x1.47ae147ae147fp-7 0.010000000000000007
    #   0x1.47ae147ae148p-7  0.010000000000000009
    #   0x1.47ae147ae1481p-7 0.01000000000000001
    #   0x1.47ae147ae1482p-7 0.010000000000000012
    #   0x1.47ae147ae1483p-7 0.010000000000000014
    #   0x1.47ae147ae1484p-7 0.010000000000000016
    #   0x1.47ae147ae1485p-7 0.010000000000000018
    #   0x1.47ae147ae1486p-7 0.01000000000000002
    #   0x1.47ae147ae1487p-7 0.010000000000000021
    #   0x1.47ae147ae1488p-7 0.010000000000000023
    #   0x1.47ae147ae1489p-7 0.010000000000000024
    #   0x1.47ae147ae148ap-7 0.010000000000000026
    #   0x1.47ae147ae148bp-7 0.010000000000000028
    #   0x1.47ae147ae148cp-7 0.01000000000000003
    #   0x1.47ae147ae148dp-7 0.010000000000000031
    #   0x1.47ae147ae148ep-7 0.010000000000000033

    f = 0.0
    100.times { f += 0.1 }
    p f                            #=> 9.99999999999998       # should be 10.0 in the ideal world.
    p 10-f                         #=> 1.9539925233402755e-14 # the floating-point error.
    p(10.0.next_float-10)          #=> 1.7763568394002505e-15 # 1 ulp (units in the last place).
    p((10-f)/(10.0.next_float-10)) #=> 11.0                   # the error is 11 ulp.
    p((10-f)/(10*Float::EPSILON))  #=> 8.8                    # approximation of the above.
    p "%a" % f                     #=> "0x1.3fffffffffff5p+3" # the last hex digit is 5.  16 - 5 = 11 ulp.
- :id: 33
  :callseqs:
  - numerator  →  integer
  :description:
  - Returns the numerator.  The result is machine dependent.
  :examples: |
    n = 0.3.numerator    #=> 5404319552844595
    d = 0.3.denominator  #=> 18014398509481984
    n.fdiv(d)            #=> 0.3
- :id: 34
  :callseqs:
  - phase  →  0 or float
  :description:
  - Returns 0 if the value is positive, pi otherwise.
  :examples: ''
- :id: 35
  :callseqs:
  - positive? →  true or false
  :description:
  - Returns true if float is greater than 0.
  :examples: ''
- :id: 36
  :callseqs:
  - prev_float  →  float
  :description:
  - Returns the previous representable floating-point number.
  - |-
    (-Float::MAX).prev_float and (-Float::INFINITY).prev_float is
    -Float::INFINITY.
  - Float::NAN.prev_float is Float::NAN.
  - 'For example:'
  :examples: |
    p 0.01.prev_float  #=> 0.009999999999999998
    p 1.0.prev_float   #=> 0.9999999999999999
    p 100.0.prev_float #=> 99.99999999999999

    p 0.01 - 0.01.prev_float   #=> 1.734723475976807e-18
    p 1.0 - 1.0.prev_float     #=> 1.1102230246251565e-16
    p 100.0 - 100.0.prev_float #=> 1.4210854715202004e-14

    f = 0.01; 20.times { printf "%-20a %s\n", f, f.to_s; f = f.prev_float }
    #=> 0x1.47ae147ae147bp-7 0.01
    #   0x1.47ae147ae147ap-7 0.009999999999999998
    #   0x1.47ae147ae1479p-7 0.009999999999999997
    #   0x1.47ae147ae1478p-7 0.009999999999999995
    #   0x1.47ae147ae1477p-7 0.009999999999999993
    #   0x1.47ae147ae1476p-7 0.009999999999999992
    #   0x1.47ae147ae1475p-7 0.00999999999999999
    #   0x1.47ae147ae1474p-7 0.009999999999999988
    #   0x1.47ae147ae1473p-7 0.009999999999999986
    #   0x1.47ae147ae1472p-7 0.009999999999999985
    #   0x1.47ae147ae1471p-7 0.009999999999999983
    #   0x1.47ae147ae147p-7  0.009999999999999981
    #   0x1.47ae147ae146fp-7 0.00999999999999998
    #   0x1.47ae147ae146ep-7 0.009999999999999978
    #   0x1.47ae147ae146dp-7 0.009999999999999976
    #   0x1.47ae147ae146cp-7 0.009999999999999974
    #   0x1.47ae147ae146bp-7 0.009999999999999972
    #   0x1.47ae147ae146ap-7 0.00999999999999997
    #   0x1.47ae147ae1469p-7 0.009999999999999969
    #   0x1.47ae147ae1468p-7 0.009999999999999967
- :id: 37
  :callseqs:
  - quo(numeric)  →  float
  :description:
  - Returns float / numeric, same as Float#/.
  :examples: ''
- :id: 38
  :callseqs:
  - rationalize([eps])  →  rational
  :description:
  - |-
    Returns a simpler approximation of the value (flt-|eps| <= result <=
    flt+|eps|).  if the optional eps is not given, it will be chosen
    automatically.
  - See to_r.
  :examples: |
    0.3.rationalize          #=> (3/10)
    1.333.rationalize        #=> (1333/1000)
    1.333.rationalize(0.01)  #=> (4/3)
- :id: 39
  :callseqs:
  - 'round([ndigits] [, half: symbol])  →  integer or float'
  :description:
  - |-
    Rounds float to a given precision in decimal digits (default 0
    digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is more than zero.
  - |-
    If the half: optional keyword is given, just-half number will
    be rounded according to that value. Supported values for this keyword are
    follows.
  - |-
    :up or nil: the result will be rounded away from
    zero
  - ":even: the result will be rounded to nearest even number"
  - ":down: the result will be rounded close to zero"
  :examples: |
    1.4.round      #=> 1
    1.5.round      #=> 2
    1.6.round      #=> 2
    (-1.5).round   #=> -2

    1.234567.round(2)  #=> 1.23
    1.234567.round(3)  #=> 1.235
    1.234567.round(4)  #=> 1.2346
    1.234567.round(5)  #=> 1.23457

    34567.89.round(-5) #=> 0
    34567.89.round(-4) #=> 30000
    34567.89.round(-3) #=> 35000
    34567.89.round(-2) #=> 34600
    34567.89.round(-1) #=> 34570
    34567.89.round(0)  #=> 34568
    34567.89.round(1)  #=> 34567.9
    34567.89.round(2)  #=> 34567.89
    34567.89.round(3)  #=> 34567.89
    2.5.round(half: :up)   #=> 3
    2.5.round(half: :even) #=> 2
    2.5.round(half: :down) #=> 2
    3.5.round(half: :up)   #=> 4
    3.5.round(half: :even) #=> 4
    3.5.round(half: :down) #=> 3
- :id: 40
  :callseqs:
  - to_f  →  self
  :description:
  - Since float is already a float, returns self.
  :examples: ''
- :id: 41
  :callseqs:
  - to_i      →  integer
  - to_int    →  integer
  :description:
  - Returns the float truncated to an Integer.
  - Synonyms are to_i and to_int
  :examples: ''
- :id: 42
  :callseqs:
  - to_int    →  integer
  :description:
  - Returns the float truncated to an Integer.
  - Synonyms are to_i and to_int
  :examples: ''
- :id: 43
  :callseqs:
  - to_r  →  rational
  :description:
  - Returns the value as a rational.
  - |-
    NOTE: 0.3.to_r isn’t the same as ‘0.3’.to_r.  The latter is equivalent to
    ‘3/10’.to_r, but the former isn’t so.
  - See rationalize.
  :examples: |
    2.0.to_r    #=> (2/1)
    2.5.to_r    #=> (5/2)
    -0.75.to_r  #=> (-3/4)
    0.0.to_r    #=> (0/1)
- :id: 44
  :callseqs:
  - to_s  →  string
  :description:
  - |-
    Returns a string containing a representation of self. As well as a fixed or
    exponential form of the float, the call may return
    NaN, Infinity, and -Infinity.
  :examples: ''
- :id: 45
  :callseqs:
  - truncate([ndigits])  →  integer or float
  :description:
  - |-
    Truncates float to a given precision in decimal digits
    (default 0 digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is more than zero.
  :examples: ''
- :id: 46
  :callseqs:
  - zero?  →  true or false
  :description:
  - Returns true if float is 0.0.
  :examples: ''
