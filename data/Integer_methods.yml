---
- :id: 0
  :callseqs:
  - sqrt(n)  →  integer
  :description:
  - |-
    Returns the integer square root of the non-negative integer n,
    i.e. the largest non-negative integer less than or equal to the square root
    of n.
  - |-
    Equivalent to Math.sqrt(n).floor, except that the result of
    the latter code may differ from the true value due to the limited precision
    of floating point arithmetic.
  - |-
    If n is not an Integer, it is
    converted to an Integer first. If n
    is negative, a Math::DomainError is
    raised.
  :examples: |
    Integer.sqrt(0)        #=> 0
    Integer.sqrt(1)        #=> 1
    Integer.sqrt(24)       #=> 4
    Integer.sqrt(25)       #=> 5
    Integer.sqrt(10**400)  #=> 10**200
    Integer.sqrt(10**46)     #=> 100000000000000000000000
    Math.sqrt(10**46).floor  #=>  99999999999999991611392 (!)
- :id: 1
  :callseqs:
  - int % other        →  real
  :description:
  - Returns int modulo other.
  - |-
    See Numeric#divmod for more
    information.
  :examples: ''
- :id: 2
  :callseqs:
  - integer & integer  →  integer_result
  :description:
  - Bitwise AND.
  :examples: ''
- :id: 3
  :callseqs:
  - int * numeric  →  numeric_result
  :description:
  - |-
    Performs multiplication: the class of the resulting object depends on the
    class of numeric and on the magnitude of the result. It may
    return a Bignum.
  :examples: ''
- :id: 4
  :callseqs:
  - integer ** numeric  →  numeric_result
  :description:
  - |-
    Raises integer to the power of numeric, which may
    be negative or fractional. The result may be an Integer, or a Float
  :examples: |
    2 ** 3      #=> 8
    2 ** -1     #=> (1/2)
    2 ** 0.5    #=> 1.4142135623731

    123456789 ** 2      #=> 15241578750190521
    123456789 ** 1.2    #=> 5126464716.09932
    123456789 ** -2     #=> (1/15241578750190521)
- :id: 5
  :callseqs:
  - int + numeric  →  numeric_result
  :description:
  - |-
    Performs addition: the class of the resulting object depends on the class
    of numeric and on the magnitude of the result. It may return a
    Bignum.
  :examples: ''
- :id: 6
  :callseqs:
  - int - numeric  →  numeric_result
  :description:
  - |-
    Performs subtraction: the class of the resulting object depends on the
    class of numeric and on the magnitude of the result. It may
    return a Bignum.
  :examples: ''
- :id: 7
  :callseqs:
  - "-int  →  integer"
  :description:
  - Negates int. (returns an integer whose value is 0-int)
  :examples: ''
- :id: 8
  :callseqs:
  - int / numeric  →  numeric_result
  :description:
  - |-
    Performs division: the class of the resulting object depends on the class
    of numeric and on the magnitude of the result. It may return a
    Bignum.
  :examples: ''
- :id: 9
  :callseqs:
  - int < real  →  true or false
  :description:
  - |-
    Returns true if the value of int is less than
    that of real.
  :examples: ''
- :id: 10
  :callseqs:
  - int << count  →  integer
  :description:
  - |-
    Shifts int left count positions, or right if
    count is negative.
  :examples: ''
- :id: 11
  :callseqs:
  - int <= real  →  true or false
  :description:
  - |-
    Returns true if the value of int is less than or
    equal to that of real.
  :examples: ''
- :id: 12
  :callseqs:
  - int <=> numeric  →  -1, 0, +1 or nil
  :description:
  - |-
    Comparison---Returns -1, 0, +1 or
    nil depending on whether int is less than, equal
    to, or greater than numeric.
  - This is the basis for the tests in the Comparable module.
  - nil is returned if the two values are incomparable.
  :examples: ''
- :id: 13
  :callseqs:
  - int == other  →  true or false
  :description:
  - |-
    Return true if int equals other
    numerically. Contrast this with Integer#eql?, which requires
    other to be a Integer.
  :examples: |
    1 == 2      #=> false
    1 == 1.0    #=> true
- :id: 14
  :callseqs: []
  :description: []
  :examples: ''
- :id: 15
  :callseqs:
  - int > real  →  true or false
  :description:
  - |-
    Returns true if the value of int is greater than
    that of real.
  :examples: ''
- :id: 16
  :callseqs:
  - int >= real  →  true or false
  :description:
  - |-
    Returns true if the value of int is greater than
    or equal to that of real.
  :examples: ''
- :id: 17
  :callseqs:
  - int >> count  →  integer
  :description:
  - |-
    Shifts int right count positions, or left if
    count is negative.
  :examples: ''
- :id: 18
  :callseqs:
  - int[n]  →  0, 1
  :description:
  - |-
    Bit Reference---Returns the +n+th bit in the binary representation of
    int, where int[0] is the least significant bit.
  - 'For example:'
  :examples: |
    a = 0b11001100101010
    30.downto(0) do |n| print a[n] end
    #=> 0000000000000000011001100101010

    a = 9**15
    50.downto(0) do |n|
      print a[n]
    end
    #=> 000101110110100000111000011110010100111100010111001
- :id: 19
  :callseqs:
  - integer ^ integer  →  integer_result
  :description:
  - Bitwise EXCLUSIVE OR.
  :examples: ''
- :id: 20
  :callseqs:
  - abs        →  integer
  :description:
  - Returns the absolute value of int.
  :examples: |
    -12345.abs   #=> 12345
    12345.abs    #=> 12345
    -1234567890987654321.abs   #=> 1234567890987654321
- :id: 21
  :callseqs:
  - bit_length → integer
  :description:
  - Returns the number of bits of the value of int.
  - |-
    "the number of bits" means that the bit position of the highest bit which
    is different to the sign bit. (The bit position of the bit 2**n is n+1.) If
    there is no such bit (zero or minus one), zero is returned.
  - 'I.e. This method returns ceil(log2(int < 0 ? -int : int+1)).'
  - This method can be used to detect overflow in Array#pack as follows.
  :examples: |
    (-2**10000-1).bit_length  #=> 10001
    (-2**10000).bit_length    #=> 10000
    (-2**10000+1).bit_length  #=> 10000
    (-2**1000-1).bit_length   #=> 1001
    (-2**1000).bit_length     #=> 1000
    (-2**1000+1).bit_length   #=> 1000
    (-2**12-1).bit_length     #=> 13
    (-2**12).bit_length       #=> 12
    (-2**12+1).bit_length     #=> 12
    -0x101.bit_length         #=> 9
    -0x100.bit_length         #=> 8
    -0xff.bit_length          #=> 8
    -2.bit_length             #=> 1
    -1.bit_length             #=> 0
    0.bit_length              #=> 0
    1.bit_length              #=> 1
    0xff.bit_length           #=> 8
    0x100.bit_length          #=> 9
    (2**12-1).bit_length      #=> 12
    (2**12).bit_length        #=> 13
    (2**12+1).bit_length      #=> 13
    (2**1000-1).bit_length    #=> 1000
    (2**1000).bit_length      #=> 1001
    (2**1000+1).bit_length    #=> 1001
    (2**10000-1).bit_length   #=> 10000
    (2**10000).bit_length     #=> 10001
    (2**10000+1).bit_length   #=> 10001
    if n.bit_length < 32
      [n].pack("l") # no overflow
    else
      raise "overflow"
    end
- :id: 22
  :callseqs:
  - ceil([ndigits])  →  integer or float
  :description:
  - |-
    Returns the smallest number than or equal to int in decimal
    digits (default 0 digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is positive, self for zero, and ceil up
    for negative.
  :examples: |
    1.ceil        #=> 1
    1.ceil(2)     #=> 1.0
    15.ceil(-1)   #=> 20
- :id: 23
  :callseqs:
  - chr([encoding])  →  string
  :description:
  - |-
    Returns a string containing the character represented by the
    int's value according to encoding.
  :examples: |
    65.chr    #=> "A"
    230.chr   #=> "\346"
    255.chr(Encoding::UTF_8)   #=> "\303\277"
- :id: 24
  :callseqs:
  - coerce(numeric)  →  array
  :description:
  - |-
    Returns an array with both a numeric and a big
    represented as Bignum objects.
  - This is achieved by converting numeric to a Bignum.
  - |-
    A TypeError is raised if the
    numeric is not a Fixnum or Bignum type.
  :examples: "(0x3FFFFFFFFFFFFFFF+1).coerce(42)   #=> [42, 4611686018427387904]\n"
- :id: 25
  :callseqs:
  - denominator  →  1
  :description:
  - Returns 1.
  :examples: ''
- :id: 26
  :callseqs:
  - digits       → [int]
  - digits(base) → [int]
  :description:
  - |-
    Returns the array including the digits extracted by place-value notation
    with radix base of int.
  - base should be greater than or equal to 2.
  :examples: |
    12345.digits      #=> [5, 4, 3, 2, 1]
    12345.digits(7)   #=> [4, 6, 6, 0, 5]
    12345.digits(100) #=> [45, 23, 1]

    -12345.digits(7)  #=> Math::DomainError
- :id: 27
  :callseqs:
  - div(numeric)  →  integer
  :description:
  - |-
    Performs integer division: returns integer result of dividing
    int by numeric.
  :examples: ''
- :id: 28
  :callseqs:
  - divmod(numeric)  →  array
  :description:
  - See Numeric#divmod.
  :examples: ''
- :id: 29
  :callseqs:
  - downto(limit) {|i| block }  →  self
  - downto(limit)               →  an_enumerator
  :description:
  - |-
    Iterates the given block, passing decreasing values from int
    down to and including limit.
  - |-
    If no block is given, an Enumerator is
    returned instead.
  :examples: |
    5.downto(1) { |n| print n, ".. " }
    print "  Liftoff!\n"
    #=> "5.. 4.. 3.. 2.. 1..   Liftoff!"
- :id: 30
  :callseqs:
  - even?  →  true or false
  :description:
  - Returns true if int is an even number.
  :examples: ''
- :id: 31
  :callseqs:
  - fdiv(numeric)  →  float
  :description:
  - |-
    Returns the floating point result of dividing integer by
    numeric.
  :examples: |
    654321.fdiv(13731)      #=> 47.6528293642124
    654321.fdiv(13731.24)   #=> 47.6519964693647

    -1234567890987654321.fdiv(13731)      #=> -89910996357705.5
    -1234567890987654321.fdiv(13731.24)   #=> -89909424858035.7
- :id: 32
  :callseqs:
  - floor([ndigits])  →  integer or float
  :description:
  - |-
    Returns the largest number less than or equal to int in
    decimal digits (default 0 digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is positive, self for zero, and floor
    down for negative.
  :examples: |
    1.floor        #=> 1
    1.floor(2)     #=> 1.0
    15.floor(-1)   #=> 10
- :id: 33
  :callseqs:
  - gcd(int2)  →  integer
  :description:
  - |-
    Returns the greatest common divisor (always positive).  0.gcd(x) and
    x.gcd(0) return abs(x).
  :examples: |
    2.gcd(2)                    #=> 2
    3.gcd(-7)                   #=> 1
    ((1<<31)-1).gcd((1<<61)-1)  #=> 1
- :id: 34
  :callseqs:
  - gcdlcm(int2)  →  array
  :description:
  - Returns an array; [int.gcd(int2), int.lcm(int2)].
  :examples: |
    2.gcdlcm(2)                    #=> [2, 2]
    3.gcdlcm(-7)                   #=> [1, 21]
    ((1<<31)-1).gcdlcm((1<<61)-1)  #=> [1, 4951760154835678088235319297]
- :id: 35
  :callseqs: []
  :description: []
  :examples: ''
- :id: 36
  :callseqs:
  - integer?  →  true
  :description:
  - |-
    Since int is already an Integer,
    this always returns true.
  :examples: ''
- :id: 37
  :callseqs:
  - lcm(int2)  →  integer
  :description:
  - |-
    Returns the least common multiple (always positive).  0.lcm(x) and x.lcm(0)
    return zero.
  :examples: |
    2.lcm(2)                    #=> 2
    3.lcm(-7)                   #=> 21
    ((1<<31)-1).lcm((1<<61)-1)  #=> 4951760154835678088235319297
- :id: 38
  :callseqs:
  - magnitude  →  integer
  :description:
  - Returns the absolute value of int.
  :examples: |
    -12345.abs   #=> 12345
    12345.abs    #=> 12345
    -1234567890987654321.abs   #=> 1234567890987654321
- :id: 39
  :callseqs:
  - modulo(other)  →  real
  :description:
  - Returns int modulo other.
  - |-
    See Numeric#divmod for more
    information.
  :examples: ''
- :id: 40
  :callseqs:
  - next  →  integer
  :description:
  - |-
    Returns the Integer equal to int +
    1.
  :examples: |
    1.next      #=> 2
    (-1).next   #=> 0
    1.succ      #=> 2
    (-1).succ   #=> 0
- :id: 41
  :callseqs:
  - numerator  →  self
  :description:
  - Returns self.
  :examples: ''
- :id: 42
  :callseqs:
  - odd?  →  true or false
  :description:
  - Returns true if int is an odd number.
  :examples: ''
- :id: 43
  :callseqs:
  - ord  →  self
  :description:
  - Returns the int itself.
  - |-
    This method is intended for compatibility to character constant in Ruby
    1.9.
  - For example, ?a.ord returns 97 both in 1.8 and 1.9.
  :examples: "?a.ord    #=> 97\n"
- :id: 44
  :callseqs:
  - pred  →  integer
  :description:
  - |-
    Returns the Integer equal to int -
    1.
  :examples: |
    1.pred      #=> 0
    (-1).pred   #=> -2
- :id: 45
  :callseqs:
  - rationalize([eps])  →  rational
  :description:
  - |-
    Returns the value as a rational.  The optional argument eps is always
    ignored.
  :examples: ''
- :id: 46
  :callseqs:
  - remainder(numeric)  →  real
  :description:
  - 'Returns the remainder after dividing big by numeric as:'
  - Examples
  - See Numeric#divmod.
  :examples: |
    5.remainder(3)    #=> 2
    -5.remainder(3)   #=> -2
    5.remainder(-3)   #=> 2
    -5.remainder(-3)  #=> -2

    -1234567890987654321.remainder(13731)      #=> -6966
    -1234567890987654321.remainder(13731.24)   #=> -9906.22531493148
- :id: 47
  :callseqs:
  - 'round([ndigits] [, half: symbol])  →  integer or float'
  :description:
  - |-
    Rounds int to a given precision in decimal digits (default 0
    digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is positive, self for zero, and round
    down for negative.
  - 'The half: optional keyword same as Float#round is available.'
  :examples: |
    1.round        #=> 1
    1.round(2)     #=> 1.0
    15.round(-1)   #=> 20
    25.round(-1, half: :up)   #=> 30
    25.round(-1, half: :even) #=> 20
    25.round(-1, half: :down) #=> 20
    35.round(-1, half: :up)   #=> 40
    35.round(-1, half: :even) #=> 40
    35.round(-1, half: :down) #=> 30
- :id: 48
  :callseqs:
  - size  →  int
  :description:
  - |-
    Returns the number of bytes in the machine representation of
    int.
  :examples: |
    1.size            #=> 4
    -1.size           #=> 4
    2147483647.size   #=> 4
    (256**10 - 1).size   #=> 12
    (256**20 - 1).size   #=> 20
    (256**40 - 1).size   #=> 40
- :id: 49
  :callseqs:
  - succ  →  integer
  :description:
  - |-
    Returns the Integer equal to int +
    1.
  :examples: |
    1.next      #=> 2
    (-1).next   #=> 0
    1.succ      #=> 2
    (-1).succ   #=> 0
- :id: 50
  :callseqs:
  - times {|i| block }  →  self
  - times               →  an_enumerator
  :description:
  - |-
    Iterates the given block int times, passing in values from
    zero to int - 1.
  - |-
    If no block is given, an Enumerator is
    returned instead.
  :examples: |
    5.times do |i|
      print i, " "
    end
    #=> 0 1 2 3 4
- :id: 51
  :callseqs:
  - to_f  →  float
  :description:
  - |-
    Converts int to a Float.  If int
    doesn't fit in a Float, the result is infinity.
  :examples: ''
- :id: 52
  :callseqs:
  - to_i      →  integer
  :description:
  - |-
    As int is already an Integer, all
    these methods simply return the receiver.
  - Synonyms is to_int
  :examples: ''
- :id: 53
  :callseqs:
  - to_i      →  integer
  :description:
  - |-
    As int is already an Integer, all
    these methods simply return the receiver.
  - Synonyms is to_int
  :examples: ''
- :id: 54
  :callseqs:
  - to_r  →  rational
  :description:
  - Returns the value as a rational.
  :examples: |
    1.to_r        #=> (1/1)
    (1<<64).to_r  #=> (18446744073709551616/1)
- :id: 55
  :callseqs:
  - to_s(base=10)  →  string
  :description:
  - |-
    Returns a string containing the representation of int radix
    base (between 2 and 36).
  :examples: |
    12345.to_s       #=> "12345"
    12345.to_s(2)    #=> "11000000111001"
    12345.to_s(8)    #=> "30071"
    12345.to_s(10)   #=> "12345"
    12345.to_s(16)   #=> "3039"
    12345.to_s(36)   #=> "9ix"
    78546939656932.to_s(36)  #=> "rubyrules"
- :id: 56
  :callseqs:
  - truncate([ndigits])  →  integer or float
  :description:
  - |-
    Returns the smallest number than or equal to int in decimal
    digits (default 0 digits).
  - |-
    Precision may be negative.  Returns a floating point number when
    ndigits is positive, self for zero, and truncate
    up for negative.
  :examples: |
    1.truncate        #=> 1
    1.truncate(2)     #=> 1.0
    15.truncate(-1)   #=> 10
- :id: 57
  :callseqs:
  - upto(limit) {|i| block }  →  self
  - upto(limit)               →  an_enumerator
  :description:
  - |-
    Iterates the given block, passing in integer values from int
    up to and including limit.
  - |-
    If no block is given, an Enumerator is
    returned instead.
  - 'For example:'
  :examples: |
    5.upto(10) { |i| print i, " " }
    #=> 5 6 7 8 9 10
- :id: 58
  :callseqs:
  - integer | integer  →  integer_result
  :description:
  - Bitwise OR.
  :examples: ''
- :id: 59
  :callseqs:
  - "~integer  →  integer"
  :description:
  - 'One''s complement: returns a number where each bit is flipped.'
  - |-
    Inverts the bits in an integer. As Integers are conceptually infinite
    length, the result acts as if it had an infinite number of one bits to the
    left. In hex representations, this is displayed as two periods to the left
    of the digits.
  :examples: 'sprintf("%X", ~0x1122334455)    #=> "..FEEDDCCBBAA"

'
